# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: python:3.7
stages:
- analysis
- test
- end-to-end testing
- build
- deploy

documentation-coverage:
  stage: analysis
  allow_failure: true
  script:
   - pip install docstr-coverage
   - docstr-coverage -F 60.0 asimov
  coverage: '/Total coverage: (\d+\.\d+%)/'
   
flake8:
  stage: analysis
  script:
  - pip install flake8 flake8_formatter_junit_xml
  - flake8 --max-line-length=120 --format junit-xml --verbose asimov > report.xml
  allow_failure: true
  artifacts:  
    reports:
      junit: report.xml

pylint:
  stage: analysis
  allow_failure: True
  script:
  - pip install pylint pylint-gitlab
  - pylint --exit-zero --load-plugins=pylint_gitlab --output-format=gitlab-codeclimate asimov > codeclimate.json
  artifacts:
    reports:
      codequality: codeclimate.json
    when: always

test-python-36:
  stage: test
  image: python:3.6
  script:
  - git config --global user.email "you@example.com"
  - git config --global user.name "Your Name"
  - pip install -r requirements.txt
  - python setup.py install
  - python -m unittest discover tests/

test-python-37:
  stage: test
  image: python:3.7
  script:
  - git config --global user.email "you@example.com"
  - git config --global user.name "Your Name"
  - pip install -r requirements.txt
  - python setup.py install
  - python -m unittest discover tests/

test-python-38:
  stage: test
  image: python:3.8
  script:
  - git config --global user.email "you@example.com"
  - git config --global user.name "Your Name"
  - pip install -r requirements.txt
  - python setup.py install
  - python -m unittest discover tests/

test-python-39:
  stage: test
  image: python:3.9
  script:
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    - pip install -r requirements.txt
    - pip install coverage
    - pip install unittest-xml-reporting
    - python setup.py install
    - coverage run -m xmlrunner discover tests/ -o junit-reports
    - coverage report
    - coverage xml
  artifacts:
    when: always
    paths:
      - public/coverage.txt
    reports:
      junit: junit-reports/*
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'

test-python-310:
  stage: test
  image: python:3.10
  script:
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    - pip install -r requirements.txt
    - pip install coverage
    - python setup.py install
    - python -m unittest discover tests/

GW150914 Real Data Test:
  stage: end-to-end testing
  image: python:3.10
  allow_failure: true
  script:
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    - pip install -r requirements.txt
    - pip install coverage
    - pip install unittest-xml-reporting
    - pip install .
    - mkdir new-project
    - cd new-project
    - asimov init "new project"
    - asimov apply -f https://git.ligo.org/asimov/data/-/raw/main/defaults/testing-pe.yaml
    - asimov apply -f https://git.ligo.org/asimov/data/-/raw/main/defaults/production-pe-priors.yaml
    - asimov apply -f https://git.ligo.org/asimov/data/-/raw/main/events/gwtc-2-1/GW150914_095045.yaml
    - asimov apply -f https://git.ligo.org/asimov/data/-/raw/main/analyses/production-default.yaml -e GW150914_095045
    - asimov manage build
    - asimov manage submit --dryrun


# Build docs for multiple code versions
pages:
  stage: build
  script:
  - pip install -r docs-requirements.txt
  - pip install -r requirements.txt
  - pip install .
  - sphinx-multiversion docs/source public
  - echo "<!DOCTYPE html><html><head><title>Redirecting to master branch</title><meta
    charset=\"utf-8\"><meta http-equiv=\"refresh\" content=\"0; url=./master/index.html\">    <link
    rel=\"canonical\" href=\"https://asimov.docs.ligo.org/asimov/master/index.html\"></head></html>"
    > public/index.html
  artifacts:
    paths:
    - public
  only:
  - master
wheel-36:
  image: python:3.6
  stage: build
  script:
  - pip install wheel
  - python setup.py bdist_wheel --universal
  dependencies: []
  artifacts:
    expire_in: 3h
    paths:
    - dist
wheel-37:
  image: python:3.7
  stage: build
  script:
  - pip install wheel
  - python setup.py bdist_wheel --universal
  dependencies: []
  artifacts:
    expire_in: 3h
    paths:
    - dist
wheel-38:
  image: python:3.8
  stage: build
  script:
  - pip install wheel
  - pip install twine
  - python setup.py bdist_wheel --universal
  - twine check dist/*
  dependencies: []
  artifacts:
    expire_in: 3h
    paths:
    - dist

#   stage: test
include:
- template: Security/SAST.gitlab-ci.yml

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml  

include:
  - template: Code-Quality.gitlab-ci.yml


include:
- template: Security/Secret-Detection.gitlab-ci.yml

# deploy:wheel:
#   stage: deploy
#   script:
#     - pip install twine
#     - twine upload dist/*
#   only:
#     #- master@daniel-williams/minke
#     - tags
#   # except:
#   #   - pushes
#   #   - web
