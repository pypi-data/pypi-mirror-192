{"version":3,"file":"882.d9745445b01cc9f0506b.js?v=d9745445b01cc9f0506b","mappings":"ovFAcaA,EAAO,KACPC,EAAU,KACVC,EAAQ,MACRC,EAAQC,OAAOC,SAASC,KAAKC,SAAS,oBAEtCC,EAAM,CACjBC,OAAQ,iBAGGC,EAA8BC,OAAOC,OAAO,CACvDC,MAAO,GACPC,MAAO,KAGIC,EAAkB,CAC7BC,GAAI,KACJC,OAAQ,SACRC,OAAQ,UAGGC,EAAiB,CAC5BC,SAAU,2BACVC,KAAM,0BACNC,KAAM,wBACNC,WAAY,sBAGDC,EAAiB,CAC5BF,KAAM,EACNF,SAAU,EACVC,KAAM,GAGKI,EAAkB,CAC7BC,cAAe1B,EACf2B,sBAAuB1B,EACvB2B,aAAc5B,EACd6B,qBAAsB5B,GAIxB,IAAY6B,GAAZ,SAAYA,GACV,yBACA,uBACA,2BACA,sBACD,CALD,CAAYA,IAAAA,EAAO,KA+BZ,MAAMC,EAAmB,CAC9B,eACA,eACA,eACA,+BACA,gCACA,gCACA,kCACA,kCACA,kCACA,8BACA,eAIWC,EAAmB,CAC9B,eACA,eACA,cACA,eAIWC,EAAoB,CAAC,YAiErBC,EAAavB,OAAOC,OAAO,G","sources":["webpack://@jupyrdf/jupyter-forcegraph/./js/tokens.ts"],"sourcesContent":["/*\n * Copyright (c) 2023 ipyforcegraph contributors.\n * Distributed under the terms of the Modified BSD License.\n */\nimport d3Force3d from 'd3-force-3d';\nimport type { GraphData, LinkObject, NodeObject } from 'force-graph';\nimport type { WebGLRenderer } from 'three';\n\nimport type { ISignal } from '@lumino/signaling';\n\nimport type { DOMWidgetView } from '@jupyter-widgets/base';\n\nimport PKG from '../package.json';\n\nexport const NAME = PKG.name;\nexport const VERSION = PKG.version;\nexport const EMOJI = 'üï∏Ô∏è';\nexport const DEBUG = window.location.href.includes('FORCEGRAPH_DEBUG');\n\nexport const CSS = {\n  widget: 'jp-ForceGraph',\n};\n\nexport const EMPTY_GRAPH_DATA: GraphData = Object.freeze({\n  links: [],\n  nodes: [],\n});\n\nexport const DEFAULT_COLUMNS = {\n  id: 'id',\n  source: 'source',\n  target: 'target',\n};\n\nexport const DEFAULT_COLORS = {\n  selected: 'rgba(179, 163, 105, 1.0)',\n  node: 'rgba(31, 120, 179, 1.0)',\n  link: 'rgba(66, 66, 66, 0.5)',\n  background: 'rgba(0, 0, 0, 0.0)',\n};\n\nexport const DEFAULT_WIDTHS = {\n  link: 1,\n  selected: 2,\n  node: 1,\n};\n\nexport const WIDGET_DEFAULTS = {\n  _model_module: NAME,\n  _model_module_version: VERSION,\n  _view_module: NAME,\n  _view_module_version: VERSION,\n};\n\n//  Using bit flags for the TUpdateKind number\nexport enum EUpdate {\n  Unknown = 0,\n  Reheat = 1 << 0,\n  Cosmetic = 1 << 1,\n  Render = 1 << 2,\n}\nexport type TUpdateKind = void | number;\n\nexport interface IBehave {\n  updateRequested: ISignal<IBehave, TUpdateKind>;\n  // link\n  getLinkColor?(options: ILinkBehaveOptions): string | null;\n  getLinkWidth?(options: ILinkBehaveOptions): string | null;\n  getLinkLabel?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalArrowColor?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalArrowLength?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalArrowRelPos?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalParticleColor?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalParticleSpeed?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalParticleWidth?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalParticles?(options: ILinkBehaveOptions): string | null;\n  // node\n  getNodeColor?(options: INodeBehaveOptions): string | null;\n  getNodeLabel?(options: INodeBehaveOptions): string | null;\n  getNodeSize?(options: INodeBehaveOptions): string | null;\n  // evented\n  onNodeClick?(options: INodeEventBehaveOptions): boolean;\n  onLinkClick?(options: ILinkEventBehaveOptions): boolean;\n  onRender?(options: IRenderOptions): void;\n}\n\nexport const ALL_LINK_METHODS = [\n  'getLinkLabel',\n  'getLinkColor',\n  'getLinkWidth',\n  'getLinkDirectionalArrowColor',\n  'getLinkDirectionalArrowLength',\n  'getLinkDirectionalArrowRelPos',\n  'getLinkDirectionalParticleColor',\n  'getLinkDirectionalParticleSpeed',\n  'getLinkDirectionalParticleWidth',\n  'getLinkDirectionalParticles',\n  'onLinkClick',\n];\nexport type TLinkBehaveMethod = (typeof ALL_LINK_METHODS)[number];\n\nexport const ALL_NODE_METHODS = [\n  'getNodeLabel',\n  'getNodeColor',\n  'getNodeSize',\n  'onNodeClick',\n];\nexport type TNodeBehaveMethod = (typeof ALL_NODE_METHODS)[number];\n\nexport const ALL_GRAPH_METHODS = ['onRender'];\nexport type TGraphBehaveMethod = (typeof ALL_GRAPH_METHODS)[number];\n\nexport type TNodeMethodMap = Map<TNodeBehaveMethod, IBehave[]>;\nexport type TLinkMethodMap = Map<TLinkBehaveMethod, IBehave[]>;\nexport type TGraphMethodMap = Map<TGraphBehaveMethod, IBehave[]>;\n\nexport interface IBehaveOptions {\n  view: IHasGraph;\n  graphData: GraphData;\n}\n\nexport interface INodeBehaveOptions extends IBehaveOptions {\n  node: NodeObject;\n}\n\nexport interface INodeEventBehaveOptions extends INodeBehaveOptions {\n  event: MouseEvent;\n}\n\nexport interface ILinkBehaveOptions extends IBehaveOptions {\n  link: LinkObject;\n  index: number;\n}\n\nexport interface ILinkEventBehaveOptions extends ILinkBehaveOptions {\n  event: MouseEvent;\n}\n\nexport interface IRenderOptions extends IBehaveOptions {\n  context2d?: CanvasRenderingContext2D;\n  renderer3d?: WebGLRenderer;\n  globalScale?: number;\n  time?: number;\n}\n\nexport interface IHasGraph<T = any> extends DOMWidgetView {\n  graph: T;\n  source: ISource;\n  rendered: Promise<void>;\n  wrapFunction: (fn: Function) => Function;\n}\n\nexport interface ISource {\n  graphData: GraphData;\n  dataUpdated: ISignal<ISource, void>;\n}\n\nexport type TAnyForce =\n  | d3Force3d.forceCenter\n  | d3Force3d.forceCollide\n  | d3Force3d.forceLink\n  | d3Force3d.forceManyBody\n  | d3Force3d.forceRadial\n  | d3Force3d.forceSimulation\n  | d3Force3d.forceX\n  | d3Force3d.forceY\n  | d3Force3d.forceZ;\n\nexport interface IForce {\n  forceFactory(): TAnyForce;\n}\n\nexport type TSelectedSet = Set<string | number>;\n\nexport const emptyArray = Object.freeze([]);\n"],"names":["NAME","VERSION","EMOJI","DEBUG","window","location","href","includes","CSS","widget","EMPTY_GRAPH_DATA","Object","freeze","links","nodes","DEFAULT_COLUMNS","id","source","target","DEFAULT_COLORS","selected","node","link","background","DEFAULT_WIDTHS","WIDGET_DEFAULTS","_model_module","_model_module_version","_view_module","_view_module_version","EUpdate","ALL_LINK_METHODS","ALL_NODE_METHODS","ALL_GRAPH_METHODS","emptyArray"],"sourceRoot":""}