{"version":3,"sources":["pages/RunDetail/RunMetricCard.tsx","pages/RunDetail/RunDetailMetricsAndSystemTab.tsx","config/charts/index.ts","components/LineChart/LineChart.tsx"],"names":["RunMetricCard","batch","index","observer","isPinned","togglePin","containerRef","React","current","observe","ErrorBoundary","className","data-name","name","data-context","contextToString","context","ref","Tooltip","title","color","size","variant","withOnlyIcon","onClick","iters","LineChart","data","key","xValues","yValues","values","dasharray","selectors","axesScaleType","xAxis","ScaleEnum","Linear","yAxis","ignoreOutliers","highlightMode","HighlightEnum","Off","curveInterpolation","CurveEnum","component","tint","weight","isSystemMetric","formatSystemMetricName","split","map","label","i","monospace","COLORS","length","RunDetailMetricsAndSystemTab","runHash","runTraces","runBatch","isSystem","isRunBatchLoading","observerRef","observerIsReady","setObserverIsReady","visibleMetrics","setVisibleMetrics","projectsData","useModel","projectsModel","tabMertcis","metric","filter","m","pinnedMetrics","regularMetrics","pinnedSequenceIndex","pinnedSequences","findIndex","seq","push","newPinnedMetrics","setPinnedSequencesRequestRef","setPinnedSequences","sequences","detail","setState","exceptionHandler","model","runDetailAppModel","call","renderMetricCards","metrics","pinned","sortKey","sort","alphabeticalSortComparator","orderBy","find","options","root","parentElement","rootMargin","threshold","IntersectionObserver","entries","forEach","entry","isIntersecting","metricName","target","getAttribute","metricContext","vM","concat","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","tabView","disconnect","timerID","runsBatchRequestRef","window","setTimeout","getRunMetricsBatch","clearTimeout","abort","BusyLoaderWrapper","isLoading","height","_","isEmpty","IllustrationBlock","RENDER_LINES_OPTIMIZED_LIMIT","GRID_SIZE","S","M","L","CHART_GRID_PATTERN","1","2","3","4","5","6","7","8","9","forwardRef","props","nameKey","aggregatedData","aggregationConfig","syncHoverState","axesScaleRange","alignmentConfig","chartTitle","zoom","onZoomChange","readOnly","resizeMode","visBoxRef","useRef","margin","top","right","bottom","left","width","plotBoxRef","parentRef","visAreaRef","svgNodeRef","bgRectNodeRef","plotNodeRef","axesNodeRef","linesNodeRef","attributesNodeRef","xAxisLabelNodeRef","yAxisLabelNodeRef","highlightedNodeRef","axesRef","linesRef","attributesRef","humanizerConfigRef","rafIDRef","unableToDrawConditions","renderChart","clearArea","drawArea","processLineChartData","processedData","processedAggrData","min","max","drawAxes","xScale","yScale","drawBgTickLines","y","x","drawLines","selectChildren","classed","drawBrush","drawHoverAttributes","drawUnableToRender","renderArr","draw","resizeObserverCallback","useCallback","requestAnimationFrame","observerReturnCallback","cancelAnimationFrame","useResizeObserver","useEffect","useImperativeHandle","setActiveLineAndCircle","lineKey","focusedStateActive","force","updateHoverAttributes","xValue","dataSelector","clearHoverAttributes","setFocusedState","focusedState","classNames","zoomMode","active","displayName","memo"],"mappings":"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","file":"static/js/RunDetailMetricsAndSystemTab.js?version=32b6840b0aaa7234d177","sourcesContent":["import * as React from 'react';\n\nimport { Tooltip } from '@material-ui/core';\n\nimport LineChart from 'components/LineChart/LineChart';\nimport { Badge, Text, Button, Spinner, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport COLORS from 'config/colors/colors';\n\nimport contextToString from 'utils/contextToString';\nimport { CurveEnum, ScaleEnum, HighlightEnum } from 'utils/d3';\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport { formatSystemMetricName } from 'utils/formatSystemMetricName';\n\nimport { IRunMetricCardProps } from './types';\n\nfunction RunMetricCard({\n  batch,\n  index,\n  observer,\n  isPinned,\n  togglePin,\n}: IRunMetricCardProps): React.FunctionComponentElement<React.ReactNode> {\n  const containerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    if (containerRef.current && observer) {\n      observer.observe(containerRef.current!);\n    }\n  }, [observer]);\n\n  return (\n    <ErrorBoundary>\n      <div\n        className='RunDetailMetricsTab__container__chartContainer'\n        data-name={batch.name}\n        data-context={contextToString(batch.context)}\n        ref={containerRef}\n      >\n        <Tooltip title={isPinned ? 'Unpin' : 'Pin'}>\n          <div className='RunDetailMetricsTab__container__chartContainer__metricDetailBox__pin'>\n            <Button\n              color={isPinned ? 'primary' : 'default'}\n              size='xSmall'\n              variant='outlined'\n              withOnlyIcon\n              onClick={() =>\n                togglePin(\n                  {\n                    name: batch.name,\n                    context: batch.context,\n                  },\n                  isPinned,\n                )\n              }\n            >\n              <Icon name='pin' />\n            </Button>\n          </div>\n        </Tooltip>\n        <div className='RunDetailMetricsTab__container__chartContainer__chartBox'>\n          {batch.iters ? (\n            <ErrorBoundary>\n              <LineChart\n                data={[\n                  {\n                    key: batch.key,\n                    data: {\n                      xValues: [...batch.iters],\n                      yValues: [...batch.values],\n                    },\n                    color: '#1c2852',\n                    dasharray: 'none',\n                    selectors: [batch.key],\n                  },\n                ]}\n                index={index}\n                axesScaleType={{\n                  xAxis: ScaleEnum.Linear,\n                  yAxis: ScaleEnum.Linear,\n                }}\n                ignoreOutliers={false}\n                highlightMode={HighlightEnum.Off}\n                curveInterpolation={CurveEnum.Linear}\n              />\n            </ErrorBoundary>\n          ) : (\n            <Spinner />\n          )}\n        </div>\n        <div className='RunDetailMetricsTab__container__chartContainer__metricDetailBox'>\n          <Text\n            component='h4'\n            tint={100}\n            size={18}\n            weight={600}\n            className='RunDetailMetricsTab__container__chartContainer__metricDetailBox__metricName'\n          >\n            {isSystemMetric(batch?.name)\n              ? formatSystemMetricName(batch?.name)\n              : batch?.name}\n          </Text>\n          {contextToString(batch?.context)\n            ?.split(',')\n            .map((label: string, i: number) => (\n              <Badge\n                key={i}\n                monospace\n                size='large'\n                color={COLORS[0][(i + index) % COLORS[0].length]}\n                label={label || 'Empty context'}\n              />\n            ))}\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(RunMetricCard);\n","import * as React from 'react';\nimport _ from 'lodash-es';\nimport { useModel } from 'hooks';\n\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport { Text } from 'components/kit';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\nimport projectsModel from 'services/models/projects/projectsModel';\n\nimport {\n  IPinnedSequence,\n  IProjectsModelState,\n} from 'types/services/models/projects/projectsModel';\n\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport contextToString from 'utils/contextToString';\nimport alphabeticalSortComparator from 'utils/alphabeticalSortComparator';\nimport exceptionHandler from 'utils/app/exceptionHandler';\n\nimport RunMetricCard from './RunMetricCard';\nimport { IRunBatch, IRunDetailMetricsAndSystemTabProps } from './types';\n\nfunction RunDetailMetricsAndSystemTab({\n  runHash,\n  runTraces,\n  runBatch,\n  isSystem,\n  isRunBatchLoading,\n}: IRunDetailMetricsAndSystemTabProps): React.FunctionComponentElement<React.ReactNode> {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const observerRef = React.useRef<IntersectionObserver>();\n  const [observerIsReady, setObserverIsReady] = React.useState(false);\n  const [visibleMetrics, setVisibleMetrics] = React.useState<\n    IRunDetailMetricsAndSystemTabProps['runTraces']['metric']\n  >([]);\n  const projectsData = useModel<Partial<IProjectsModelState>>(\n    projectsModel,\n    false,\n  );\n\n  const tabMertcis = React.useMemo(\n    () =>\n      runTraces.metric.filter((m) =>\n        isSystem ? isSystemMetric(m.name) : !isSystemMetric(m.name),\n      ),\n    [runTraces.metric, isSystem],\n  );\n  let pinnedMetrics: IRunDetailMetricsAndSystemTabProps['runTraces']['metric'] =\n    [];\n  let regularMetrics: IRunDetailMetricsAndSystemTabProps['runTraces']['metric'] =\n    [];\n\n  for (let i = 0; i < tabMertcis.length; i++) {\n    let metric = tabMertcis[i];\n    let pinnedSequenceIndex =\n      projectsData?.pinnedSequences?.findIndex(\n        (seq) =>\n          seq.name === metric.name &&\n          contextToString(seq.context) === contextToString(metric.context),\n      ) ?? -1;\n    if (pinnedSequenceIndex > -1) {\n      pinnedMetrics[pinnedSequenceIndex] = metric;\n    } else {\n      regularMetrics.push(metric);\n    }\n  }\n\n  pinnedMetrics.filter((metric) => !!metric);\n\n  React.useEffect(() => {\n    if (!!containerRef.current) {\n      let options = {\n        root: containerRef.current.parentElement?.parentElement,\n        rootMargin: '0px',\n        threshold: 0,\n      };\n      observerRef.current = new IntersectionObserver(\n        (entries: IntersectionObserverEntry[]) => {\n          let metrics: { name: string; context: string }[] = [];\n          entries.forEach((entry: IntersectionObserverEntry) => {\n            if (entry.isIntersecting) {\n              let metricName = entry.target.getAttribute('data-name')!;\n              let metricContext = entry.target.getAttribute('data-context')!;\n              if (\n                !runBatch?.find(\n                  (batch: IRunBatch) =>\n                    batch.name === metricName &&\n                    contextToString(batch.context) === metricContext,\n                )\n              ) {\n                metrics.push({\n                  name: metricName,\n                  context: metricContext,\n                });\n              }\n            }\n          });\n\n          if (metrics.length > 0) {\n            setVisibleMetrics((vM) =>\n              vM.concat(\n                metrics.map(\n                  (metric) =>\n                    tabMertcis.find(\n                      (m) =>\n                        m.name === metric.name &&\n                        contextToString(m.context) === metric.context,\n                    )!,\n                ),\n              ),\n            );\n          }\n        },\n        options,\n      );\n      setObserverIsReady(true);\n    }\n\n    analytics.pageView(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs[isSystem ? 'system' : 'metrics']\n        .tabView,\n    );\n\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [isSystem, runBatch, observerIsReady, runTraces.metric, tabMertcis]);\n\n  React.useEffect(() => {\n    let timerID: number;\n    let runsBatchRequestRef: { call: () => Promise<void>; abort: () => void };\n    if (visibleMetrics.length > 0) {\n      timerID = window.setTimeout(() => {\n        runsBatchRequestRef = runDetailAppModel.getRunMetricsBatch(\n          visibleMetrics,\n          runHash,\n        );\n\n        runsBatchRequestRef.call();\n      }, 100);\n    }\n\n    return () => {\n      if (timerID) {\n        clearTimeout(timerID);\n      }\n      if (runsBatchRequestRef) {\n        runsBatchRequestRef.abort();\n      }\n    };\n  }, [visibleMetrics, runHash]);\n\n  React.useEffect(() => {\n    setVisibleMetrics((vM) =>\n      vM.filter(\n        (m) =>\n          runBatch.findIndex(\n            (batch: IRunBatch) =>\n              batch.name === m.name &&\n              contextToString(batch.context) === contextToString(m.context),\n          ) === -1,\n      ),\n    );\n  }, [runBatch]);\n\n  async function togglePin(metric: IPinnedSequence, isPinned: boolean) {\n    const newPinnedMetrics = isPinned\n      ? pinnedMetrics.filter(\n          (m) =>\n            !(\n              m.name === metric.name &&\n              contextToString(m.context) === contextToString(metric.context)\n            ),\n        )\n      : [...pinnedMetrics, metric];\n    const setPinnedSequencesRequestRef = projectsModel.setPinnedSequences(\n      {\n        sequences: newPinnedMetrics,\n      },\n      (detail: unknown) => {\n        projectsModel.setState({\n          pinnedSequences: pinnedMetrics,\n        });\n        exceptionHandler({ detail, model: runDetailAppModel });\n      },\n    );\n\n    projectsModel.setState({\n      pinnedSequences: newPinnedMetrics,\n    });\n\n    setPinnedSequencesRequestRef.call();\n  }\n\n  function renderMetricCards(\n    metrics: IRunDetailMetricsAndSystemTabProps['runTraces']['metric'],\n    pinned: boolean,\n  ) {\n    return (\n      observerIsReady &&\n      metrics.length > 0 && (\n        <>\n          <div className='RunDetailMetricsTab__header'>\n            <Text component='h3' size={16} color='primary'>\n              {pinned ? 'Pinned ' : ''}Metrics\n            </Text>\n          </div>\n          <div className='RunDetailMetricsTab__container'>\n            {(pinned\n              ? metrics\n              : metrics\n                  .map((m) => ({\n                    ...m,\n                    sortKey: `${m.name}_${contextToString(m.context)}`,\n                  }))\n                  .sort(alphabeticalSortComparator({ orderBy: 'sortKey' }))\n            ).map((metric, i: number) => {\n              const batch: IRunBatch = {\n                ...metric,\n                ...runBatch?.find(\n                  (batch: IRunBatch) =>\n                    batch.name === metric.name &&\n                    contextToString(batch.context) ===\n                      contextToString(metric.context),\n                ),\n              };\n              return (\n                <RunMetricCard\n                  key={`${batch.name}_${contextToString(batch.context)}`}\n                  batch={batch}\n                  index={i}\n                  observer={observerRef.current}\n                  isPinned={pinned}\n                  togglePin={togglePin}\n                />\n              );\n            })}\n          </div>\n        </>\n      )\n    );\n  }\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={isRunBatchLoading}\n        className='RunDetailTabLoader'\n        height='100%'\n      >\n        {!_.isEmpty(tabMertcis) ? (\n          <div className='RunDetailMetricsTab' ref={containerRef}>\n            {renderMetricCards(pinnedMetrics, true)}\n            {renderMetricCards(regularMetrics, false)}\n          </div>\n        ) : (\n          <IllustrationBlock\n            size='xLarge'\n            className='RunDetailTabLoader'\n            title={`No tracked ${isSystem ? 'system' : ''} metrics`}\n          />\n        )}\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(RunDetailMetricsAndSystemTab);\n","export const RENDER_LINES_OPTIMIZED_LIMIT = 100;\n\nexport const GRID_SIZE = {\n  S: 4,\n  M: 6,\n  L: 12,\n};\n\nconst { S, M, L } = GRID_SIZE;\n// Chart grid pattern based on a 12-column grid layout\nexport const CHART_GRID_PATTERN: { [key: number]: number[] } = {\n  1: [L],\n  2: [M, M],\n  3: [S, S, S],\n  4: [M, M, M, M],\n  5: [S, S, S, M, M],\n  6: [S, S, S, S, S, S],\n  7: [S, S, S, M, M, M, M],\n  8: [S, S, S, S, S, S, M, M],\n  9: [S, S, S, S, S, S, S, S, S],\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useResizeObserver } from 'hooks';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { RENDER_LINES_OPTIMIZED_LIMIT } from 'config/charts';\n\nimport {\n  IAttributesRef,\n  ILineChartProps,\n} from 'types/components/LineChart/LineChart';\nimport { IFocusedState } from 'types/services/models/metrics/metricsAppModel';\n\nimport {\n  drawArea,\n  clearArea,\n  drawAxes,\n  drawLines,\n  processLineChartData,\n  drawBrush,\n  drawHoverAttributes,\n  drawUnableToRender,\n  CurveEnum,\n  HighlightEnum,\n} from 'utils/d3';\n\nimport './LineChart.scss';\n\nconst LineChart = React.forwardRef(function LineChart(\n  props: ILineChartProps,\n  ref,\n): React.FunctionComponentElement<React.ReactNode> {\n  const {\n    data,\n    index = 0,\n    nameKey = '',\n    aggregatedData,\n    aggregationConfig,\n    syncHoverState,\n    axesScaleType,\n    axesScaleRange,\n    ignoreOutliers = false,\n    alignmentConfig,\n    highlightMode = HighlightEnum.Off,\n    curveInterpolation = CurveEnum.Linear,\n    chartTitle,\n    zoom,\n    onZoomChange,\n    readOnly = false,\n    resizeMode,\n  } = props;\n\n  // boxes\n  const visBoxRef = React.useRef({\n    margin: {\n      top: 30,\n      right: 20,\n      bottom: 30,\n      left: 60,\n    },\n    height: 0,\n    width: 0,\n  });\n  const plotBoxRef = React.useRef({\n    height: 0,\n    width: 0,\n  });\n\n  // containers\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const visAreaRef = React.useRef<HTMLDivElement>(null);\n\n  // d3 node elements\n  const svgNodeRef = React.useRef(null);\n  const bgRectNodeRef = React.useRef(null);\n  const plotNodeRef = React.useRef(null);\n  const axesNodeRef = React.useRef(null);\n  const linesNodeRef = React.useRef<any>(null);\n  const attributesNodeRef = React.useRef(null);\n  const xAxisLabelNodeRef = React.useRef(null);\n  const yAxisLabelNodeRef = React.useRef(null);\n  const highlightedNodeRef = React.useRef(null);\n\n  // methods and values refs\n  const axesRef = React.useRef({});\n  const linesRef = React.useRef({});\n  const attributesRef = React.useRef<IAttributesRef>({});\n  const humanizerConfigRef = React.useRef({});\n  const rafIDRef = React.useRef<number>();\n\n  const unableToDrawConditions: { condition: boolean; text?: string }[] = [];\n\n  function draw() {\n    drawArea({\n      index,\n      nameKey,\n      visBoxRef,\n      plotBoxRef,\n      parentRef,\n      visAreaRef,\n      svgNodeRef,\n      bgRectNodeRef,\n      plotNodeRef,\n      axesNodeRef,\n      linesNodeRef,\n      attributesNodeRef,\n      chartTitle,\n    });\n\n    const { processedData, processedAggrData, min, max } = processLineChartData(\n      {\n        data,\n        ignoreOutliers,\n        visBoxRef,\n        axesScaleType,\n        axesScaleRange,\n        aggregatedData,\n        aggregationConfig,\n        unableToDrawConditions,\n        attributesRef,\n      },\n    );\n\n    drawAxes({\n      svgNodeRef,\n      axesNodeRef,\n      axesRef,\n      plotBoxRef,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      visBoxRef,\n      alignmentConfig,\n      axesScaleType,\n      humanizerConfigRef,\n      drawBgTickLines: { y: true, x: false },\n    });\n\n    drawLines({\n      index,\n      processedData,\n      nameKey,\n      linesNodeRef,\n      linesRef,\n      curveInterpolation,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      highlightMode,\n      aggregationConfig,\n      processedAggrData,\n      readOnly,\n    });\n\n    // render lines with low quality if lines count are more than 'RENDER_LINES_OPTIMIZED_LIMIT'\n    if (!readOnly && linesNodeRef.current) {\n      const linesCount = linesNodeRef.current.selectChildren().size();\n      if (linesCount > RENDER_LINES_OPTIMIZED_LIMIT) {\n        linesNodeRef.current.classed('optimizeRendering', true);\n      }\n    }\n\n    drawBrush({\n      index,\n      plotBoxRef,\n      plotNodeRef,\n      visBoxRef,\n      axesRef,\n      attributesRef,\n      linesRef,\n      svgNodeRef,\n      axesScaleType,\n      min,\n      max,\n      axesScaleRange,\n      zoom,\n      onZoomChange,\n      readOnly,\n      unableToDrawConditions,\n    });\n\n    if (!readOnly) {\n      drawHoverAttributes({\n        index,\n        nameKey,\n        data,\n        processedData,\n        axesScaleType,\n        highlightMode,\n        syncHoverState,\n        visAreaRef,\n        attributesRef,\n        plotBoxRef,\n        visBoxRef,\n        svgNodeRef,\n        bgRectNodeRef,\n        attributesNodeRef,\n        xAxisLabelNodeRef,\n        yAxisLabelNodeRef,\n        linesNodeRef,\n        highlightedNodeRef,\n        aggregationConfig,\n        alignmentConfig,\n      });\n    }\n\n    drawUnableToRender({\n      renderArr: unableToDrawConditions,\n      visAreaRef,\n      attributesRef,\n      readOnly,\n      syncHoverState,\n    });\n  }\n\n  function renderChart() {\n    clearArea({ visAreaRef });\n    draw();\n  }\n\n  const resizeObserverCallback: ResizeObserverCallback = React.useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries?.length) {\n        rafIDRef.current = window.requestAnimationFrame(renderChart);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      data,\n      zoom,\n      ignoreOutliers,\n      highlightMode,\n      axesScaleType,\n      axesScaleRange,\n      curveInterpolation,\n      aggregationConfig,\n      readOnly,\n      alignmentConfig,\n      resizeMode,\n    ],\n  );\n\n  const observerReturnCallback = React.useCallback(() => {\n    if (rafIDRef.current) {\n      window.cancelAnimationFrame(rafIDRef.current);\n    }\n  }, []);\n\n  useResizeObserver(resizeObserverCallback, parentRef, observerReturnCallback);\n\n  React.useEffect(() => {\n    rafIDRef.current = window.requestAnimationFrame(renderChart);\n    return () => {\n      if (rafIDRef.current) {\n        window.cancelAnimationFrame(rafIDRef.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    data,\n    zoom,\n    ignoreOutliers,\n    highlightMode,\n    axesScaleType,\n    axesScaleRange,\n    curveInterpolation,\n    aggregationConfig,\n    readOnly,\n    alignmentConfig,\n    resizeMode,\n  ]);\n\n  React.useImperativeHandle(ref, () => ({\n    setActiveLineAndCircle: (\n      lineKey: string,\n      focusedStateActive: boolean = false,\n      force: boolean = false,\n    ) => {\n      attributesRef.current.setActiveLineAndCircle?.(\n        lineKey,\n        focusedStateActive,\n        force,\n      );\n    },\n    updateHoverAttributes: (xValue: number, dataSelector?: string) => {\n      attributesRef.current.updateHoverAttributes?.(xValue, dataSelector);\n    },\n    clearHoverAttributes: () => {\n      attributesRef.current.clearHoverAttributes?.();\n    },\n    setFocusedState: (focusedState: IFocusedState) => {\n      attributesRef.current.focusedState = focusedState;\n    },\n  }));\n\n  return (\n    <ErrorBoundary>\n      <div\n        ref={parentRef}\n        className={classNames('LineChart', {\n          zoomMode: !readOnly && zoom?.active,\n        })}\n      >\n        <div ref={visAreaRef} />\n      </div>\n    </ErrorBoundary>\n  );\n});\n\nLineChart.displayName = 'LineChart';\n\nexport default React.memo(LineChart);\n"],"sourceRoot":""}