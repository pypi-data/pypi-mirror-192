{"version":3,"sources":["pages/RunDetail/RunDetailSettingsTab/RunDetailSettingsTab.tsx","components/ConfirmModal/ConfirmModal.tsx","components/NameAndDescriptionCard/NameAndDescriptionCard.tsx","components/NameAndDescriptionCard/index.ts"],"names":["RunDetailSettingsTab","runHash","isArchived","defaultName","defaultDescription","history","useHistory","React","useState","openDeleteModal","setOpenDeleteModal","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","settings","tabView","className","onSave","name","description","runDetailAppModel","editRunNameAndDescription","title","btnTooltip","btnText","onAction","archiveRun","btnProps","variant","classNames","RunDetailSettingsTab__actionCardsCnt__btn__archive","RunDetailSettingsTab__actionCardsCnt__btn__unarchive","open","onCancel","onSubmit","deleteRun","push","text","icon","statusType","confirmBtnText","memo","ConfirmModal","props","onClose","aria-labelledby","aria-describedby","PaperProps","elevation","size","color","withOnlyIcon","onClick","tint","component","weight","id","children","cancelBtnText","autoFocus","defaultProps","displayName","NameAndDescriptionCard","formik","useFormik","initialValues","_","noop","validationSchema","yup","required","values","errors","touched","setFieldValue","setFieldTouched","onChange","e","fieldName","target","value","then","ErrorBoundary","Button","disabled","isEmpty","TextField","error","helperText","label","multiline","type"],"mappings":"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","file":"static/js/RunDetailSettingsTab.js?version=075babcaccdeeb4f4757","sourcesContent":["import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\n\nimport ConfirmModal from 'components/ConfirmModal/ConfirmModal';\nimport { ActionCard, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport NameAndDescriptionCard from 'components/NameAndDescriptionCard';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\nimport * as analytics from 'services/analytics';\n\nimport { IRunDetailSettingsTabProps } from './types';\n\nimport './RunDetailSettingsTab.scss';\n\nfunction RunDetailSettingsTab({\n  runHash,\n  isArchived,\n  defaultName,\n  defaultDescription,\n}: IRunDetailSettingsTabProps): React.FunctionComponentElement<React.ReactNode> {\n  const history = useHistory();\n  const [openDeleteModal, setOpenDeleteModal] = React.useState<boolean>(false);\n\n  function onRunArchive() {\n    analytics.trackEvent(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.archiveRun,\n    );\n    runDetailAppModel.archiveRun(runHash, !isArchived);\n  }\n\n  function onRunDelete() {\n    analytics.trackEvent(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.deleteRun,\n    );\n    runDetailAppModel.deleteRun(runHash, () => {\n      history.push('/runs');\n    });\n  }\n\n  function handleDeleteModalOpen() {\n    setOpenDeleteModal(true);\n  }\n\n  function handleDeleteModalClose() {\n    setOpenDeleteModal(false);\n  }\n\n  React.useEffect(() => {\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.tabView);\n  }, []);\n\n  function onSave(name: string, description: string) {\n    runDetailAppModel.editRunNameAndDescription(\n      runHash,\n      name,\n      description,\n      isArchived,\n    );\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className='RunDetailSettingsTab'>\n        <div className='RunDetailSettingsTab__actionCardsCnt'>\n          <NameAndDescriptionCard\n            defaultName={defaultName ?? ''}\n            defaultDescription={defaultDescription ?? ''}\n            onSave={onSave}\n          />\n          <ActionCard\n            title={isArchived ? 'Unarchive Run' : 'Archive Run'}\n            description={\n              isArchived\n                ? 'Unarchive runs will appear in search both on Dashboard and Explore.'\n                : 'Archived runs will not appear in search both on Dashboard and Explore.'\n            }\n            btnTooltip={isArchived ? 'Unarchive' : 'Archive'}\n            btnText={isArchived ? 'Unarchive' : 'Archive'}\n            onAction={onRunArchive}\n            btnProps={{\n              variant: 'outlined',\n              className: classNames({\n                RunDetailSettingsTab__actionCardsCnt__btn__archive: !isArchived,\n                RunDetailSettingsTab__actionCardsCnt__btn__unarchive:\n                  isArchived,\n              }),\n            }}\n          />\n\n          <ActionCard\n            title='Delete Run'\n            description='Once you delete a run, there is no going back. Please be certain.'\n            btnTooltip='Delete Run'\n            btnText='Delete'\n            onAction={handleDeleteModalOpen}\n            btnProps={{\n              variant: 'contained',\n              className: 'RunDetailSettingsTab__actionCardsCnt__btn__delete',\n            }}\n          />\n        </div>\n        <ConfirmModal\n          open={openDeleteModal}\n          onCancel={handleDeleteModalClose}\n          onSubmit={onRunDelete}\n          text='Are you sure you want to delete this run?'\n          icon={<Icon name='delete' />}\n          title='Delete run'\n          statusType='error'\n          confirmBtnText='Delete'\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunDetailSettingsTab);\n","import React from 'react';\n\nimport { Dialog } from '@material-ui/core';\n\nimport { Button, Text, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IConfirmModalProps } from 'types/components/ConfirmModal/ConfirmModal';\n\nimport './ConfirmModal.scss';\n\nfunction ConfirmModal(\n  props: IConfirmModalProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <Dialog\n        open={props.open}\n        onClose={props.onCancel}\n        aria-labelledby='dialog-title'\n        aria-describedby='dialog-description'\n        PaperProps={{\n          elevation: 10,\n        }}\n        className={`ConfirmModal ConfirmModal__${props.statusType}`}\n      >\n        <div className='ConfirmModal__Body'>\n          <Button\n            size='small'\n            className='ConfirmModal__Close__Icon'\n            color='secondary'\n            withOnlyIcon\n            onClick={props.onCancel}\n          >\n            <Icon name='close' />\n          </Button>\n\n          <div className='ConfirmModal__Title__Container'>\n            <div className='ConfirmModal__Icon'>{props.icon}</div>\n            {props.title && (\n              <Text size={16} tint={100} component='h4' weight={600}>\n                {props.title}\n              </Text>\n            )}\n          </div>\n\n          <div>\n            {props.description && (\n              <Text\n                className='ConfirmModal__description'\n                weight={400}\n                component='p'\n                id='dialog-description'\n              >\n                {props.description}\n              </Text>\n            )}\n\n            <div>\n              {props.text && (\n                <Text\n                  className='ConfirmModal__text'\n                  weight={400}\n                  component='p'\n                  size={14}\n                  id='dialog-description'\n                >\n                  {props.text || ''}\n                </Text>\n              )}\n              {props.children && props.children}\n            </div>\n          </div>\n        </div>\n\n        <div className='ConfirmModal__Footer'>\n          <Button\n            onClick={props.onCancel}\n            className='ConfirmModal__CancelButton'\n          >\n            {props.cancelBtnText}\n          </Button>\n          <Button\n            onClick={props.onSubmit}\n            color='primary'\n            variant='contained'\n            className='ConfirmModal__ConfirmButton'\n            autoFocus\n          >\n            {props.confirmBtnText}\n          </Button>\n        </div>\n      </Dialog>\n    </ErrorBoundary>\n  );\n}\n\nConfirmModal.defaultProps = {\n  confirmBtnText: 'Confirm',\n  cancelBtnText: 'Cancel',\n  statusType: 'info',\n};\n\nConfirmModal.displayName = 'ConfirmModal';\n\nexport default React.memo<IConfirmModalProps>(ConfirmModal);\n","import React, { memo } from 'react';\nimport * as yup from 'yup';\nimport _ from 'lodash-es';\nimport { useFormik } from 'formik';\n\nimport { Button, TextField } from '@material-ui/core';\n\nimport { Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { INameAndDescriptionCardProps } from '.';\n\nimport './NameAndDescriptionCard.scss';\n\nfunction NameAndDescriptionCard({\n  title = 'Run Properties',\n  defaultName,\n  defaultDescription,\n  onSave,\n}: INameAndDescriptionCardProps): React.FunctionComponentElement<React.ReactNode> {\n  const formik = useFormik({\n    initialValues: {\n      name: defaultName ?? '',\n      description: defaultDescription ?? '',\n    },\n    onSubmit: _.noop,\n    validationSchema: yup.object({\n      name: yup.string().required('Name is a required field'),\n    }),\n  });\n\n  const { values, errors, touched, setFieldValue, setFieldTouched } = formik;\n\n  function onChange(e: React.ChangeEvent<any>, fieldName: string) {\n    setFieldValue(fieldName, e?.target?.value, true).then(() => {\n      setFieldTouched(fieldName, true);\n    });\n  }\n\n  function saveHandler() {\n    onSave(values.name, values.description);\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className='NameAndDescriptionCard'>\n        <div className='NameAndDescriptionCard__header'>\n          <Text component='h4' weight={600} size={14} tint={100}>\n            {title}\n          </Text>\n          <Button\n            onClick={saveHandler}\n            disabled={\n              !_.isEmpty(errors) ||\n              (values.name === defaultName &&\n                values.description === defaultDescription)\n            }\n            variant='contained'\n            color='primary'\n            className='NameAndDescriptionCard__saveBtn'\n          >\n            Save\n          </Button>\n        </div>\n        <div className='NameAndDescriptionCard__content'>\n          <div className='NameAndDescriptionCard__content__nameBox'>\n            <TextField\n              variant='outlined'\n              className='TextField__OutLined__Medium NameAndDescriptionCard__content__nameBox__nameInput'\n              value={values.name}\n              onChange={(e) => onChange(e, 'name')}\n              error={!!(touched.name && errors.name)}\n              helperText={touched.name && errors.name}\n              label='Name'\n            />\n          </div>\n          <div className='NameAndDescriptionCard__content__descriptionBox'>\n            <TextField\n              variant='outlined'\n              multiline\n              label='Description'\n              type='textarea'\n              className='NameAndDescriptionCard__content__descriptionBox__descriptionInput'\n              value={values.description}\n              onChange={(e) => onChange(e, 'description')}\n              error={!!(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(NameAndDescriptionCard);\n","import NameAndDescriptionCard from './NameAndDescriptionCard';\n\nexport * from './NameAndDescriptionCard.d';\n\nexport default NameAndDescriptionCard;\n"],"sourceRoot":""}