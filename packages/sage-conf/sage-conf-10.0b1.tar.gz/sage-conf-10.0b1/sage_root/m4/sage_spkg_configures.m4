m4_sinclude([build/pkgs/4ti2/spkg-configure.m4])
m4_sinclude([build/pkgs/_develop/spkg-configure.m4])
m4_sinclude([build/pkgs/_prereq/spkg-configure.m4])
m4_sinclude([build/pkgs/_recommended/spkg-configure.m4])
m4_sinclude([build/pkgs/appdirs/spkg-configure.m4])
m4_sinclude([build/pkgs/arb/spkg-configure.m4])
m4_sinclude([build/pkgs/boost_cropped/spkg-configure.m4])
m4_sinclude([build/pkgs/brial/spkg-configure.m4])
m4_sinclude([build/pkgs/bzip2/spkg-configure.m4])
m4_sinclude([build/pkgs/cbc/spkg-configure.m4])
m4_sinclude([build/pkgs/cddlib/spkg-configure.m4])
m4_sinclude([build/pkgs/cliquer/spkg-configure.m4])
m4_sinclude([build/pkgs/cmake/spkg-configure.m4])
m4_sinclude([build/pkgs/coxeter3/spkg-configure.m4])
m4_sinclude([build/pkgs/curl/spkg-configure.m4])
m4_sinclude([build/pkgs/distlib/spkg-configure.m4])
m4_sinclude([build/pkgs/ecl/spkg-configure.m4])
m4_sinclude([build/pkgs/eclib/spkg-configure.m4])
m4_sinclude([build/pkgs/ecm/spkg-configure.m4])
m4_sinclude([build/pkgs/fflas_ffpack/spkg-configure.m4])
m4_sinclude([build/pkgs/ffmpeg/spkg-configure.m4])
m4_sinclude([build/pkgs/filelock/spkg-configure.m4])
m4_sinclude([build/pkgs/flint/spkg-configure.m4])
m4_sinclude([build/pkgs/flintqs/spkg-configure.m4])
m4_sinclude([build/pkgs/fplll/spkg-configure.m4])
m4_sinclude([build/pkgs/freetype/spkg-configure.m4])
m4_sinclude([build/pkgs/gc/spkg-configure.m4])
m4_sinclude([build/pkgs/gcc/spkg-configure.m4])
m4_sinclude([build/pkgs/gengetopt/spkg-configure.m4])
m4_sinclude([build/pkgs/gf2x/spkg-configure.m4])
m4_sinclude([build/pkgs/gfan/spkg-configure.m4])
m4_sinclude([build/pkgs/gfortran/spkg-configure.m4])
m4_sinclude([build/pkgs/giac/spkg-configure.m4])
m4_sinclude([build/pkgs/git/spkg-configure.m4])
m4_sinclude([build/pkgs/givaro/spkg-configure.m4])
m4_sinclude([build/pkgs/glpk/spkg-configure.m4])
m4_sinclude([build/pkgs/gmp/spkg-configure.m4])
m4_sinclude([build/pkgs/gp2c/spkg-configure.m4])
m4_sinclude([build/pkgs/graphviz/spkg-configure.m4])
m4_sinclude([build/pkgs/gsl/spkg-configure.m4])
m4_sinclude([build/pkgs/iconv/spkg-configure.m4])
m4_sinclude([build/pkgs/igraph/spkg-configure.m4])
m4_sinclude([build/pkgs/imagemagick/spkg-configure.m4])
m4_sinclude([build/pkgs/iml/spkg-configure.m4])
m4_sinclude([build/pkgs/info/spkg-configure.m4])
m4_sinclude([build/pkgs/isl/spkg-configure.m4])
m4_sinclude([build/pkgs/lcalc/spkg-configure.m4])
m4_sinclude([build/pkgs/libatomic_ops/spkg-configure.m4])
m4_sinclude([build/pkgs/libbraiding/spkg-configure.m4])
m4_sinclude([build/pkgs/libffi/spkg-configure.m4])
m4_sinclude([build/pkgs/libgd/spkg-configure.m4])
m4_sinclude([build/pkgs/libgraphviz/spkg-configure.m4])
m4_sinclude([build/pkgs/libhomfly/spkg-configure.m4])
m4_sinclude([build/pkgs/liblzma/spkg-configure.m4])
m4_sinclude([build/pkgs/libnauty/spkg-configure.m4])
m4_sinclude([build/pkgs/libpng/spkg-configure.m4])
m4_sinclude([build/pkgs/libsemigroups/spkg-configure.m4])
m4_sinclude([build/pkgs/libxml2/spkg-configure.m4])
m4_sinclude([build/pkgs/linbox/spkg-configure.m4])
m4_sinclude([build/pkgs/llvm/spkg-configure.m4])
m4_sinclude([build/pkgs/lrcalc/spkg-configure.m4])
m4_sinclude([build/pkgs/lrslib/spkg-configure.m4])
m4_sinclude([build/pkgs/m4ri/spkg-configure.m4])
m4_sinclude([build/pkgs/m4rie/spkg-configure.m4])
m4_sinclude([build/pkgs/meson/spkg-configure.m4])
m4_sinclude([build/pkgs/mpc/spkg-configure.m4])
m4_sinclude([build/pkgs/mpfi/spkg-configure.m4])
m4_sinclude([build/pkgs/mpfr/spkg-configure.m4])
m4_sinclude([build/pkgs/nauty/spkg-configure.m4])
m4_sinclude([build/pkgs/ncurses/spkg-configure.m4])
m4_sinclude([build/pkgs/ninja_build/spkg-configure.m4])
m4_sinclude([build/pkgs/ntl/spkg-configure.m4])
m4_sinclude([build/pkgs/onetbb/spkg-configure.m4])
m4_sinclude([build/pkgs/openblas/spkg-configure.m4])
m4_sinclude([build/pkgs/openssl/spkg-configure.m4])
m4_sinclude([build/pkgs/palp/spkg-configure.m4])
m4_sinclude([build/pkgs/pandoc/spkg-configure.m4])
m4_sinclude([build/pkgs/pari/spkg-configure.m4])
m4_sinclude([build/pkgs/pari_elldata/spkg-configure.m4])
m4_sinclude([build/pkgs/pari_galdata/spkg-configure.m4])
m4_sinclude([build/pkgs/pari_galpol/spkg-configure.m4])
m4_sinclude([build/pkgs/pari_nftables/spkg-configure.m4])
m4_sinclude([build/pkgs/pari_seadata/spkg-configure.m4])
m4_sinclude([build/pkgs/pari_seadata_small/spkg-configure.m4])
m4_sinclude([build/pkgs/patch/spkg-configure.m4])
m4_sinclude([build/pkgs/pcre/spkg-configure.m4])
m4_sinclude([build/pkgs/pdf2svg/spkg-configure.m4])
m4_sinclude([build/pkgs/perl_cpan_polymake_prereq/spkg-configure.m4])
m4_sinclude([build/pkgs/perl_mongodb/spkg-configure.m4])
m4_sinclude([build/pkgs/perl_term_readline_gnu/spkg-configure.m4])
m4_sinclude([build/pkgs/pkgconf/spkg-configure.m4])
m4_sinclude([build/pkgs/planarity/spkg-configure.m4])
m4_sinclude([build/pkgs/polymake/spkg-configure.m4])
m4_sinclude([build/pkgs/ppl/spkg-configure.m4])
m4_sinclude([build/pkgs/primecount/spkg-configure.m4])
m4_sinclude([build/pkgs/primesieve/spkg-configure.m4])
m4_sinclude([build/pkgs/python3/spkg-configure.m4])
m4_sinclude([build/pkgs/qhull/spkg-configure.m4])
m4_sinclude([build/pkgs/r/spkg-configure.m4])
m4_sinclude([build/pkgs/readline/spkg-configure.m4])
m4_sinclude([build/pkgs/rpy2/spkg-configure.m4])
m4_sinclude([build/pkgs/rw/spkg-configure.m4])
m4_sinclude([build/pkgs/singular/spkg-configure.m4])
m4_sinclude([build/pkgs/sqlite/spkg-configure.m4])
m4_sinclude([build/pkgs/suitesparse/spkg-configure.m4])
m4_sinclude([build/pkgs/symmetrica/spkg-configure.m4])
m4_sinclude([build/pkgs/sympow/spkg-configure.m4])
m4_sinclude([build/pkgs/tachyon/spkg-configure.m4])
m4_sinclude([build/pkgs/texlive/spkg-configure.m4])
m4_sinclude([build/pkgs/toml/spkg-configure.m4])
m4_sinclude([build/pkgs/tox/spkg-configure.m4])
m4_sinclude([build/pkgs/virtualenv/spkg-configure.m4])
m4_sinclude([build/pkgs/xz/spkg-configure.m4])
m4_sinclude([build/pkgs/zeromq/spkg-configure.m4])
m4_sinclude([build/pkgs/zlib/spkg-configure.m4])

AS_VAR_SET_IF([SAGE_ENABLE__prereq], [], [AS_VAR_SET([SAGE_ENABLE__prereq], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_alabaster], [], [AS_VAR_SET([SAGE_ENABLE_alabaster], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_appdirs], [], [AS_VAR_SET([SAGE_ENABLE_appdirs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_appnope], [], [AS_VAR_SET([SAGE_ENABLE_appnope], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_arb], [], [AS_VAR_SET([SAGE_ENABLE_arb], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_argon2_cffi], [], [AS_VAR_SET([SAGE_ENABLE_argon2_cffi], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_asttokens], [], [AS_VAR_SET([SAGE_ENABLE_asttokens], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_attrs], [], [AS_VAR_SET([SAGE_ENABLE_attrs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_babel], [], [AS_VAR_SET([SAGE_ENABLE_babel], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_backcall], [], [AS_VAR_SET([SAGE_ENABLE_backcall], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_backports_zoneinfo], [], [AS_VAR_SET([SAGE_ENABLE_backports_zoneinfo], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_beautifulsoup4], [], [AS_VAR_SET([SAGE_ENABLE_beautifulsoup4], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_beniget], [], [AS_VAR_SET([SAGE_ENABLE_beniget], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_bleach], [], [AS_VAR_SET([SAGE_ENABLE_bleach], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_boost_cropped], [], [AS_VAR_SET([SAGE_ENABLE_boost_cropped], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_brial], [], [AS_VAR_SET([SAGE_ENABLE_brial], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_bzip2], [], [AS_VAR_SET([SAGE_ENABLE_bzip2], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cddlib], [], [AS_VAR_SET([SAGE_ENABLE_cddlib], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_certifi], [], [AS_VAR_SET([SAGE_ENABLE_certifi], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cffi], [], [AS_VAR_SET([SAGE_ENABLE_cffi], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_charset_normalizer], [], [AS_VAR_SET([SAGE_ENABLE_charset_normalizer], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cliquer], [], [AS_VAR_SET([SAGE_ENABLE_cliquer], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cmake], [], [AS_VAR_SET([SAGE_ENABLE_cmake], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_combinatorial_designs], [], [AS_VAR_SET([SAGE_ENABLE_combinatorial_designs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_contourpy], [], [AS_VAR_SET([SAGE_ENABLE_contourpy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_conway_polynomials], [], [AS_VAR_SET([SAGE_ENABLE_conway_polynomials], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cppy], [], [AS_VAR_SET([SAGE_ENABLE_cppy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_curl], [], [AS_VAR_SET([SAGE_ENABLE_curl], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cvxopt], [], [AS_VAR_SET([SAGE_ENABLE_cvxopt], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cycler], [], [AS_VAR_SET([SAGE_ENABLE_cycler], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cypari], [], [AS_VAR_SET([SAGE_ENABLE_cypari], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cysignals], [], [AS_VAR_SET([SAGE_ENABLE_cysignals], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_cython], [], [AS_VAR_SET([SAGE_ENABLE_cython], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_dateutil], [], [AS_VAR_SET([SAGE_ENABLE_dateutil], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_decorator], [], [AS_VAR_SET([SAGE_ENABLE_decorator], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_defusedxml], [], [AS_VAR_SET([SAGE_ENABLE_defusedxml], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_deprecation], [], [AS_VAR_SET([SAGE_ENABLE_deprecation], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_distlib], [], [AS_VAR_SET([SAGE_ENABLE_distlib], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_docutils], [], [AS_VAR_SET([SAGE_ENABLE_docutils], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ecl], [], [AS_VAR_SET([SAGE_ENABLE_ecl], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_eclib], [], [AS_VAR_SET([SAGE_ENABLE_eclib], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ecm], [], [AS_VAR_SET([SAGE_ENABLE_ecm], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_editables], [], [AS_VAR_SET([SAGE_ENABLE_editables], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_elliptic_curves], [], [AS_VAR_SET([SAGE_ENABLE_elliptic_curves], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_entrypoints], [], [AS_VAR_SET([SAGE_ENABLE_entrypoints], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_executing], [], [AS_VAR_SET([SAGE_ENABLE_executing], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_fastjsonschema], [], [AS_VAR_SET([SAGE_ENABLE_fastjsonschema], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_fflas_ffpack], [], [AS_VAR_SET([SAGE_ENABLE_fflas_ffpack], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_filelock], [], [AS_VAR_SET([SAGE_ENABLE_filelock], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_flint], [], [AS_VAR_SET([SAGE_ENABLE_flint], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_flintqs], [], [AS_VAR_SET([SAGE_ENABLE_flintqs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_flit_core], [], [AS_VAR_SET([SAGE_ENABLE_flit_core], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_fonttools], [], [AS_VAR_SET([SAGE_ENABLE_fonttools], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_fplll], [], [AS_VAR_SET([SAGE_ENABLE_fplll], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_fpylll], [], [AS_VAR_SET([SAGE_ENABLE_fpylll], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_freetype], [], [AS_VAR_SET([SAGE_ENABLE_freetype], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_furo], [], [AS_VAR_SET([SAGE_ENABLE_furo], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gap], [], [AS_VAR_SET([SAGE_ENABLE_gap], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gast], [], [AS_VAR_SET([SAGE_ENABLE_gast], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gc], [], [AS_VAR_SET([SAGE_ENABLE_gc], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gcc], [], [AS_VAR_SET([SAGE_ENABLE_gcc], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gengetopt], [], [AS_VAR_SET([SAGE_ENABLE_gengetopt], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gf2x], [], [AS_VAR_SET([SAGE_ENABLE_gf2x], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gfan], [], [AS_VAR_SET([SAGE_ENABLE_gfan], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gfortran], [], [AS_VAR_SET([SAGE_ENABLE_gfortran], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_giac], [], [AS_VAR_SET([SAGE_ENABLE_giac], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_givaro], [], [AS_VAR_SET([SAGE_ENABLE_givaro], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_glpk], [], [AS_VAR_SET([SAGE_ENABLE_glpk], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gmp], [], [AS_VAR_SET([SAGE_ENABLE_gmp], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gmpy2], [], [AS_VAR_SET([SAGE_ENABLE_gmpy2], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gnulib], [], [AS_VAR_SET([SAGE_ENABLE_gnulib], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_graphs], [], [AS_VAR_SET([SAGE_ENABLE_graphs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_gsl], [], [AS_VAR_SET([SAGE_ENABLE_gsl], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_hatch_fancy_pypi_readme], [], [AS_VAR_SET([SAGE_ENABLE_hatch_fancy_pypi_readme], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_hatch_nodejs_version], [], [AS_VAR_SET([SAGE_ENABLE_hatch_nodejs_version], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_hatch_vcs], [], [AS_VAR_SET([SAGE_ENABLE_hatch_vcs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_hatchling], [], [AS_VAR_SET([SAGE_ENABLE_hatchling], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_html5lib], [], [AS_VAR_SET([SAGE_ENABLE_html5lib], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_iconv], [], [AS_VAR_SET([SAGE_ENABLE_iconv], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_idna], [], [AS_VAR_SET([SAGE_ENABLE_idna], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_imagesize], [], [AS_VAR_SET([SAGE_ENABLE_imagesize], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_iml], [], [AS_VAR_SET([SAGE_ENABLE_iml], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_importlib_metadata], [], [AS_VAR_SET([SAGE_ENABLE_importlib_metadata], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_importlib_resources], [], [AS_VAR_SET([SAGE_ENABLE_importlib_resources], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ipykernel], [], [AS_VAR_SET([SAGE_ENABLE_ipykernel], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ipython], [], [AS_VAR_SET([SAGE_ENABLE_ipython], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ipython_genutils], [], [AS_VAR_SET([SAGE_ENABLE_ipython_genutils], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ipywidgets], [], [AS_VAR_SET([SAGE_ENABLE_ipywidgets], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jedi], [], [AS_VAR_SET([SAGE_ENABLE_jedi], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jinja2], [], [AS_VAR_SET([SAGE_ENABLE_jinja2], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jmol], [], [AS_VAR_SET([SAGE_ENABLE_jmol], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jsonschema], [], [AS_VAR_SET([SAGE_ENABLE_jsonschema], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jupyter_client], [], [AS_VAR_SET([SAGE_ENABLE_jupyter_client], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jupyter_core], [], [AS_VAR_SET([SAGE_ENABLE_jupyter_core], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jupyter_jsmol], [], [AS_VAR_SET([SAGE_ENABLE_jupyter_jsmol], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jupyter_packaging], [], [AS_VAR_SET([SAGE_ENABLE_jupyter_packaging], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jupyter_sphinx], [], [AS_VAR_SET([SAGE_ENABLE_jupyter_sphinx], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jupyterlab_pygments], [], [AS_VAR_SET([SAGE_ENABLE_jupyterlab_pygments], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_jupyterlab_widgets], [], [AS_VAR_SET([SAGE_ENABLE_jupyterlab_widgets], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_kiwisolver], [], [AS_VAR_SET([SAGE_ENABLE_kiwisolver], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_lcalc], [], [AS_VAR_SET([SAGE_ENABLE_lcalc], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_libatomic_ops], [], [AS_VAR_SET([SAGE_ENABLE_libatomic_ops], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_libbraiding], [], [AS_VAR_SET([SAGE_ENABLE_libbraiding], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_libffi], [], [AS_VAR_SET([SAGE_ENABLE_libffi], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_libgd], [], [AS_VAR_SET([SAGE_ENABLE_libgd], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_libhomfly], [], [AS_VAR_SET([SAGE_ENABLE_libhomfly], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_liblzma], [], [AS_VAR_SET([SAGE_ENABLE_liblzma], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_libpng], [], [AS_VAR_SET([SAGE_ENABLE_libpng], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_linbox], [], [AS_VAR_SET([SAGE_ENABLE_linbox], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_lrcalc], [], [AS_VAR_SET([SAGE_ENABLE_lrcalc], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_lrcalc_python], [], [AS_VAR_SET([SAGE_ENABLE_lrcalc_python], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_m4ri], [], [AS_VAR_SET([SAGE_ENABLE_m4ri], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_m4rie], [], [AS_VAR_SET([SAGE_ENABLE_m4rie], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_markupsafe], [], [AS_VAR_SET([SAGE_ENABLE_markupsafe], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_mathjax], [], [AS_VAR_SET([SAGE_ENABLE_mathjax], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_matplotlib], [], [AS_VAR_SET([SAGE_ENABLE_matplotlib], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_matplotlib_inline], [], [AS_VAR_SET([SAGE_ENABLE_matplotlib_inline], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_maxima], [], [AS_VAR_SET([SAGE_ENABLE_maxima], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_memory_allocator], [], [AS_VAR_SET([SAGE_ENABLE_memory_allocator], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_meson], [], [AS_VAR_SET([SAGE_ENABLE_meson], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_meson_python], [], [AS_VAR_SET([SAGE_ENABLE_meson_python], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_mistune], [], [AS_VAR_SET([SAGE_ENABLE_mistune], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_mpc], [], [AS_VAR_SET([SAGE_ENABLE_mpc], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_mpfi], [], [AS_VAR_SET([SAGE_ENABLE_mpfi], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_mpfr], [], [AS_VAR_SET([SAGE_ENABLE_mpfr], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_mpmath], [], [AS_VAR_SET([SAGE_ENABLE_mpmath], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_nauty], [], [AS_VAR_SET([SAGE_ENABLE_nauty], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_nbclient], [], [AS_VAR_SET([SAGE_ENABLE_nbclient], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_nbconvert], [], [AS_VAR_SET([SAGE_ENABLE_nbconvert], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_nbformat], [], [AS_VAR_SET([SAGE_ENABLE_nbformat], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ncurses], [], [AS_VAR_SET([SAGE_ENABLE_ncurses], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_nest_asyncio], [], [AS_VAR_SET([SAGE_ENABLE_nest_asyncio], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_networkx], [], [AS_VAR_SET([SAGE_ENABLE_networkx], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ninja_build], [], [AS_VAR_SET([SAGE_ENABLE_ninja_build], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_notebook], [], [AS_VAR_SET([SAGE_ENABLE_notebook], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ntl], [], [AS_VAR_SET([SAGE_ENABLE_ntl], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_numpy], [], [AS_VAR_SET([SAGE_ENABLE_numpy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_openblas], [], [AS_VAR_SET([SAGE_ENABLE_openblas], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_openssl], [], [AS_VAR_SET([SAGE_ENABLE_openssl], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_packaging], [], [AS_VAR_SET([SAGE_ENABLE_packaging], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_palp], [], [AS_VAR_SET([SAGE_ENABLE_palp], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pandocfilters], [], [AS_VAR_SET([SAGE_ENABLE_pandocfilters], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pari], [], [AS_VAR_SET([SAGE_ENABLE_pari], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pari_galdata], [], [AS_VAR_SET([SAGE_ENABLE_pari_galdata], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pari_seadata_small], [], [AS_VAR_SET([SAGE_ENABLE_pari_seadata_small], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_parso], [], [AS_VAR_SET([SAGE_ENABLE_parso], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_patch], [], [AS_VAR_SET([SAGE_ENABLE_patch], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_patchelf], [], [AS_VAR_SET([SAGE_ENABLE_patchelf], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pathspec], [], [AS_VAR_SET([SAGE_ENABLE_pathspec], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pcre], [], [AS_VAR_SET([SAGE_ENABLE_pcre], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pexpect], [], [AS_VAR_SET([SAGE_ENABLE_pexpect], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pickleshare], [], [AS_VAR_SET([SAGE_ENABLE_pickleshare], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pillow], [], [AS_VAR_SET([SAGE_ENABLE_pillow], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pip], [], [AS_VAR_SET([SAGE_ENABLE_pip], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pkgconf], [], [AS_VAR_SET([SAGE_ENABLE_pkgconf], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pkgconfig], [], [AS_VAR_SET([SAGE_ENABLE_pkgconfig], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_planarity], [], [AS_VAR_SET([SAGE_ENABLE_planarity], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_platformdirs], [], [AS_VAR_SET([SAGE_ENABLE_platformdirs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pluggy], [], [AS_VAR_SET([SAGE_ENABLE_pluggy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ply], [], [AS_VAR_SET([SAGE_ENABLE_ply], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_poetry_core], [], [AS_VAR_SET([SAGE_ENABLE_poetry_core], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_polytopes_db], [], [AS_VAR_SET([SAGE_ENABLE_polytopes_db], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ppl], [], [AS_VAR_SET([SAGE_ENABLE_ppl], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pplpy], [], [AS_VAR_SET([SAGE_ENABLE_pplpy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pplpy_doc], [], [AS_VAR_SET([SAGE_ENABLE_pplpy_doc], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_primecount], [], [AS_VAR_SET([SAGE_ENABLE_primecount], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_primecountpy], [], [AS_VAR_SET([SAGE_ENABLE_primecountpy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_primesieve], [], [AS_VAR_SET([SAGE_ENABLE_primesieve], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_prometheus_client], [], [AS_VAR_SET([SAGE_ENABLE_prometheus_client], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_prompt_toolkit], [], [AS_VAR_SET([SAGE_ENABLE_prompt_toolkit], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_ptyprocess], [], [AS_VAR_SET([SAGE_ENABLE_ptyprocess], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pure_eval], [], [AS_VAR_SET([SAGE_ENABLE_pure_eval], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_py], [], [AS_VAR_SET([SAGE_ENABLE_py], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pybind11], [], [AS_VAR_SET([SAGE_ENABLE_pybind11], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pycparser], [], [AS_VAR_SET([SAGE_ENABLE_pycparser], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pycygwin], [], [AS_VAR_SET([SAGE_ENABLE_pycygwin], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pygments], [], [AS_VAR_SET([SAGE_ENABLE_pygments], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pyparsing], [], [AS_VAR_SET([SAGE_ENABLE_pyparsing], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pyproject_metadata], [], [AS_VAR_SET([SAGE_ENABLE_pyproject_metadata], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pyrsistent], [], [AS_VAR_SET([SAGE_ENABLE_pyrsistent], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_python3], [], [AS_VAR_SET([SAGE_ENABLE_python3], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pythran], [], [AS_VAR_SET([SAGE_ENABLE_pythran], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pytz], [], [AS_VAR_SET([SAGE_ENABLE_pytz], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pytz_deprecation_shim], [], [AS_VAR_SET([SAGE_ENABLE_pytz_deprecation_shim], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_pyzmq], [], [AS_VAR_SET([SAGE_ENABLE_pyzmq], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_qhull], [], [AS_VAR_SET([SAGE_ENABLE_qhull], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_readline], [], [AS_VAR_SET([SAGE_ENABLE_readline], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_requests], [], [AS_VAR_SET([SAGE_ENABLE_requests], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_rpy2], [], [AS_VAR_SET([SAGE_ENABLE_rpy2], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_rw], [], [AS_VAR_SET([SAGE_ENABLE_rw], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sage_conf], [], [AS_VAR_SET([SAGE_ENABLE_sage_conf], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sage_docbuild], [], [AS_VAR_SET([SAGE_ENABLE_sage_docbuild], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sage_setup], [], [AS_VAR_SET([SAGE_ENABLE_sage_setup], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sagelib], [], [AS_VAR_SET([SAGE_ENABLE_sagelib], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sagemath_doc_html], [], [AS_VAR_SET([SAGE_ENABLE_sagemath_doc_html], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sagenb_export], [], [AS_VAR_SET([SAGE_ENABLE_sagenb_export], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sagetex], [], [AS_VAR_SET([SAGE_ENABLE_sagetex], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_scipy], [], [AS_VAR_SET([SAGE_ENABLE_scipy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_send2trash], [], [AS_VAR_SET([SAGE_ENABLE_send2trash], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_setuptools], [], [AS_VAR_SET([SAGE_ENABLE_setuptools], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_setuptools_scm], [], [AS_VAR_SET([SAGE_ENABLE_setuptools_scm], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_setuptools_scm_git_archive], [], [AS_VAR_SET([SAGE_ENABLE_setuptools_scm_git_archive], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_setuptools_wheel], [], [AS_VAR_SET([SAGE_ENABLE_setuptools_wheel], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_simplegeneric], [], [AS_VAR_SET([SAGE_ENABLE_simplegeneric], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_singular], [], [AS_VAR_SET([SAGE_ENABLE_singular], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_six], [], [AS_VAR_SET([SAGE_ENABLE_six], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_snowballstemmer], [], [AS_VAR_SET([SAGE_ENABLE_snowballstemmer], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_soupsieve], [], [AS_VAR_SET([SAGE_ENABLE_soupsieve], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinx], [], [AS_VAR_SET([SAGE_ENABLE_sphinx], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinx_basic_ng], [], [AS_VAR_SET([SAGE_ENABLE_sphinx_basic_ng], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinxcontrib_applehelp], [], [AS_VAR_SET([SAGE_ENABLE_sphinxcontrib_applehelp], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinxcontrib_devhelp], [], [AS_VAR_SET([SAGE_ENABLE_sphinxcontrib_devhelp], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinxcontrib_htmlhelp], [], [AS_VAR_SET([SAGE_ENABLE_sphinxcontrib_htmlhelp], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinxcontrib_jsmath], [], [AS_VAR_SET([SAGE_ENABLE_sphinxcontrib_jsmath], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinxcontrib_qthelp], [], [AS_VAR_SET([SAGE_ENABLE_sphinxcontrib_qthelp], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinxcontrib_serializinghtml], [], [AS_VAR_SET([SAGE_ENABLE_sphinxcontrib_serializinghtml], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sphinxcontrib_websupport], [], [AS_VAR_SET([SAGE_ENABLE_sphinxcontrib_websupport], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sqlite], [], [AS_VAR_SET([SAGE_ENABLE_sqlite], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_stack_data], [], [AS_VAR_SET([SAGE_ENABLE_stack_data], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_suitesparse], [], [AS_VAR_SET([SAGE_ENABLE_suitesparse], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_symmetrica], [], [AS_VAR_SET([SAGE_ENABLE_symmetrica], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sympow], [], [AS_VAR_SET([SAGE_ENABLE_sympow], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_sympy], [], [AS_VAR_SET([SAGE_ENABLE_sympy], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tachyon], [], [AS_VAR_SET([SAGE_ENABLE_tachyon], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_terminado], [], [AS_VAR_SET([SAGE_ENABLE_terminado], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_threejs], [], [AS_VAR_SET([SAGE_ENABLE_threejs], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tinycss2], [], [AS_VAR_SET([SAGE_ENABLE_tinycss2], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_toml], [], [AS_VAR_SET([SAGE_ENABLE_toml], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tomli], [], [AS_VAR_SET([SAGE_ENABLE_tomli], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tomlkit], [], [AS_VAR_SET([SAGE_ENABLE_tomlkit], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tornado], [], [AS_VAR_SET([SAGE_ENABLE_tornado], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tox], [], [AS_VAR_SET([SAGE_ENABLE_tox], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_traitlets], [], [AS_VAR_SET([SAGE_ENABLE_traitlets], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_typing_extensions], [], [AS_VAR_SET([SAGE_ENABLE_typing_extensions], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tzdata], [], [AS_VAR_SET([SAGE_ENABLE_tzdata], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_tzlocal], [], [AS_VAR_SET([SAGE_ENABLE_tzlocal], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_urllib3], [], [AS_VAR_SET([SAGE_ENABLE_urllib3], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_vcversioner], [], [AS_VAR_SET([SAGE_ENABLE_vcversioner], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_virtualenv], [], [AS_VAR_SET([SAGE_ENABLE_virtualenv], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_wcwidth], [], [AS_VAR_SET([SAGE_ENABLE_wcwidth], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_webencodings], [], [AS_VAR_SET([SAGE_ENABLE_webencodings], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_wheel], [], [AS_VAR_SET([SAGE_ENABLE_wheel], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_widgetsnbextension], [], [AS_VAR_SET([SAGE_ENABLE_widgetsnbextension], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_xz], [], [AS_VAR_SET([SAGE_ENABLE_xz], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_zeromq], [], [AS_VAR_SET([SAGE_ENABLE_zeromq], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_zipp], [], [AS_VAR_SET([SAGE_ENABLE_zipp], [yes])])
AS_VAR_SET_IF([SAGE_ENABLE_zlib], [], [AS_VAR_SET([SAGE_ENABLE_zlib], [yes])])
AC_SUBST(SAGE_ENABLE_4ti2, [if_installed])
SAGE_SPKG_ENABLE([4ti2], [optional], [4ti2: Algebraic, geometric and combinatorial problems on linear spaces])
AC_SUBST(SAGE_ENABLE_antic, [if_installed])
SAGE_SPKG_ENABLE([antic], [optional], [antic: Algebraic Number Theory In C])
AC_SUBST(SAGE_ENABLE_awali, [if_installed])
SAGE_SPKG_ENABLE([awali], [experimental], [awali: Computation of/with finite state machines])
AC_SUBST(SAGE_ENABLE_barvinok, [if_installed])
SAGE_SPKG_ENABLE([barvinok], [experimental], [barvinok: Projections of integer point sets of parametric polytopes])
AC_SUBST(SAGE_ENABLE_benzene, [if_installed])
SAGE_SPKG_ENABLE([benzene], [optional], [benzene: Generate fusenes and benzenoids with a given number of faces])
AC_SUBST(SAGE_ENABLE_bliss, [if_installed])
SAGE_SPKG_ENABLE([bliss], [optional], [bliss: Computing automorphism groups and canonical forms of graphs])
AC_SUBST(SAGE_ENABLE_buckygen, [if_installed])
SAGE_SPKG_ENABLE([buckygen], [optional], [buckygen: Efficient generation of nonisomorphic fullerenes])
AC_SUBST(SAGE_ENABLE_cbc, [if_installed])
SAGE_SPKG_ENABLE([cbc], [optional], [cbc: COIN-OR branch and cut solver for mixed-integer programs])
AC_SUBST(SAGE_ENABLE_ccache, [if_installed])
SAGE_SPKG_ENABLE([ccache], [optional], [ccache: A compiler cache])
AC_SUBST(SAGE_ENABLE_cocoalib, [if_installed])
SAGE_SPKG_ENABLE([cocoalib], [experimental], [cocoalib: Computations in commutative algebra])
AC_SUBST(SAGE_ENABLE_coxeter3, [if_installed])
SAGE_SPKG_ENABLE([coxeter3], [optional], [coxeter3: Library for Coxeter groups, Bruhat ordering, Kazhdan-Lusztig polynomials])
AC_SUBST(SAGE_ENABLE_cryptominisat, [if_installed])
SAGE_SPKG_ENABLE([cryptominisat], [optional], [cryptominisat: A SAT solver])
AC_SUBST(SAGE_ENABLE_csdp, [if_installed])
SAGE_SPKG_ENABLE([csdp], [optional], [csdp: Solver for semidefinite programs])
AC_SUBST(SAGE_ENABLE_cunningham_tables, [if_installed])
SAGE_SPKG_ENABLE([cunningham_tables], [optional], [cunningham\_tables: List of the prime numbers occuring in the Cunningham table])
AC_SUBST(SAGE_ENABLE_cylp, [if_installed])
SAGE_SPKG_ENABLE([cylp], [optional], [cylp: A Python interface for CLP, CBC, and CGL])
AC_SUBST(SAGE_ENABLE_d3js, [if_installed])
SAGE_SPKG_ENABLE([d3js], [optional], [d3js: JavaScript library for manipulating documents based on data])
AC_SUBST(SAGE_ENABLE_database_cremona_ellcurve, [if_installed])
SAGE_SPKG_ENABLE([database_cremona_ellcurve], [optional], [database_cremona_ellcurve: Database of elliptic curves])
AC_SUBST(SAGE_ENABLE_database_cubic_hecke, [if_installed])
SAGE_SPKG_ENABLE([database_cubic_hecke], [optional], [database_cubic_hecke: Ivan Marin's representations of the cubic Hecke algebra])
AC_SUBST(SAGE_ENABLE_database_jones_numfield, [if_installed])
SAGE_SPKG_ENABLE([database_jones_numfield], [optional], [database_jones_numfield: Table of number fields])
AC_SUBST(SAGE_ENABLE_database_knotinfo, [if_installed])
SAGE_SPKG_ENABLE([database_knotinfo], [optional], [database_knotinfo: Content of the KnotInfo and LinkInfo databases as lists of dictionaries])
AC_SUBST(SAGE_ENABLE_database_kohel, [if_installed])
SAGE_SPKG_ENABLE([database_kohel], [optional], [database_kohel: Database of modular and Hilbert polynomials])
AC_SUBST(SAGE_ENABLE_database_mutation_class, [if_installed])
SAGE_SPKG_ENABLE([database_mutation_class], [optional], [database_mutation_class: Database of exceptional mutation classes of quivers])
AC_SUBST(SAGE_ENABLE_database_odlyzko_zeta, [if_installed])
SAGE_SPKG_ENABLE([database_odlyzko_zeta], [optional], [database_odlyzko_zeta: Table of zeros of the Riemann zeta function])
AC_SUBST(SAGE_ENABLE_database_stein_watkins, [if_installed])
SAGE_SPKG_ENABLE([database_stein_watkins], [optional], [database_stein_watkins: Database of elliptic curves (full version)])
AC_SUBST(SAGE_ENABLE_database_stein_watkins_mini, [if_installed])
SAGE_SPKG_ENABLE([database_stein_watkins_mini], [optional], [database_stein_watkins_mini: Database of elliptic curves (small version)])
AC_SUBST(SAGE_ENABLE_database_symbolic_data, [if_installed])
SAGE_SPKG_ENABLE([database_symbolic_data], [optional], [database_symbolic_data: Database from the SymbolicData project])
AC_SUBST(SAGE_ENABLE_debugpy, [if_installed])
SAGE_SPKG_ENABLE([debugpy], [optional], [debugpy: An implementation of the Debug Adapter Protocol for Python])
AC_SUBST(SAGE_ENABLE_deformation, [if_installed])
SAGE_SPKG_ENABLE([deformation], [experimental], [deformation: Count points on hypersurfaces using the deformation method])
AC_SUBST(SAGE_ENABLE_dot2tex, [if_installed])
SAGE_SPKG_ENABLE([dot2tex], [optional], [dot2tex: Create PGF/TikZ commands from Graphviz output])
AC_SUBST(SAGE_ENABLE_dsdp, [if_installed])
SAGE_SPKG_ENABLE([dsdp], [optional], [dsdp: Semidefinite programming solver])
AC_SUBST(SAGE_ENABLE_e_antic, [if_installed])
SAGE_SPKG_ENABLE([e_antic], [optional], [e_antic: Real embedded number fields])
AC_SUBST(SAGE_ENABLE_ffmpeg, [if_installed])
AC_SUBST(SAGE_ENABLE_fricas, [if_installed])
SAGE_SPKG_ENABLE([fricas], [optional], [fricas: A general purpose computer algebra system])
AC_SUBST(SAGE_ENABLE_frobby, [if_installed])
SAGE_SPKG_ENABLE([frobby], [optional], [frobby: Computations on monomial ideals])
AC_SUBST(SAGE_ENABLE_gambit, [if_installed])
SAGE_SPKG_ENABLE([gambit], [experimental], [gambit: Computations on finite, noncooperative games])
AC_SUBST(SAGE_ENABLE_gap3, [if_installed])
SAGE_SPKG_ENABLE([gap3], [experimental], [gap3: A minimal distribution of GAP 3 containing packages that have no equivalent in GAP 4])
AC_SUBST(SAGE_ENABLE_gap_jupyter, [if_installed])
SAGE_SPKG_ENABLE([gap_jupyter], [optional], [gap_jupyter: Jupyter kernel for GAP])
AC_SUBST(SAGE_ENABLE_gap_packages, [if_installed])
SAGE_SPKG_ENABLE([gap_packages], [optional], [gap_packages: A collection of GAP packages])
AC_SUBST(SAGE_ENABLE_gdb, [if_installed])
SAGE_SPKG_ENABLE([gdb], [experimental], [gdb: The GNU Project debugger])
AC_SUBST(SAGE_ENABLE_git, [if_installed])
AC_SUBST(SAGE_ENABLE_github_cli, [if_installed])
AC_SUBST(SAGE_ENABLE_glucose, [if_installed])
SAGE_SPKG_ENABLE([glucose], [optional], [glucose: A SAT solver])
AC_SUBST(SAGE_ENABLE_gp2c, [if_installed])
SAGE_SPKG_ENABLE([gp2c], [optional], [gp2c: A compiler for translating GP routines to C])
AC_SUBST(SAGE_ENABLE_graphviz, [if_installed])
AC_SUBST(SAGE_ENABLE_igraph, [if_installed])
SAGE_SPKG_ENABLE([igraph], [optional], [igraph: A library for creating and manipulating graphs])
AC_SUBST(SAGE_ENABLE_imagemagick, [if_installed])
AC_SUBST(SAGE_ENABLE_info, [if_installed])
SAGE_SPKG_ENABLE([info], [optional], [info: stand-alone Info documentation reader])
AC_SUBST(SAGE_ENABLE_isl, [if_installed])
SAGE_SPKG_ENABLE([isl], [optional], [isl: Sets and relations of integer points bounded by affine constraints])
AC_SUBST(SAGE_ENABLE_jupymake, [if_installed])
SAGE_SPKG_ENABLE([jupymake], [optional], [jupymake: A Python wrapper for the polymake shell])
AC_SUBST(SAGE_ENABLE_kenzo, [if_installed])
SAGE_SPKG_ENABLE([kenzo], [optional], [kenzo: Construct topological spaces and compute homology groups])
AC_SUBST(SAGE_ENABLE_kissat, [if_installed])
SAGE_SPKG_ENABLE([kissat], [optional], [kissat: SAT solver])
AC_SUBST(SAGE_ENABLE_latte_int, [if_installed])
SAGE_SPKG_ENABLE([latte_int], [optional], [latte_int: Count lattice points, compute volumes, and integrate over convex polytopes])
AC_SUBST(SAGE_ENABLE_libgraphviz, [if_installed])
AC_SUBST(SAGE_ENABLE_libnauty, [if_installed])
SAGE_SPKG_ENABLE([libnauty], [optional], [libnauty: Find automorphism groups of graphs, generate non-isomorphic graphs (callable library)])
AC_SUBST(SAGE_ENABLE_libogg, [if_installed])
SAGE_SPKG_ENABLE([libogg], [optional], [libogg: Library for the Ogg multimedia container format])
AC_SUBST(SAGE_ENABLE_libsemigroups, [if_installed])
SAGE_SPKG_ENABLE([libsemigroups], [optional], [libsemigroups: Library for semigroups and monoids])
AC_SUBST(SAGE_ENABLE_libtheora, [if_installed])
SAGE_SPKG_ENABLE([libtheora], [experimental], [libtheora: Library for the Theora video codec])
AC_SUBST(SAGE_ENABLE_libxml2, [if_installed])
AC_SUBST(SAGE_ENABLE_lidia, [if_installed])
SAGE_SPKG_ENABLE([lidia], [optional], [lidia: A library for computational number theory])
AC_SUBST(SAGE_ENABLE_lie, [if_installed])
SAGE_SPKG_ENABLE([lie], [experimental], [lie: Library for the representation theory of complex semisimple Lie groups and algebras])
AC_SUBST(SAGE_ENABLE_llvm, [if_installed])
AC_SUBST(SAGE_ENABLE_lrslib, [if_installed])
SAGE_SPKG_ENABLE([lrslib], [optional], [lrslib: Reverse search algorithm for vertex enumeration and convex hull problems])
AC_SUBST(SAGE_ENABLE_mathics, [if_installed])
SAGE_SPKG_ENABLE([mathics], [optional], [mathics: A general-purpose computer algebra system])
AC_SUBST(SAGE_ENABLE_mathics_scanner, [if_installed])
SAGE_SPKG_ENABLE([mathics_scanner], [optional], [mathics_scanner: Character Tables and Tokenizer for Mathics and the Wolfram Language.])
AC_SUBST(SAGE_ENABLE_mcqd, [if_installed])
SAGE_SPKG_ENABLE([mcqd], [optional], [mcqd: An exact algorithm for finding a maximum clique in an undirected graph])
AC_SUBST(SAGE_ENABLE_meataxe, [if_installed])
SAGE_SPKG_ENABLE([meataxe], [optional], [meataxe: Library for computing with modular representations])
AC_SUBST(SAGE_ENABLE_modular_decomposition, [if_installed])
SAGE_SPKG_ENABLE([modular_decomposition], [experimental], [modular_decomposition: A modular decomposition algorithm])
AC_SUBST(SAGE_ENABLE_modular_resolution, [if_installed])
SAGE_SPKG_ENABLE([modular_resolution], [optional], [p_group_cohomology: Modular cohomology rings of finite groups])
AC_SUBST(SAGE_ENABLE_mpfrcx, [if_installed])
SAGE_SPKG_ENABLE([mpfrcx], [optional], [mpfrcx: Arithmetic of univariate polynomials over arbitrary precision real or complex numbers])
AC_SUBST(SAGE_ENABLE_msolve, [if_installed])
SAGE_SPKG_ENABLE([msolve], [optional], [msolve: Multivariate polynomial system solver])
AC_SUBST(SAGE_ENABLE_nodejs, [if_installed])
SAGE_SPKG_ENABLE([nodejs], [optional], [nodejs: A JavaScript runtime built on Chrome's V8 JavaScript engine])
AC_SUBST(SAGE_ENABLE_normaliz, [if_installed])
SAGE_SPKG_ENABLE([normaliz], [optional], [normaliz: Computations in affine monoids, vector configurations, lattice polytopes, and rational cones])
AC_SUBST(SAGE_ENABLE_notedown, [if_installed])
SAGE_SPKG_ENABLE([notedown], [optional], [notedown: Create IPython notebooks from markdown])
AC_SUBST(SAGE_ENABLE_onetbb, [if_installed])
SAGE_SPKG_ENABLE([onetbb], [optional], [onetbb: oneAPI Threading Building Blocks])
AC_SUBST(SAGE_ENABLE_p_group_cohomology, [if_installed])
SAGE_SPKG_ENABLE([p_group_cohomology], [optional], [p_group_cohomology: Modular cohomology rings of finite groups])
AC_SUBST(SAGE_ENABLE_palettable, [if_installed])
SAGE_SPKG_ENABLE([palettable], [optional], [palettable: Color palettes for Python])
AC_SUBST(SAGE_ENABLE_pandoc, [if_installed])
AC_SUBST(SAGE_ENABLE_pandoc_attributes, [if_installed])
SAGE_SPKG_ENABLE([pandoc_attributes], [optional], [pandoc_attributes: A parser and generator for pandoc block attributes])
AC_SUBST(SAGE_ENABLE_papilo, [if_installed])
SAGE_SPKG_ENABLE([papilo], [optional], [papilo: Parallel presolve for integer and linear optimization])
AC_SUBST(SAGE_ENABLE_pari_elldata, [if_installed])
SAGE_SPKG_ENABLE([pari_elldata], [optional], [pari_elldata: PARI data package for elliptic curves])
AC_SUBST(SAGE_ENABLE_pari_galpol, [if_installed])
SAGE_SPKG_ENABLE([pari_galpol], [optional], [pari_galpol: PARI data package for polynomials defining Galois extensions of the rationals])
AC_SUBST(SAGE_ENABLE_pari_jupyter, [if_installed])
SAGE_SPKG_ENABLE([pari_jupyter], [optional], [pari_jupyter: A Jupyter kernel for PARI/GP])
AC_SUBST(SAGE_ENABLE_pari_nftables, [if_installed])
SAGE_SPKG_ENABLE([pari_nftables], [optional], [pari_nftables: PARI data package for number fields])
AC_SUBST(SAGE_ENABLE_pari_seadata, [if_installed])
SAGE_SPKG_ENABLE([pari_seadata], [optional], [pari_seadata: PARI data package needed by ellap for large primes (full version)])
AC_SUBST(SAGE_ENABLE_pdf2svg, [if_installed])
AC_SUBST(SAGE_ENABLE_perl_cpan_polymake_prereq, [if_installed])
AC_SUBST(SAGE_ENABLE_perl_mongodb, [if_installed])
AC_SUBST(SAGE_ENABLE_perl_term_readline_gnu, [if_installed])
SAGE_SPKG_ENABLE([perl_term_readline_gnu], [optional], [perl_term_readline_gnu: Perl extension for the GNU Readline/History libraries])
AC_SUBST(SAGE_ENABLE_pint, [if_installed])
SAGE_SPKG_ENABLE([pint], [optional], [pint: Physical quantities module])
AC_SUBST(SAGE_ENABLE_plantri, [if_installed])
SAGE_SPKG_ENABLE([plantri], [optional], [plantri: Generate non-isomorphic sphere-embdedded graphs])
AC_SUBST(SAGE_ENABLE_polylib, [if_installed])
SAGE_SPKG_ENABLE([polylib], [experimental], [polylib: Operations on unions of polyhedra])
AC_SUBST(SAGE_ENABLE_polymake, [if_installed])
SAGE_SPKG_ENABLE([polymake], [optional], [polymake: Computations with polyhedra, fans, simplicial complexes, matroids, graphs, tropical hypersurfaces])
AC_SUBST(SAGE_ENABLE_polytopes_db_4d, [if_installed])
SAGE_SPKG_ENABLE([polytopes_db_4d], [optional], [polytopes_db_4d: Database of 4-dimensional reflexive polytopes])
AC_SUBST(SAGE_ENABLE_pycosat, [if_installed])
SAGE_SPKG_ENABLE([pycosat], [optional], [pycosat: SAT solver picosat with Python bindings])
AC_SUBST(SAGE_ENABLE_pycryptosat, [if_installed])
SAGE_SPKG_ENABLE([pycryptosat], [optional], [pycryptosat: Python module of cryptominisat])
AC_SUBST(SAGE_ENABLE_pynormaliz, [if_installed])
SAGE_SPKG_ENABLE([pynormaliz], [optional], [pynormaliz: Python bindings for the normaliz library])
AC_SUBST(SAGE_ENABLE_pyscipopt, [if_installed])
SAGE_SPKG_ENABLE([pyscipopt], [optional], [pyscipopt: Python interface and modeling environment for SCIP])
AC_SUBST(SAGE_ENABLE_pysingular, [if_installed])
SAGE_SPKG_ENABLE([pysingular], [optional], [pysingular: A basic Python interface to Singular])
AC_SUBST(SAGE_ENABLE_python_igraph, [if_installed])
SAGE_SPKG_ENABLE([python_igraph], [optional], [python_igraph: Python bindings for igraph])
AC_SUBST(SAGE_ENABLE_qepcad, [if_installed])
SAGE_SPKG_ENABLE([qepcad], [experimental], [qepcad: Quantifier elimination by partial cylindrical algebraic decomposition])
AC_SUBST(SAGE_ENABLE_r, [if_installed])
AC_SUBST(SAGE_ENABLE_r_jupyter, [if_installed])
SAGE_SPKG_ENABLE([r_jupyter], [experimental], [r_jupyter: Jupyter kernel for R])
AC_SUBST(SAGE_ENABLE_rst2ipynb, [if_installed])
SAGE_SPKG_ENABLE([rst2ipynb], [optional], [rst2ipynb: Convert reStructuredText files to Jupyter notebooks])
AC_SUBST(SAGE_ENABLE_rubiks, [if_installed])
SAGE_SPKG_ENABLE([rubiks], [optional], [rubiks: Programs for Rubik's cube])
AC_SUBST(SAGE_ENABLE_saclib, [if_installed])
SAGE_SPKG_ENABLE([saclib], [optional], [saclib: Computations with real algebraic numbers])
AC_SUBST(SAGE_ENABLE_sage_numerical_backends_coin, [if_installed])
SAGE_SPKG_ENABLE([sage_numerical_backends_coin], [optional], [sage_numerical_backends_coin: COIN-OR backend for Sage MixedIntegerLinearProgram])
AC_SUBST(SAGE_ENABLE_sage_numerical_backends_cplex, [if_installed])
SAGE_SPKG_ENABLE([sage_numerical_backends_cplex], [optional], [sage_numerical_backends_cplex: Cplex backend for Sage MixedIntegerLinearProgram])
AC_SUBST(SAGE_ENABLE_sage_numerical_backends_gurobi, [if_installed])
SAGE_SPKG_ENABLE([sage_numerical_backends_gurobi], [optional], [sage_numerical_backends_gurobi: Gurobi backend for Sage MixedIntegerLinearProgram])
AC_SUBST(SAGE_ENABLE_sage_sws2rst, [if_installed])
SAGE_SPKG_ENABLE([sage_sws2rst], [optional], [sage_sws2rst: Translate legacy Sage worksheet files (.sws) to reStructuredText (.rst) files])
AC_SUBST(SAGE_ENABLE_sagemath_categories, [if_installed])
SAGE_SPKG_ENABLE([sagemath_categories], [experimental], [ Sage: Open Source Mathematics Software: Sage categories and basic rings])
AC_SUBST(SAGE_ENABLE_sagemath_doc_pdf, [if_installed])
SAGE_SPKG_ENABLE([sagemath_doc_pdf], [optional], [sagemath_doc_pdf: SageMath documentation in PDF format])
AC_SUBST(SAGE_ENABLE_sagemath_environment, [if_installed])
SAGE_SPKG_ENABLE([sagemath_environment], [experimental], [ Sage: Open Source Mathematics Software: System and software environment])
AC_SUBST(SAGE_ENABLE_sagemath_objects, [if_installed])
SAGE_SPKG_ENABLE([sagemath_objects], [experimental], [ Sage: Open Source Mathematics Software: Sage objects, elements, parents, categories, coercion, metaclasses])
AC_SUBST(SAGE_ENABLE_sagemath_repl, [if_installed])
SAGE_SPKG_ENABLE([sagemath_repl], [experimental], [ Sage: Open Source Mathematics Software: IPython kernel, Sage preparser, doctester])
AC_SUBST(SAGE_ENABLE_scip, [if_installed])
SAGE_SPKG_ENABLE([scip], [optional], [scip: Mixed integer programming solver])
AC_SUBST(SAGE_ENABLE_scip_sdp, [if_installed])
SAGE_SPKG_ENABLE([scip_sdp], [optional], [scip_sdp: Mixed integer semidefinite programming plugin for SCIP])
AC_SUBST(SAGE_ENABLE_singular_jupyter, [if_installed])
SAGE_SPKG_ENABLE([singular_jupyter], [optional], [singular_jupyter: Jupyter kernel for Singular])
AC_SUBST(SAGE_ENABLE_sirocco, [if_installed])
SAGE_SPKG_ENABLE([sirocco], [optional], [sirocco: Compute topologically certified root continuation of bivariate polynomials])
AC_SUBST(SAGE_ENABLE_soplex, [if_installed])
SAGE_SPKG_ENABLE([soplex], [optional], [soplex: Linear optimization solver using the revised simplex method])
AC_SUBST(SAGE_ENABLE_surf, [if_installed])
SAGE_SPKG_ENABLE([surf], [experimental], [surf: Visualization of algebraic curves, algebraic surfaces and hyperplane sections of surfaces])
AC_SUBST(SAGE_ENABLE_symengine, [if_installed])
SAGE_SPKG_ENABLE([symengine], [optional], [symengine: A C++ symbolic manipulation library])
AC_SUBST(SAGE_ENABLE_symengine_py, [if_installed])
SAGE_SPKG_ENABLE([symengine_py], [experimental], [symengine_py: Python wrappers for SymEngine])
AC_SUBST(SAGE_ENABLE_tdlib, [if_installed])
SAGE_SPKG_ENABLE([tdlib], [optional], [tdlib: Algorithms for computing tree decompositions])
AC_SUBST(SAGE_ENABLE_texlive, [if_installed])
SAGE_SPKG_ENABLE([texlive], [optional], [texlive: A comprehensive TeX system])
AC_SUBST(SAGE_ENABLE_texttable, [if_installed])
SAGE_SPKG_ENABLE([texttable], [optional], [texttable: Python module for creating simple ASCII tables])
AC_SUBST(SAGE_ENABLE_tides, [if_installed])
SAGE_SPKG_ENABLE([tides], [optional], [tides: Integration of ODEs])
AC_SUBST(SAGE_ENABLE_topcom, [if_installed])
SAGE_SPKG_ENABLE([topcom], [optional], [topcom: Compute triangulations of point configurations and oriented matroids])
AC_SUBST(SAGE_ENABLE_valgrind, [if_installed])
SAGE_SPKG_ENABLE([valgrind], [experimental], [valgrind: Memory error detector, call graph generator, runtime profiler])
SAGE_SPKG_CONFIGURE_4TI2
SAGE_SPKG_CONFIGURE__DEVELOP
SAGE_SPKG_CONFIGURE__PREREQ
SAGE_SPKG_CONFIGURE__RECOMMENDED
SAGE_SPKG_CONFIGURE_APPDIRS
SAGE_SPKG_CONFIGURE_ARB
SAGE_SPKG_CONFIGURE_BOOST_CROPPED
SAGE_SPKG_CONFIGURE_BRIAL
SAGE_SPKG_CONFIGURE_BZIP2
SAGE_SPKG_CONFIGURE_CBC
SAGE_SPKG_CONFIGURE_CDDLIB
SAGE_SPKG_CONFIGURE_CLIQUER
SAGE_SPKG_CONFIGURE_CMAKE
SAGE_SPKG_CONFIGURE_COXETER3
SAGE_SPKG_CONFIGURE_CURL
SAGE_SPKG_CONFIGURE_DISTLIB
SAGE_SPKG_CONFIGURE_ECL
SAGE_SPKG_CONFIGURE_ECLIB
SAGE_SPKG_CONFIGURE_ECM
SAGE_SPKG_CONFIGURE_FFLAS_FFPACK
SAGE_SPKG_CONFIGURE_FFMPEG
SAGE_SPKG_CONFIGURE_FILELOCK
SAGE_SPKG_CONFIGURE_FLINT
SAGE_SPKG_CONFIGURE_FLINTQS
SAGE_SPKG_CONFIGURE_FPLLL
SAGE_SPKG_CONFIGURE_FREETYPE
SAGE_SPKG_CONFIGURE_GC
SAGE_SPKG_CONFIGURE_GCC
SAGE_SPKG_CONFIGURE_GENGETOPT
SAGE_SPKG_CONFIGURE_GF2X
SAGE_SPKG_CONFIGURE_GFAN
SAGE_SPKG_CONFIGURE_GFORTRAN
SAGE_SPKG_CONFIGURE_GIAC
SAGE_SPKG_CONFIGURE_GIT
SAGE_SPKG_CONFIGURE_GIVARO
SAGE_SPKG_CONFIGURE_GLPK
SAGE_SPKG_CONFIGURE_GMP
SAGE_SPKG_CONFIGURE_GP2C
SAGE_SPKG_CONFIGURE_GRAPHVIZ
SAGE_SPKG_CONFIGURE_GSL
SAGE_SPKG_CONFIGURE_ICONV
SAGE_SPKG_CONFIGURE_IGRAPH
SAGE_SPKG_CONFIGURE_IMAGEMAGICK
SAGE_SPKG_CONFIGURE_IML
SAGE_SPKG_CONFIGURE_INFO
SAGE_SPKG_CONFIGURE_ISL
SAGE_SPKG_CONFIGURE_LCALC
SAGE_SPKG_CONFIGURE_LIBATOMIC_OPS
SAGE_SPKG_CONFIGURE_LIBBRAIDING
SAGE_SPKG_CONFIGURE_LIBFFI
SAGE_SPKG_CONFIGURE_LIBGD
SAGE_SPKG_CONFIGURE_LIBGRAPHVIZ
SAGE_SPKG_CONFIGURE_LIBHOMFLY
SAGE_SPKG_CONFIGURE_LIBLZMA
SAGE_SPKG_CONFIGURE_LIBNAUTY
SAGE_SPKG_CONFIGURE_LIBPNG
SAGE_SPKG_CONFIGURE_LIBSEMIGROUPS
SAGE_SPKG_CONFIGURE_LIBXML2
SAGE_SPKG_CONFIGURE_LINBOX
SAGE_SPKG_CONFIGURE_LLVM
SAGE_SPKG_CONFIGURE_LRCALC
SAGE_SPKG_CONFIGURE_LRSLIB
SAGE_SPKG_CONFIGURE_M4RI
SAGE_SPKG_CONFIGURE_M4RIE
SAGE_SPKG_CONFIGURE_MESON
SAGE_SPKG_CONFIGURE_MPC
SAGE_SPKG_CONFIGURE_MPFI
SAGE_SPKG_CONFIGURE_MPFR
SAGE_SPKG_CONFIGURE_NAUTY
SAGE_SPKG_CONFIGURE_NCURSES
SAGE_SPKG_CONFIGURE_NINJA_BUILD
SAGE_SPKG_CONFIGURE_NTL
SAGE_SPKG_CONFIGURE_ONETBB
SAGE_SPKG_CONFIGURE_OPENBLAS
SAGE_SPKG_CONFIGURE_OPENSSL
SAGE_SPKG_CONFIGURE_PALP
SAGE_SPKG_CONFIGURE_PANDOC
SAGE_SPKG_CONFIGURE_PARI
SAGE_SPKG_CONFIGURE_PARI_ELLDATA
SAGE_SPKG_CONFIGURE_PARI_GALDATA
SAGE_SPKG_CONFIGURE_PARI_GALPOL
SAGE_SPKG_CONFIGURE_PARI_NFTABLES
SAGE_SPKG_CONFIGURE_PARI_SEADATA
SAGE_SPKG_CONFIGURE_PARI_SEADATA_SMALL
SAGE_SPKG_CONFIGURE_PATCH
SAGE_SPKG_CONFIGURE_PCRE
SAGE_SPKG_CONFIGURE_PDF2SVG
SAGE_SPKG_CONFIGURE_PERL_CPAN_POLYMAKE_PREREQ
SAGE_SPKG_CONFIGURE_PERL_MONGODB
SAGE_SPKG_CONFIGURE_PERL_TERM_READLINE_GNU
SAGE_SPKG_CONFIGURE_PKGCONF
SAGE_SPKG_CONFIGURE_PLANARITY
SAGE_SPKG_CONFIGURE_POLYMAKE
SAGE_SPKG_CONFIGURE_PPL
SAGE_SPKG_CONFIGURE_PRIMECOUNT
SAGE_SPKG_CONFIGURE_PRIMESIEVE
SAGE_SPKG_CONFIGURE_PYTHON3
SAGE_SPKG_CONFIGURE_QHULL
SAGE_SPKG_CONFIGURE_R
SAGE_SPKG_CONFIGURE_READLINE
SAGE_SPKG_CONFIGURE_RPY2
SAGE_SPKG_CONFIGURE_RW
SAGE_SPKG_CONFIGURE_SINGULAR
SAGE_SPKG_CONFIGURE_SQLITE
SAGE_SPKG_CONFIGURE_SUITESPARSE
SAGE_SPKG_CONFIGURE_SYMMETRICA
SAGE_SPKG_CONFIGURE_SYMPOW
SAGE_SPKG_CONFIGURE_TACHYON
SAGE_SPKG_CONFIGURE_TEXLIVE
SAGE_SPKG_CONFIGURE_TOML
SAGE_SPKG_CONFIGURE_TOX
SAGE_SPKG_CONFIGURE_VIRTUALENV
SAGE_SPKG_CONFIGURE_XZ
SAGE_SPKG_CONFIGURE_ZEROMQ
SAGE_SPKG_CONFIGURE_ZLIB
SAGE_SPKG_FINALIZE([4ti2], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_bootstrap], [optional], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_develop], [optional], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_gcc10], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_gcc11], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_gcc12], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_gcc8], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_gcc9], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_prereq], [standard], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_recommended], [optional], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([_sagemath], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([admcycles], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([alabaster], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([antic], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([appdirs], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([appnope], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([arb], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([argon2_cffi], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([asttokens], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([attrs], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([auditwheel_or_delocate], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([awali], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([babel], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([backcall], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([backports_zoneinfo], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([barvinok], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([beautifulsoup4], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([beniget], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([benzene], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([biopython], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([bleach], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([bliss], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([boost_cropped], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([brial], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([buckygen], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([bzip2], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([cbc], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([ccache], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([cddlib], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([certifi], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cffi], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([charset_normalizer], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cliquer], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([cmake], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([cocoalib], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([combinatorial_designs], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([configure], [base], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([contourpy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([conway_polynomials], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([coxeter3], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([cppy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cryptominisat], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([csdp], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([cunningham_tables], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([curl], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([cvxopt], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cycler], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cylp], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cypari], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cysignals], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([cython], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([d3js], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_cremona_ellcurve], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_cubic_hecke], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([database_jones_numfield], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_knotinfo], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([database_kohel], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_mutation_class], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_odlyzko_zeta], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_stein_watkins], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_stein_watkins_mini], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([database_symbolic_data], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([dateutil], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([debugpy], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([decorator], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([deformation], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([defusedxml], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([deprecation], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([distlib], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([docutils], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([dot2tex], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([dsdp], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([e_antic], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([ecl], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([eclib], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([ecm], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([editables], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([elliptic_curves], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([entrypoints], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([executing], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([fastjsonschema], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([fflas_ffpack], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([ffmpeg], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([filelock], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([flint], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([flintqs], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([flit_core], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([fonttools], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([fplll], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([fpylll], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([freetype], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([fricas], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([frobby], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([furo], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([gambit], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gap], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gap3], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gap_jupyter], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([gap_packages], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gast], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([gc], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gcc], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gdb], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gengetopt], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gf2x], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gfan], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gfortran], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([giac], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([git], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([github_cli], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gitpython], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([givaro], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([glpk], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([glucose], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gmp], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gmpy2], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([gnulib], [standard], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gp2c], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([graphs], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([graphviz], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([gsl], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([hatch_fancy_pypi_readme], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([hatch_nodejs_version], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([hatch_vcs], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([hatchling], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([html5lib], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([iconv], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([idna], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([igraph], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([imagemagick], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([imagesize], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([iml], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([importlib_metadata], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([importlib_resources], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([info], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([ipykernel], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ipympl], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ipython], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ipython_genutils], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ipywidgets], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([isl], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([jedi], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jinja2], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jmol], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([jsonschema], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupymake], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyter_client], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyter_core], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyter_jsmol], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyter_packaging], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyter_sphinx], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyterlab], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyterlab_pygments], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([jupyterlab_widgets], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([kenzo], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([kissat], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([kiwisolver], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([latte_int], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([lcalc], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libatomic_ops], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libbraiding], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libffi], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libgd], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libgraphviz], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libhomfly], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([liblzma], [standard], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libnauty], [optional], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libogg], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libpng], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libsemigroups], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libtheora], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([libxml2], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([lidia], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([lie], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([linbox], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([llvm], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([lrcalc], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([lrcalc_python], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([lrslib], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([m4ri], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([m4rie], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([markupsafe], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([mathics], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([mathics_scanner], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([mathjax], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([matplotlib], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([matplotlib_inline], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([maxima], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([mcqd], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([meataxe], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([memory_allocator], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([meson], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([meson_python], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([mistune], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([modular_decomposition], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([modular_resolution], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([mpc], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([mpfi], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([mpfr], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([mpfrcx], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([mpmath], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([msolve], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([nauty], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([nbclient], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([nbconvert], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([nbformat], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ncurses], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([nest_asyncio], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([networkx], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([nibabel], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ninja_build], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([nodeenv], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([nodejs], [optional], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([normaliz], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([notebook], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([notedown], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ntl], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([numpy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([onetbb], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([openblas], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([openssl], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([ore_algebra], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([p_group_cohomology], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([packaging], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([palettable], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([palp], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pandoc], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pandoc_attributes], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pandocfilters], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([papilo], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pari], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pari_elldata], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pari_galdata], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pari_galpol], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pari_jupyter], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pari_nftables], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pari_seadata], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pari_seadata_small], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([parso], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([patch], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([patchelf], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pathspec], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pcre], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pdf2svg], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([perl_cpan_polymake_prereq], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([perl_mongodb], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([perl_term_readline_gnu], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pexpect], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([phitigra], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pickleshare], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pillow], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pint], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pip], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pkgconf], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pkgconfig], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([planarity], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([plantri], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([platformdirs], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pluggy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ply], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([poetry_core], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([polylib], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([polymake], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([polytopes_db], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([polytopes_db_4d], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([ppl], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([pplpy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pplpy_doc], [standard], [normal], [SAGE_DOCS])
SAGE_SPKG_FINALIZE([primecount], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([primecountpy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([primesieve], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([prometheus_client], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([prompt_toolkit], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([ptyprocess], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pure_eval], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([py], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pybind11], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pybtex], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pycosat], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pycparser], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pycryptosat], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pycygwin], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyflakes], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pygments], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pygraphviz], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pynormaliz], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyparsing], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyppeteer], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyproject_metadata], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyrsistent], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyscipopt], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pysingular], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pytest], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pytest_mock], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pytest_xdist], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([python3], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([python_build], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([python_igraph], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pythran], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pytz], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pytz_deprecation_shim], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyx], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([pyzmq], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([qepcad], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([qhull], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([r], [optional], [none], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([r_jupyter], [experimental], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([readline], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([requests], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([retrolab], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([rpy2], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([rst2ipynb], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([rubiks], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([rw], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([saclib], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([sage_conf], [standard], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sage_docbuild], [standard], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sage_flatsurf], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sage_numerical_backends_coin], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sage_numerical_backends_cplex], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sage_numerical_backends_gurobi], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sage_setup], [standard], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sage_sws2rst], [optional], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sagelib], [standard], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sagemath_categories], [experimental], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sagemath_doc_html], [standard], [script], [SAGE_DOCS])
SAGE_SPKG_FINALIZE([sagemath_doc_pdf], [optional], [script], [SAGE_DOCS])
SAGE_SPKG_FINALIZE([sagemath_environment], [experimental], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sagemath_objects], [experimental], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sagemath_repl], [experimental], [script], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sagenb_export], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sagetex], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([scip], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([scip_sdp], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([scipy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([send2trash], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([setuptools], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([setuptools_scm], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([setuptools_scm_git_archive], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([setuptools_wheel], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([simplegeneric], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([singular], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([singular_jupyter], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sirocco], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([six], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([slabbe], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([snappy], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([snowballstemmer], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([soplex], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([soupsieve], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinx], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinx_basic_ng], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinxcontrib_applehelp], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinxcontrib_devhelp], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinxcontrib_htmlhelp], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinxcontrib_jsmath], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinxcontrib_qthelp], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinxcontrib_serializinghtml], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sphinxcontrib_websupport], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sqlalchemy], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([sqlite], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([stack_data], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([suitesparse], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([surf], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([surface_dynamics], [optional], [pip], [SAGE_VENV])
SAGE_SPKG_FINALIZE([symengine], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([symengine_py], [experimental], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([symmetrica], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([sympow], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([sympy], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([tachyon], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([tdlib], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([terminado], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([texlive], [optional], [script], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([texttable], [optional], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([threejs], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([tides], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([tinycss2], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([toml], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([tomli], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([tomlkit], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([topcom], [optional], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([tornado], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([tox], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([traitlets], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([typing_extensions], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([tzdata], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([tzlocal], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([urllib3], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([valgrind], [experimental], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([vcversioner], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([virtualenv], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([wcwidth], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([webencodings], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([wheel], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([widgetsnbextension], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([xz], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([zeromq], [standard], [normal], [SAGE_LOCAL])
SAGE_SPKG_FINALIZE([zipp], [standard], [normal], [SAGE_VENV])
SAGE_SPKG_FINALIZE([zlib], [standard], [normal], [SAGE_LOCAL])
