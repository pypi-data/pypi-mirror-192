from typing import List
import ghidra.app.plugin.core.debug
import ghidra.app.services
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.mem
import ghidra.trace.model
import ghidra.trace.model.program
import java.lang
import java.util
import java.util.concurrent


class DebuggerStateEditingService(object):





    class StateEditor(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getCoordinates(self) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

        def getService(self) -> ghidra.app.services.DebuggerStateEditingService: ...

        def hashCode(self) -> int: ...

        def isRegisterEditable(self, __a0: ghidra.program.model.lang.Register) -> bool: ...

        def isVariableEditable(self, __a0: ghidra.program.model.address.Address, __a1: int) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def setRegister(self, __a0: ghidra.program.model.lang.RegisterValue) -> java.util.concurrent.CompletableFuture: ...

        def setVariable(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> java.util.concurrent.CompletableFuture: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def coordinates(self) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

        @property
        def register(self) -> None: ...  # No getter available.

        @register.setter
        def register(self, value: ghidra.program.model.lang.RegisterValue) -> None: ...

        @property
        def service(self) -> ghidra.app.services.DebuggerStateEditingService: ...




    class StateEditingModeChangeListener(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def modeChanged(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.app.services.DebuggerStateEditingService.StateEditingMode) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class StateEditingMemoryHandler(ghidra.app.services.DebuggerStateEditingService.StateEditor, ghidra.program.model.mem.LiveMemoryHandler, object):








        def addLiveMemoryListener(self, __a0: ghidra.program.model.mem.LiveMemoryListener) -> None: ...

        def clearCache(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getByte(self, __a0: ghidra.program.model.address.Address) -> int: ...

        def getBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

        def getClass(self) -> java.lang.Class: ...

        def getCoordinates(self) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

        def getService(self) -> ghidra.app.services.DebuggerStateEditingService: ...

        def hashCode(self) -> int: ...

        def isRegisterEditable(self, __a0: ghidra.program.model.lang.Register) -> bool: ...

        def isVariableEditable(self, __a0: ghidra.program.model.address.Address, __a1: int) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def putByte(self, __a0: ghidra.program.model.address.Address, __a1: int) -> None: ...

        def putBytes(self, __a0: ghidra.program.model.address.Address, __a1: List[int], __a2: int, __a3: int) -> int: ...

        def removeLiveMemoryListener(self, __a0: ghidra.program.model.mem.LiveMemoryListener) -> None: ...

        def setRegister(self, __a0: ghidra.program.model.lang.RegisterValue) -> java.util.concurrent.CompletableFuture: ...

        def setVariable(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> java.util.concurrent.CompletableFuture: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def coordinates(self) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

        @property
        def register(self) -> None: ...  # No getter available.

        @register.setter
        def register(self, value: ghidra.program.model.lang.RegisterValue) -> None: ...

        @property
        def service(self) -> ghidra.app.services.DebuggerStateEditingService: ...




    class StateEditingMode(java.lang.Enum):
        READ_ONLY: ghidra.app.services.DebuggerStateEditingService.StateEditingMode = READ_ONLY
        WRITE_EMULATOR: ghidra.app.services.DebuggerStateEditingService.StateEditingMode = WRITE_EMULATOR
        WRITE_TARGET: ghidra.app.services.DebuggerStateEditingService.StateEditingMode = WRITE_TARGET
        WRITE_TRACE: ghidra.app.services.DebuggerStateEditingService.StateEditingMode = WRITE_TRACE
        icon: javax.swing.Icon
        name: unicode







        def canEdit(self, __a0: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> bool: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.services.DebuggerStateEditingService.StateEditingMode: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.services.DebuggerStateEditingService.StateEditingMode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addModeChangeListener(self, __a0: ghidra.app.services.DebuggerStateEditingService.StateEditingModeChangeListener) -> None: ...

    @overload
    def createStateEditor(self, __a0: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> ghidra.app.services.DebuggerStateEditingService.StateEditor: ...

    @overload
    def createStateEditor(self, __a0: ghidra.trace.model.Trace) -> ghidra.app.services.DebuggerStateEditingService.StateEditor: ...

    @overload
    def createStateEditor(self, __a0: ghidra.trace.model.program.TraceProgramView) -> ghidra.app.services.DebuggerStateEditingService.StateEditingMemoryHandler: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentMode(self, __a0: ghidra.trace.model.Trace) -> ghidra.app.services.DebuggerStateEditingService.StateEditingMode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeModeChangeListener(self, __a0: ghidra.app.services.DebuggerStateEditingService.StateEditingModeChangeListener) -> None: ...

    def setCurrentMode(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.app.services.DebuggerStateEditingService.StateEditingMode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

