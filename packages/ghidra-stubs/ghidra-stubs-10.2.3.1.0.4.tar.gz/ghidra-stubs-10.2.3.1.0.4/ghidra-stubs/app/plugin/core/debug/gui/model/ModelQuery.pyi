import com.google.common.collect
import ghidra.app.plugin.core.debug.gui.model
import ghidra.trace.model
import ghidra.trace.model.target
import java.lang
import java.util.stream


class ModelQuery(object):




    def __init__(self, __a0: ghidra.dbg.util.PathPredicates): ...



    @staticmethod
    def attributesOf(__a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ModelQuery: ...

    def computeAttributes(self, __a0: ghidra.trace.model.Trace) -> java.util.stream.Stream: ...

    @staticmethod
    def elementsOf(__a0: ghidra.trace.model.target.TraceObjectKeyPath) -> ghidra.app.plugin.core.debug.gui.model.ModelQuery: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def includes(self, __a0: com.google.common.collect.Range, __a1: ghidra.trace.model.target.TraceObjectValue) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def parse(__a0: unicode) -> ghidra.app.plugin.core.debug.gui.model.ModelQuery: ...

    def streamObjects(self, __a0: ghidra.trace.model.Trace, __a1: com.google.common.collect.Range) -> java.util.stream.Stream: ...

    def streamPaths(self, __a0: ghidra.trace.model.Trace, __a1: com.google.common.collect.Range) -> java.util.stream.Stream: ...

    def streamValues(self, __a0: ghidra.trace.model.Trace, __a1: com.google.common.collect.Range) -> java.util.stream.Stream: ...

    def toQueryString(self) -> unicode: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

