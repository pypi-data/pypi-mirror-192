from typing import List
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.bookmark
import ghidra.trace.model.breakpoint
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.program
import ghidra.trace.model.property
import ghidra.trace.model.stack
import ghidra.trace.model.symbol
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time
import ghidra.trace.util
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util


class Trace(ghidra.program.model.data.DataTypeManagerDomainObject, object):
    DO_DOMAIN_FILE_CHANGED: int = 2
    DO_OBJECT_CLOSED: int = 6
    DO_OBJECT_ERROR: int = 8
    DO_OBJECT_RENAMED: int = 3
    DO_OBJECT_RESTORED: int = 4
    DO_OBJECT_SAVED: int = 1
    DO_PROPERTY_CHANGED: int = 5
    TRACE_ICON: javax.swing.ImageIcon = images/video-x-generic16.png
    undoLock: object = java.lang.Object@6427cc17




    class TraceStackChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@40d0c103
        CHANGED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@4a042795
        DELETED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@3138949b



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryRegionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@7cd3906e
        CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@3ff73d74
        DELETED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@4a9eea5d
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@c80f2d4



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceProgramViewListener(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def viewCreated(self, __a0: ghidra.trace.model.program.TraceProgramView) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TracePlatformChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@2c953a60
        DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@4ca5837a
        MAPPING_ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@50f420cf
        MAPPING_DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@1e9ee009



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceStaticMappingChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@7ac2292e
        DELETED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@7f014a94



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSymbolChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@7f7354f1
        ADDRESS_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@522feeb
        ASSOCIATION_ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@72358640
        ASSOCIATION_REMOVED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@5b7b6442
        CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@71aafb63
        DELETED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@40a5a28
        LIFESPAN_CHANGED: ghidra.trace.util.DefaultTraceChangeType = ghidra.trace.util.DefaultTraceChangeType@6fea88de
        PARENT_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@1f2f9905
        RENAMED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@24b85934
        SET_AS_PRIMARY: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@63356682
        SOURCE_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@54e21e5c



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceObjectChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@5a661791
        DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@122f7220
        LIFE_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@139f9b37
        VALUE_CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@6d089f29
        VALUE_DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@53bcf321
        VALUE_LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@680160



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCodeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@73182e96
        DATA_TYPE_REPLACED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@4955b7ad
        DATA_TYPE_SETTINGS_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@2469d384
        FRAGMENT_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@10f80f41
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@4bc0a21d
        REMOVED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@234ab5b3



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceFunctionTagChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@2788251f
        CHANGED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@3595d621
        DELETED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@43040a0d



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryStateChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryStateChangeType = ghidra.trace.model.Trace$TraceMemoryStateChangeType@62041d52



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceDataTypeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@1b10ad7d
        CHANGED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@67f54a89
        DELETED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@412c8145
        MOVED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@73ff98b7
        RENAMED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@567c1d94
        REPLACED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@380fabf



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCategoryChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@5f6dc1a8
        DELETED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@694be1a8
        MOVED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@51fc06d5
        RENAMED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@5058c0d2



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceModuleChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@713dd036
        CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@565d063b
        DELETED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@40150272
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@71ee6e0b



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceOverlaySpaceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@599e40cc
        DELETED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@2701e1e9



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryBytesChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryBytesChangeType = ghidra.trace.model.Trace$TraceMemoryBytesChangeType@3a3e95d1



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceReferenceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@3b6af82c
        DELETED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@699f6d23
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@2741eddc
        PRIMARY_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@26a4e03e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceInstructionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        FALL_THROUGH_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@28aace60
        FLOW_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@ade9a4



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSnapshotChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@3517c9c2
        CHANGED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@243ff8d5
        DELETED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@5a98ebfc



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCommentChangeType(ghidra.trace.util.DefaultTraceChangeType):
        EOL_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@423de0a7
        PLATE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@c120723
        POST_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@75a1fcc8
        PRE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@49ef7981
        REPEATABLE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@54b5bfe0
        type: int







        @staticmethod
        def byType(__a0: int) -> ghidra.trace.model.Trace.TraceCommentChangeType: ...

        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSectionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@751c63f1
        CHANGED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@1316a3fe
        DELETED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@692b4ae8



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBookmarkChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@e1b40de
        CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@77b65051
        DELETED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@526cd8d0
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@4b6aa53a
        TYPE_ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@44793845



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCompositeDataChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@29ee281c
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@37b308a5
        REMOVED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@7d27904f



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBreakpointChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@14285c33
        CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@3e6d8eba
        DELETED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@661bffa3
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@27ffbec7



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSourceArchiveChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@73f19826
        CHANGED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@7fbd01ca
        DELETED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@256e817c



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceThreadChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@b7003b
        CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@3223c8b9
        DELETED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@6397dae0
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@1cd84e1c



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceFunctionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@71e0e921
        CHANGED_BODY: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@3eca5332
        CHANGED_CALL_FIXUP: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@d2ee8f5
        CHANGED_INLINE: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@6d54733f
        CHANGED_NORETURN: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@2f96e1af
        CHANGED_PARAMETERS: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@17989abe
        CHANGED_PURGE: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@5096171f
        CHANGED_RETURN: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@d9aaf65
        CHANGED_THUNK: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@264955cd
        TAG_APPLIED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@43adafe4
        TAG_REMOVED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@61117426



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def clearUndo(self) -> None: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def createProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def createTimeViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    def getAllProgramViews(self) -> java.util.Collection: ...

    def getBaseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getBaseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getBookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    def getBreakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    def getConsumerList(self) -> java.util.ArrayList: ...

    def getCurrentTransaction(self) -> ghidra.framework.model.Transaction: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEquateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    def getFixedProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceProgramView: ...

    def getMemoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    def getMetadata(self) -> java.util.Map: ...

    def getModificationNumber(self) -> long: ...

    def getModuleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    def getName(self) -> unicode: ...

    def getObjectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getPlatformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    def getProgramView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    def getRegisterContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    def getStackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    def getStaticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    def getSymbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getThreadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    def getTimeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    def getUndoName(self) -> unicode: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def lockRead(self) -> ghidra.util.LockHold: ...

    def lockWrite(self) -> ghidra.util.LockHold: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    @property
    def allProgramViews(self) -> java.util.Collection: ...

    @property
    def baseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def baseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def baseLanguage(self) -> ghidra.program.model.lang.Language: ...

    @property
    def bookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    @property
    def breakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def changed(self) -> bool: ...

    @property
    def closed(self) -> bool: ...

    @property
    def codeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    @property
    def consumerList(self) -> java.util.ArrayList: ...

    @property
    def currentTransaction(self) -> ghidra.framework.model.Transaction: ...

    @property
    def dataTypeManager(self) -> ghidra.trace.model.data.TraceBasedDataTypeManager: ...

    @property
    def description(self) -> unicode: ...

    @property
    def domainFile(self) -> ghidra.framework.model.DomainFile: ...

    @property
    def equateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    @property
    def eventsEnabled(self) -> None: ...  # No getter available.

    @eventsEnabled.setter
    def eventsEnabled(self, value: bool) -> None: ...

    @property
    def locked(self) -> bool: ...

    @property
    def memoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    @property
    def metadata(self) -> java.util.Map: ...

    @property
    def modificationNumber(self) -> long: ...

    @property
    def moduleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def objectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    @property
    def optionsNames(self) -> List[object]: ...

    @property
    def platformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    @property
    def programView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    @property
    def redoName(self) -> unicode: ...

    @property
    def referenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    @property
    def registerContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    @property
    def sendingEvents(self) -> bool: ...

    @property
    def stackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    @property
    def staticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    @property
    def symbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    @property
    def synchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    @property
    def temporary(self) -> bool: ...

    @temporary.setter
    def temporary(self, value: bool) -> None: ...

    @property
    def threadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    @property
    def timeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    @property
    def undoName(self) -> unicode: ...