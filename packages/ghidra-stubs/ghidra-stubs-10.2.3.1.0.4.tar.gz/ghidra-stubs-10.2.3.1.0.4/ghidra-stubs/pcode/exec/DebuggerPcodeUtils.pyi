from typing import List
import ghidra.app.plugin.core.debug
import ghidra.framework.plugintool
import ghidra.pcode.exec
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.mem
import ghidra.program.model.pcode
import ghidra.trace.model.memory
import java.lang
import java.util


class DebuggerPcodeUtils(java.lang.Enum):





    class WatchValue(java.lang.Record):




        def __init__(self, __a0: List[int], __a1: ghidra.trace.model.memory.TraceMemoryState, __a2: ghidra.program.model.address.Address, __a3: ghidra.program.model.address.AddressSetView): ...



        def address(self) -> ghidra.program.model.address.Address: ...

        def bytes(self) -> List[int]: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def reads(self) -> ghidra.program.model.address.AddressSetView: ...

        def state(self) -> ghidra.trace.model.memory.TraceMemoryState: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class WatchValuePcodeExecutorStatePiece(object, ghidra.pcode.exec.PcodeExecutorStatePiece):




        def __init__(self, __a0: ghidra.pcode.exec.PcodeExecutorStatePiece, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece, __a2: ghidra.pcode.exec.PcodeExecutorStatePiece, __a3: ghidra.pcode.exec.PcodeExecutorStatePiece): ...



        def checkRange(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int) -> None: ...

        def clear(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getAddressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getClass(self) -> java.lang.Class: ...

        def getConcreteBuffer(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> ghidra.program.model.mem.MemBuffer: ...

        def getLanguage(self) -> ghidra.program.model.lang.Language: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.lang.Register, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: List[int], __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def quantizeOffset(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long) -> long: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.lang.Register, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: List[int], __a2: int, __a3: bool, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def addressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def arithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def language(self) -> ghidra.program.model.lang.Language: ...




    class WatchValuePcodeArithmetic(java.lang.Enum, ghidra.pcode.exec.PcodeArithmetic):
        BIG_ENDIAN: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic = BIG_ENDIAN
        LITTLE_ENDIAN: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic = LITTLE_ENDIAN







        @overload
        def binaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object, __a2: object) -> object: ...

        @overload
        def binaryOp(self, __a0: int, __a1: int, __a2: int, __a3: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a4: int, __a5: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def binaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object, __a4: int, __a5: object) -> object: ...

        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def forEndian(__a0: bool) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic: ...

        @staticmethod
        def forLanguage(__a0: ghidra.program.model.lang.Language) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic: ...

        @overload
        def fromConst(self, __a0: List[int]) -> object: ...

        @overload
        def fromConst(self, __a0: long, __a1: int) -> object: ...

        @overload
        def fromConst(self, __a0: long, __a1: int) -> object: ...

        @overload
        def fromConst(self, __a0: long, __a1: int, __a2: bool) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getEndian(self) -> ghidra.program.model.lang.Endian: ...

        def hashCode(self) -> int: ...

        def isTrue(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> bool: ...

        @overload
        def modAfterLoad(self, __a0: int, __a1: int, __a2: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a3: int, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def modAfterLoad(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

        @overload
        def modBeforeStore(self, __a0: int, __a1: int, __a2: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a3: int, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def modBeforeStore(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        @overload
        def sizeOf(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> long: ...

        @overload
        def sizeOf(self, __a0: object) -> long: ...

        def sizeOfAbstract(self, __a0: object) -> object: ...

        def toBigInteger(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

        @overload
        def toConcrete(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> List[int]: ...

        @overload
        def toConcrete(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> List[int]: ...

        def toLong(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

        def toString(self) -> unicode: ...

        @overload
        def unaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object) -> object: ...

        @overload
        def unaryOp(self, __a0: int, __a1: int, __a2: int, __a3: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def unaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object) -> object: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeArithmetic]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def endian(self) -> ghidra.program.model.lang.Endian: ...




    class WatchValuePcodeExecutorState(object, ghidra.pcode.exec.PcodeExecutorState):




        def __init__(self, __a0: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeExecutorStatePiece): ...



        def checkRange(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int) -> None: ...

        def clear(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getAddressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        def getClass(self) -> java.lang.Class: ...

        def getConcreteBuffer(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> ghidra.program.model.mem.MemBuffer: ...

        def getLanguage(self) -> ghidra.program.model.lang.Language: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.lang.Register, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue: ...

        @overload
        def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def paired(self, __a0: ghidra.pcode.exec.PcodeExecutorStatePiece) -> ghidra.pcode.exec.PcodeExecutorState: ...

        def quantizeOffset(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long) -> long: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.lang.Register, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.DebuggerPcodeUtils.WatchValue) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool, __a4: object) -> None: ...

        @overload
        def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def addressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def arithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

        @property
        def language(self) -> ghidra.program.model.lang.Language: ...





    @staticmethod
    def buildWatchExecutor(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> ghidra.pcode.exec.PcodeExecutor: ...

    @staticmethod
    def buildWatchState(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> ghidra.pcode.exec.DebuggerPcodeUtils.WatchValuePcodeExecutorState: ...

    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def executorForCoordinates(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> ghidra.pcode.exec.PcodeExecutor: ...

    @staticmethod
    def executorStateForCoordinates(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> ghidra.pcode.exec.PcodeExecutorState: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.pcode.exec.DebuggerPcodeUtils: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.pcode.exec.DebuggerPcodeUtils]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

