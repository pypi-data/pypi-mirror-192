def show():
    print("-----")
    print("1.求随机矩阵的特征值和特征向量")
    print("-----")
    print("import numpy as np")
    print("a = input().split(' ')")
    print("try:")
    print("    b = [int(i) for i in a ]")
    print("    X = np.array(b).reshape(5,5)")
    print("    w, v = np.linalg.eig(X)")
    print("    print(w, \"\n\", v)")
    print("except ValueError:")
    print("print(\"输入有错！\")")
    print("")
    print("-----")
    print("2.求相关系数矩阵")
    print("-----")
    print("import numpy as np")
    print("a = input().split(' ')")
    print("c = input().split(' ')")
    print("t = [int(m) for m in c]")
    print("b = [float(i) for i in a ]")
    print("X = np.array(b).reshape(t[0],t[1])")
    print("print(np.corrcoef(X))")
    print("")
    print("-----")
    print("3.线性回归")
    print("-----")
    print("import numpy as np")
    print("from skylearn.linear_model import LinearRegression")
    print("a = input().split(' ')")
    print("b = input().split(' ')")
    print("c = int(input())")
    print("a1 = [int(m) for m in a]")
    print("b1 = [float(i) for i in b]")
    print("X = np.array(a1).reshape(5,1)")
    print("y = np.array(b1).reshape(5,1)")
    print("model = LinearRegression()")
    print("model.fit(X,y)")
    print("results = model.predict(np.array([c]).reshape(1,1))")
    print("print(\"Predict 12 inch cost:{:.2f}\".format(results[0,0]))")
    print("")
    print("-----")
    print("4.K均值聚类的实现")
    print("-----")
    print("import numpy as np")
    print("from skylearn.cluster import KMeans")
    print("temp = np.array([float(i) for i in input().split(' ')])")
    print("n_samples, n_features = np.array([int(i) for i in input().split(' ')])")
    print("n_clusters = int(input())")
    print("X =[]")
    print("for i in range(n_samples):")
    print("    y = []")
    print("    for j in range(n_features):")
    print("        y.append(temp[n_features*i+j])")
    print("    X.append(y)")
    print("X1 =  np.array(X)")
    print("kmeans = KMeans(n_clusters=n_clusters)")
    print("kmeans.fit(X1)")
    print("m=kmeans.labels_[0]")
    print("print('A公司所在类的中心为：{:.2f},{:.2f}。'.format(kmeans.cluster_centers_[m,0],kmeans.cluster_centers_[m,1]))")
    print("")
    print("-----")
    print("5.针对变量的系统聚类实现")
    print("-----")
    print("import numpy as np")
    print("from skylearn.cluster import AgglomerativeClustering")
    print("temp = np.array([float(i) for i in input().split(' ')])")
    print("n_samples, n_features = np.array([int(i) for i in input().split(' ')])")
    print("n_clusters = int(input())")
    print("X =[]")
    print("for i in range(n_samples):")
    print("    y = []")
    print("    for j in range(n_features):")
    print("        y.append(temp[n_features*i+j])")
    print("    X.append(y)")
    print("X1 =  np.array(X)")
    print("hc=AgglomerativeClustering(n_clusters=n_clusters, affinity='correlation', ")
    print("                           linkage='complete')")
    print("hc.fit(X1.T)")
    print("hcl=hc.labels_")
    print("if hcl[0]==hcl[2]:")
    print("    print(\"香气和酸质属于一类。\")")
    print("else:")
    print("    print(\"香气和酸质不属于一类。\")")
    print("")
    print("-----")
    print("6.分类判别")
    print("-----")
    print("from numpy import *")
    print("def compute_mean(samples):")
    print("    mean_mat = mean(samples, axis=1) #axis=1按照行方向计算")
    print("    return mean_mat")
    print("def compute_Si(samples, mean):")
    print("    dimens, nums = samples.shape[:2]")
    print("    samples_mean = samples - mean")
    print("    s_in = 0")
    print("    for i in range(nums):")
    print("        x = samples_mean[:, i]")
    print("        s_in += dot(x, x.T)")
    print("    # endfor")
    print("    return s_in")
    print("# end of compute_Si")
    print("if __name__ == '__main__':")
    print("    x1=array([float(i) for i in input().split(',')])")
    print("    y1=array([float(i) for i in input().split(',')])")
    print("    w1 = mat(vstack((x1,y1)))")
    print("    x2=array([float(i) for i in input().split(',')])")
    print("    y2=array([float(i) for i in input().split(',')])")
    print("    w2 = mat(vstack((x2, y2)))")
    print("    mean1 = compute_mean(w1)")
    print("    mean2 = compute_mean(w2)")
    print("    s_in1 = compute_Si(w1, mean1)")
    print("    s_in2 = compute_Si(w2, mean2)")
    print("    s = s_in1 + s_in2")
    print("    s_t = s.I")
    print("    w = dot(s_t, mean1 - mean2)")
    print("    w_new = w.T #最佳投影方向的转置")
    print("    m1_new = dot(w_new,mean1)")
    print("    m2_new = dot(w_new,mean2)")
    print("    pw1 = 0.6")
    print("    pw2 = 0.4")
    print("    w0 = m1_new*pw1+m2_new*pw2")
    print("    x = mat(array([float(i) for i in input().split(',')]).reshape(2,1))")
    print("    y_i = w_new * x[:,0]")
    print("    if y_i > w0:")
    print("        print('该点属于第一类')")
    print("    else:")
    print("        print('该点属于第二类')")
    print("")
    print("-----")
    print("7.写出贡献率最大的主成分线性方程")
    print("-----")
    print("import numpy as np")
    print("from decimal import *")
    print("#mean of each feature")
    print("temp = np.array([float(i) for i in input().split(',')])")
    print("n_samples, n_features = np.array([int(i) for i in input().split(',')])")
    print("X =[]")
    print("for i in range(n_samples):")
    print("    y = []")
    print("    for j in range(n_features):")
    print("        y.append(temp[n_features*i+j])")
    print("    X.append(y)")
    print("X1 =  np.array(X)")
    print("mean=np.array([np.mean(X1[:,i]) for i in range(n_features)])")
    print("#normalization")
    print("norm_X=X-mean")
    print("#scatter matrix")
    print("scatter_matrix=np.dot(np.transpose(norm_X),norm_X)")
    print("#Calculate the eigenvectors and eigenvalues")
    print("eig_val, eig_vec = np.linalg.eig(scatter_matrix)")
    print("eig_pairs = [(np.abs(eig_val[i]), eig_vec[:,i]) for i in range(n_features)]")
    print("# sort eig_vec based on eig_val from highest to lowest")
    print("eig_pairs.sort(reverse=True)")
    print("# select the top k eig_vec")
    print("feature=[ele[1] for ele in eig_pairs[:1]]")
    print("i = 1")
    print("value = ''")
    print("for ele in feature[0]:")
    print("    if(ele>=0):")
    print("        value = value +'+'+str(Decimal(ele).quantize(Decimal('0.00000')))+'*(x'+str(i)+'-'+str(Decimal(mean[i-1]).quantize(Decimal('0.00')))+')'")
    print("    else:")
    print("        value = value +str(Decimal(ele).quantize(Decimal('0.00000')))+'*(x'+str(i)+'-'+str(Decimal(mean[i-1]).quantize(Decimal('0.00')))+')'")
    print("    i = i+1")
    print("if(value[0]=='+'):")
    print("    value = value[1:]")
    print("print('第1主成分='+value)")