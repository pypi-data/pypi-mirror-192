# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['ensembleclustering',
 'ensembleclustering.tests',
 'ensembleclustering.tests.data']

package_data = \
{'': ['*'], 'ensembleclustering': ['kahypar_config/*']}

install_requires = \
['kahypar>=1.1.8,<2.0.0',
 'numpy>=1.19.5,<2.0.0',
 'pymetis==2020.1',
 'pytest>=7.1.2,<8.0.0',
 'scikit-learn>=1.0.1,<1.1.0',
 'scipy>=1.5.0,<2.0.0']

setup_kwargs = {
    'name': 'ensembleclustering',
    'version': '1.0.2',
    'description': 'A Python package for cluster ensembles',
    'long_description': '# ClusterEnsembles\n\n[![PyPI](https://img.shields.io/pypi/v/ensembleclustering)](https://pypi.org/project/ClusterEnsembles/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ensembleclustering)](https://pypi.org/project/ClusterEnsembles/)\n[![GitHubActions](https://img.shields.io/github/workflow/status/burtonrj/ClusterEnsembles/ensembleclustering%20Testing)]()\n\nA Python package for cluster ensembles. Cluster ensembles generate a single consensus clustering label by using base labels obtained from multiple clustering algorithms. The consensus clustering label stably achieves a high clustering performance. \n\nThis package was originally authored by Takehiro Sano but has since been removed from PyPi. \nThis a cloned version I am maintaining. All original code and functionality is unchanged, it is just maintained, tested, and published from here.\n\n<p align="center">\n  <img width="600" src="https://user-images.githubusercontent.com/60049342/115107122-deb7b880-9fa3-11eb-98d6-9d1d25bf3ae8.png">\n</p>\n\nInstallation\n------------\n\n```\npip install ensembleclustering\n```\n\nUsage\n-----\n\n`CE.cluster_ensembles` is used as follows.\n\n```python\n>> > import numpy as np\n\n>> > import ensembleclustering as CE\n\n>> > label1 = np.array([1, 1, 1, 2, 2, 3, 3])\n\n>> > label2 = np.array([2, 2, 2, 3, 3, 1, 1])\n\n>> > label3 = np.array([4, 4, 2, 2, 3, 3, 3])\n\n>> > label4 = np.array([1, 2, np.nan, 1, 2, np.nan, np.nan])  # `np.nan`: missing value\n\n>> > labels = np.array([label1, label2, label3, label4])\n\n>> > label_ce = CE.cluster_ensembles(labels)\n\n>> > print(label_ce)\n[1 1 1 2 2 0 0]\n```\n\n#### Parameters\n\n- `labels`: *numpy.ndarray*\n  \n  Labels generated by multiple clustering algorithms such as K-Means. \n  \n  **Note:** Assume that the length of each label is the same. \n\n- `nclass`: *int, default=None*\n  \n  Number of classes in a consensus clustering label. \n  If `nclass=None`, set the maximum number of classes in each label except missing values. \n  In other words, set `nclass=3` automatically in the above.\n\n- `solver`: *{\'cspa\', \'hgpa\', \'mcla\', \'hbgf\', \'nmf\', \'all\'}, default=\'hbgf\'*\n    \n    \'cspa\': Cluster-based Similarity Partitioning Algorithm [1].\n\n    \'hgpa\': HyperGraph Partitioning Algorithm [1].\n\n    \'mcla\': Meta-CLustering Algorithm [1].\n    \n    \'hbgf\': Hybrid Bipartite Graph Formulation [2].\n\n    \'nmf\': NMF-based consensus clustering [3].\n\n    \'all\': The consensus clustering label with the largest objective function value [1] is returned among the results of all solvers. \n    \n    <p align="center">\n      <img width="600" src="https://user-images.githubusercontent.com/60049342/116185712-20dbb980-a75d-11eb-87cb-ae0e68179674.png">\n    </p>\n\n    **Note:** Please use \'hbgf\' for large-scale `labels`.\n\n- `random_state`: *int, default=None*\n  \n  Used for \'hgpa\', \'mcla\', and \'nmf\'. Please pass an integer for reproducible results.\n\n- `verbose`: *bool, default=False*\n  \n  Whether to be verbose.\n\n#### Return\n\n- `label_ce`: *numpy.ndarray*\n  \n  A consensus clustering label generated by cluster ensembles. \n    \nExample\n-------\n\n`tsano430/egnmf`: https://github.com/tsano430/egnmf\n\nSimilar Package\n---------------\n\n`GGiecold/Cluster_Ensembles`: https://github.com/GGiecold/Cluster_Ensembles\n\nReferences\n----------\n\n[1] A. Strehl and J. Ghosh, \n"Cluster ensembles -- a knowledge reuse framework for combining multiple partitions,"\nJournal of Machine Learning Research, vol. 3, pp. 583-617, 2002.\n\n[2] X. Z. Fern and C. E. Brodley, \n"Solving cluster ensemble problems by bipartite graph partitioning,"\nIn Proceedings of the Twenty-First International Conference on Machine Learning, p. 36, 2004.\n\n[3] T. Li, C. Ding, and M. I. Jordan, \n"Solving consensus and semi-supervised clustering problems using nonnegative matrix factorization," \nIn Proceedings of the Seventh IEEE International Conference on Data Mining, pp. 577-582, 2007.\n\n[4] J. Ghosh and A. Acharya, \n"Cluster ensembles," \nWiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery, vol. 1, no. 4, pp. 305-315, 2011. \n',
    'author': 'Takehiro Sano',
    'author_email': 'tsano430@gmail.com',
    'maintainer': 'burtonrj',
    'maintainer_email': 'burtonrj@cardiff.ac.uk',
    'url': 'https://github.com/burtonrj/ClusterEnsembles',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
