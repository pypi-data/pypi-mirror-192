Metadata-Version: 2.1
Name: trappist
Version: 0.8.0
Summary: Minimal Trap Spaces computation using Maximal Siphons
Project-URL: Code, https://github.com/soli/trap-spaces-as-siphons
Author-email: Sylvain Soliman <Sylvain.Soliman@inria.fr>
License-File: LICENSE
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.6
Requires-Dist: loguru>=0.2.5
Requires-Dist: minizinc>=0.6
Requires-Dist: networkx>=2.2
Requires-Dist: pyeda>=0.28
Requires-Dist: python-sat
Provides-Extra: dev
Requires-Dist: black; extra == 'dev'
Requires-Dist: flake8-mypy; extra == 'dev'
Description-Content-Type: text/markdown

![trappist logo](trappist.svg)

Trappist is a tool for computing _minimal trap spaces_ of a Boolean model.

# Install

You can install trappist with `pip` directly from the Package Index:

``` sh
$ python3 -m pip install trappist
```

or grab the very latest version from the source:

``` sh
$ python3 -m pip install -e git+https://github.com/soli/trap-spaces-as-siphons.git
```

You will also need the `clingo` ASP solver in your PATH for the `asp` method of computing the trap spaces (default). Instructions are provided directly on the [Potassco pages](https://github.com/potassco/clingo/releases/).

Note that Trappist does install the [PySAT](https://pysathq.github.io/docs/html/index.html) module so that the `sat` method is always available even if you do not have `clingo`.

# Run trappist in a Binder image

Submitted version: [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/soli/trap-spaces-as-siphons/camera-ready)

Latest version, with _2022-12-01_ colomoto-docker image:Â [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/soli/trap-spaces-as-siphons/main)

# Read about trappist

The article describing trappist is [here](cmsb22.pdf)

# Run trappist from the command line

After installing `trappist` (and maybe `clingo`), just run

``` sh
$ trappist [-m maximum number of solutions] [-t maximum time to use in seconds] [-s solver (asp|sat)] <PNML input file>
```
