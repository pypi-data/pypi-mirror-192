{"version":3,"file":"chunks/app_views_admin_adminQuotas_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/internalStatChart.tsx","webpack:///./app/views/admin/adminQuotas.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  label: string;\n  resolution: string;\n  since: number;\n  stat: string;\n  height?: number;\n};\n\ntype State = {\n  data: [number, number][] | null;\n  error: boolean;\n  loading: boolean;\n};\n\nclass InternalStatChart extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps: Props, nextState: State) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true, loading: false}),\n    });\n  };\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data:\n        data?.map(([timestamp, value]) => ({\n          name: timestamp * 1000,\n          value,\n        })) ?? [],\n    };\n    return (\n      <MiniBarChart\n        height={height ?? 150}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import {Fragment} from 'react';\n\nimport TextField from 'sentry/components/forms/fields/textField';\nimport InternalStatChart from 'sentry/components/internalStatChart';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype Config = {\n  backend: string;\n  options: Record<string, string>;\n};\n\ntype State = AsyncView['state'] & {\n  config: Config;\n  resolution: string;\n  since: number;\n};\n\nexport default class AdminQuotas extends AsyncView<{}, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      since: new Date().getTime() / 1000 - 3600 * 24 * 7,\n      resolution: '1h',\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['config', '/internal/quotas/']];\n  }\n\n  renderBody() {\n    const {config} = this.state;\n    return (\n      <Fragment>\n        <h3>Quotas</h3>\n\n        <Panel>\n          <PanelHeader>{t('Config')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextField\n              name=\"backend\"\n              value={config.backend}\n              label=\"Backend\"\n              disabled\n              inline={false}\n              stacked\n            />\n            <TextField\n              name=\"rateLimit\"\n              value={config.options['system.rate-limit']}\n              label=\"Rate Limit\"\n              disabled\n              inline={false}\n              stacked\n            />\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Total Events')}</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"events.total\"\n              label=\"Events\"\n            />\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Dropped Events')}</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"events.dropped\"\n              label=\"Events\"\n            />\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["InternalStatChart","Component","error","loading","data","this","setState","props","api","request","method","since","resolution","key","stat","success","componentDidMount","fetchData","shouldComponentUpdate","_nextProps","nextState","state","componentDidUpdate","prevProps","render","label","height","onRetry","series","seriesName","map","timestamp","value","name","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","withApi","AdminQuotas","AsyncView","getDefaultState","super","Date","getTime","getEndpoints","renderBody","config","Fragment","t","withPadding","backend","disabled","inline","stacked","options","AsyncComponent","getTitle","title","renderComponent"],"sourceRoot":""}