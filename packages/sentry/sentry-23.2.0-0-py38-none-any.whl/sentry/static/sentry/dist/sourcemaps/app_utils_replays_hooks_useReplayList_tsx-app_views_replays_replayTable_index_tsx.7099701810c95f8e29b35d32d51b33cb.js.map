{"version":3,"file":"chunks/app_utils_replays_hooks_useReplayList_tsx-app_views_replays_replayTable_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/fetchReplayList.tsx","webpack:///./app/utils/replays/hooks/useReplayList.tsx","webpack:///./app/views/replays/replayTable/sortableHeader.tsx","webpack:///./app/views/replays/replayTable/headerCell.tsx","webpack:///./app/views/replays/replayTable/tableCell.tsx","webpack:///./app/views/replays/replayTable/index.tsx","webpack:///./app/views/replays/replayTable/types.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\nimport type {Location} from 'history';\n\nimport type {Client} from 'sentry/api';\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport {mapResponseToReplayRecord} from 'sentry/utils/replays/replayDataUtils';\nimport type RequestError from 'sentry/utils/requestError/requestError';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport const DEFAULT_SORT = '-started_at';\n\nexport const REPLAY_LIST_FIELDS = [\n  'activity',\n  'count_errors',\n  'duration',\n  'finished_at',\n  'id',\n  'project_id',\n  'started_at',\n  'urls',\n  'user',\n];\n\ntype State = {\n  fetchError: undefined | RequestError;\n  pageLinks: null | string;\n  replays: undefined | ReplayListRecord[];\n};\n\ntype Result = State;\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nasync function fetchReplayList({\n  api,\n  organization,\n  location,\n  eventView,\n}: Props): Promise<Result> {\n  try {\n    const path = `/organizations/${organization.slug}/replays/`;\n\n    const [{data}, _textStatus, resp] = await api.requestPromise(path, {\n      includeAllArgs: true,\n      query: {\n        ...eventView.getEventsAPIPayload(location),\n        cursor: location.query.cursor,\n      },\n    });\n\n    const pageLinks = resp?.getResponseHeader('Link') ?? '';\n\n    return {\n      fetchError: undefined,\n      pageLinks,\n      replays: data.map(mapResponseToReplayRecord),\n    };\n  } catch (error) {\n    if (error.responseJSON?.detail) {\n      return {\n        fetchError: error.responseJSON.detail,\n        pageLinks: null,\n        replays: [],\n      };\n    }\n    Sentry.captureException(error);\n    return {\n      fetchError: error,\n      pageLinks: null,\n      replays: [],\n    };\n  }\n}\n\nexport default fetchReplayList;\n","import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport fetchReplayList from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Options = {\n  eventView: EventView;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>> & {isFetching: boolean};\n\ntype Result = State;\n\nfunction useReplayList({eventView, location, organization}: Options): Result {\n  const api = useApi();\n\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n  });\n\n  const loadReplays = useCallback(async () => {\n    api.clear();\n    setData(prev => ({\n      ...prev,\n      isFetching: true,\n    }));\n    const response = await fetchReplayList({\n      api,\n      organization,\n      location,\n      eventView,\n    });\n\n    setData({...response, isFetching: false});\n  }, [api, organization, location, eventView]);\n\n  useEffect(() => {\n    loadReplays();\n  }, [loadReplays]);\n\n  return data;\n}\n\nexport default useReplayList;\n","import styled from '@emotion/styled';\n\nimport Link from 'sentry/components/links/link';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconArrow} from 'sentry/icons';\nimport {space} from 'sentry/styles/space';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\nimport {ReplayRecord} from 'sentry/views/replays/types';\n\ntype NotSortable = {\n  label: string;\n  tooltip?: string;\n};\n\ntype Sortable = {\n  fieldName: keyof ReplayRecord;\n  label: string;\n  sort: undefined | Sort;\n  tooltip?: string;\n};\n\ntype Props = NotSortable | Sortable;\n\nfunction SortableHeader(props: Props) {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n\n  if (!('sort' in props) || !props.sort) {\n    const {label, tooltip} = props;\n    return (\n      <Header>\n        {label}\n        {tooltip ? (\n          <StyledQuestionTooltip size=\"xs\" position=\"top\" title={tooltip} />\n        ) : null}\n      </Header>\n    );\n  }\n\n  const {fieldName, label, sort, tooltip} = props;\n\n  const arrowDirection = sort?.kind === 'asc' ? 'up' : 'down';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <Header>\n      <SortLink\n        role=\"columnheader\"\n        aria-sort={\n          sort?.field.endsWith(fieldName)\n            ? sort?.kind === 'asc'\n              ? 'ascending'\n              : 'descending'\n            : 'none'\n        }\n        onClick={() => {\n          const column = sort?.field.endsWith(fieldName)\n            ? sort?.kind === 'desc'\n              ? fieldName\n              : '-' + fieldName\n            : '-' + fieldName;\n          trackAdvancedAnalyticsEvent('replay.list-sorted', {\n            organization,\n            column,\n          });\n        }}\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...location.query,\n            sort: sort?.field.endsWith(fieldName)\n              ? sort?.kind === 'desc'\n                ? fieldName\n                : '-' + fieldName\n              : '-' + fieldName,\n          },\n        }}\n      >\n        {label} {sort?.field === fieldName && sortArrow}\n      </SortLink>\n      {tooltip ? (\n        <StyledQuestionTooltip size=\"xs\" position=\"top\" title={tooltip} />\n      ) : null}\n    </Header>\n  );\n}\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  align-items: center;\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n  margin-left: ${space(0.5)};\n`;\n\nexport default SortableHeader;\n","import {t} from 'sentry/locale';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport SortableHeader from 'sentry/views/replays/replayTable/sortableHeader';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\n\ntype Props = {\n  column: keyof typeof ReplayColumns;\n  sort?: Sort;\n};\n\nfunction HeaderCell({column, sort}: Props) {\n  switch (column) {\n    case ReplayColumns.session:\n      return <SortableHeader label={t('Session')} />;\n\n    case ReplayColumns.projectId:\n      return <SortableHeader sort={sort} fieldName=\"project_id\" label={t('Project')} />;\n\n    case ReplayColumns.slowestTransaction:\n      return (\n        <SortableHeader\n          label={t('Slowest Transaction')}\n          tooltip={t(\n            'Slowest single instance of this transaction captured by this session.'\n          )}\n        />\n      );\n\n    case ReplayColumns.startedAt:\n      return (\n        <SortableHeader sort={sort} fieldName=\"started_at\" label={t('Start Time')} />\n      );\n\n    case ReplayColumns.duration:\n      return <SortableHeader sort={sort} fieldName=\"duration\" label={t('Duration')} />;\n\n    case ReplayColumns.countErrors:\n      return <SortableHeader sort={sort} fieldName=\"count_errors\" label={t('Errors')} />;\n\n    case ReplayColumns.activity:\n      return (\n        <SortableHeader\n          sort={sort}\n          fieldName=\"activity\"\n          label={t('Activity')}\n          tooltip={t(\n            'Activity represents how much user activity happened in a replay. It is determined by the number of errors encountered, duration, and UI events.'\n          )}\n        />\n      );\n\n    default:\n      return null;\n  }\n}\n\nexport default HeaderCell;\n","import styled from '@emotion/styled';\n\nimport Duration from 'sentry/components/duration';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport {StringWalker} from 'sentry/components/replays/walker/urlWalker';\nimport ScoreBar from 'sentry/components/scoreBar';\nimport TimeSince from 'sentry/components/timeSince';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport {space} from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {spanOperationRelativeBreakdownRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useProjects from 'sentry/utils/useProjects';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysWithTxData';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  replay: ReplayListRecord | ReplayListRecordWithTx;\n};\n\nexport function SessionCell({\n  eventView,\n  organization,\n  referrer,\n  replay,\n}: Props & {eventView: EventView; organization: Organization; referrer: string}) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.project_id);\n\n  return (\n    <UserBadge\n      avatarSize={32}\n      displayName={\n        <Link\n          to={{\n            pathname: `/organizations/${organization.slug}/replays/${project?.slug}:${replay.id}/`,\n            query: {\n              referrer,\n              ...eventView.generateQueryStringObject(),\n            },\n          }}\n        >\n          {replay.user.display_name || ''}\n        </Link>\n      }\n      user={{\n        username: replay.user.display_name || '',\n        email: replay.user.email || '',\n        id: replay.user.id || '',\n        ip_address: replay.user.ip || '',\n        name: replay.user.username || '',\n      }}\n      // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n      displayEmail={<StringWalker urls={replay.urls} />}\n    />\n  );\n}\n\nexport function ProjectCell({replay}: Props) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.project_id);\n\n  return (\n    <Item>{project ? <ProjectBadge project={project} avatarSize={16} /> : null}</Item>\n  );\n}\n\nexport function TransactionCell({\n  organization,\n  replay,\n}: Props & {organization: Organization}) {\n  const location = useLocation();\n\n  const hasTxEvent = 'txEvent' in replay;\n  const txDuration = hasTxEvent ? replay.txEvent?.['transaction.duration'] : undefined;\n  return hasTxEvent ? (\n    <SpanOperationBreakdown>\n      {txDuration ? <div>{txDuration}ms</div> : null}\n      {spanOperationRelativeBreakdownRenderer(\n        replay.txEvent,\n        {\n          organization,\n          location,\n        },\n        {\n          enableOnClick: false,\n        }\n      )}\n    </SpanOperationBreakdown>\n  ) : null;\n}\n\nexport function StartedAtCell({replay}: Props) {\n  return (\n    <Item>\n      <TimeSince date={replay.started_at} />\n    </Item>\n  );\n}\n\nexport function DurationCell({replay}: Props) {\n  return (\n    <Item>\n      <Duration seconds={replay.duration.asSeconds()} exact abbreviation />\n    </Item>\n  );\n}\n\nexport function ErrorCountCell({replay}: Props) {\n  return <Item data-test-id=\"replay-table-count-errors\">{replay.count_errors || 0}</Item>;\n}\n\nexport function ActivityCell({replay}: Props) {\n  const scoreBarPalette = new Array(10).fill([CHART_PALETTE[0][0]]);\n  return (\n    <Item>\n      <ScoreBar\n        size={20}\n        score={replay?.activity ?? 1}\n        palette={scoreBarPalette}\n        radius={0}\n      />\n    </Item>\n  );\n}\n\nconst Item = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst SpanOperationBreakdown = styled('div')`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: ${space(0.5)};\n  color: ${p => p.theme.gray500};\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-align: right;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {PanelTable} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysWithTxData';\nimport HeaderCell from 'sentry/views/replays/replayTable/headerCell';\nimport {\n  ActivityCell,\n  DurationCell,\n  ErrorCountCell,\n  ProjectCell,\n  SessionCell,\n  StartedAtCell,\n  TransactionCell,\n} from 'sentry/views/replays/replayTable/tableCell';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  fetchError: undefined | Error;\n  isFetching: boolean;\n  replays: undefined | ReplayListRecord[] | ReplayListRecordWithTx[];\n  sort: Sort | undefined;\n  visibleColumns: Array<keyof typeof ReplayColumns>;\n};\n\nfunction ReplayTable({fetchError, isFetching, replays, sort, visibleColumns}: Props) {\n  const routes = useRoutes();\n  const location = useLocation();\n  const organization = useOrganization();\n\n  const tableHeaders = visibleColumns.map(column => (\n    <HeaderCell key={column} column={column} sort={sort} />\n  ));\n\n  if (fetchError && !isFetching) {\n    return (\n      <StyledPanelTable\n        headers={tableHeaders}\n        isLoading={false}\n        visibleColumns={visibleColumns}\n      >\n        <StyledAlert type=\"error\" showIcon>\n          {typeof fetchError === 'string'\n            ? fetchError\n            : t(\n                'Sorry, the list of replays could not be loaded. This could be due to invalid search parameters or an internal systems error.'\n              )}\n        </StyledAlert>\n      </StyledPanelTable>\n    );\n  }\n\n  const referrer = getRouteStringFromRoutes(routes);\n  const eventView = EventView.fromLocation(location);\n\n  return (\n    <StyledPanelTable\n      headers={tableHeaders}\n      isEmpty={replays?.length === 0}\n      isLoading={isFetching}\n      visibleColumns={visibleColumns}\n    >\n      {replays?.map(replay => {\n        return (\n          <Fragment key={replay.id}>\n            {visibleColumns.map(column => {\n              switch (column) {\n                case ReplayColumns.session:\n                  return (\n                    <SessionCell\n                      key=\"session\"\n                      replay={replay}\n                      eventView={eventView}\n                      organization={organization}\n                      referrer={referrer}\n                    />\n                  );\n                case ReplayColumns.projectId:\n                  return <ProjectCell key=\"projectId\" replay={replay} />;\n                case ReplayColumns.slowestTransaction:\n                  return (\n                    <TransactionCell\n                      key=\"slowestTransaction\"\n                      replay={replay}\n                      organization={organization}\n                    />\n                  );\n                case ReplayColumns.startedAt:\n                  return <StartedAtCell key=\"startedAt\" replay={replay} />;\n                case ReplayColumns.duration:\n                  return <DurationCell key=\"duration\" replay={replay} />;\n                case ReplayColumns.countErrors:\n                  return <ErrorCountCell key=\"countErrors\" replay={replay} />;\n                case ReplayColumns.activity:\n                  return <ActivityCell key=\"activity\" replay={replay} />;\n                default:\n                  return null;\n              }\n            })}\n          </Fragment>\n        );\n      })}\n    </StyledPanelTable>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)<{\n  visibleColumns: Array<keyof typeof ReplayColumns>;\n}>`\n  grid-template-columns: ${p =>\n    p.visibleColumns\n      .map(column => (column === 'session' ? 'minmax(100px, 1fr)' : 'max-content'))\n      .join(' ')};\n`;\n\nconst StyledAlert = styled(Alert)`\n  border-radius: 0;\n  border-width: 1px 0 0 0;\n  grid-column: 1/-1;\n  margin-bottom: 0;\n`;\n\nexport default ReplayTable;\n","export enum ReplayColumns {\n  activity = 'activity',\n  countErrors = 'countErrors',\n  duration = 'duration',\n  projectId = 'projectId',\n  session = 'session',\n  slowestTransaction = 'slowestTransaction',\n  startedAt = 'startedAt',\n}\n"],"names":["DEFAULT_SORT","REPLAY_LIST_FIELDS","async","api","organization","location","eventView","path","slug","data","_textStatus","resp","requestPromise","includeAllArgs","query","getEventsAPIPayload","cursor","fetchError","undefined","pageLinks","getResponseHeader","replays","map","mapResponseToReplayRecord","error","responseJSON","detail","Sentry","useApi","setData","useState","isFetching","loadReplays","useCallback","clear","prev","response","fetchReplayList","useEffect","SortableHeader","props","useLocation","useOrganization","sort","label","tooltip","Header","StyledQuestionTooltip","size","position","title","fieldName","arrowDirection","kind","sortArrow","color","direction","SortLink","role","field","endsWith","onClick","column","trackAdvancedAnalyticsEvent","to","pathname","Link","QuestionTooltip","space","ReplayColumns","t","SessionCell","referrer","replay","projects","useProjects","project","find","p","id","project_id","avatarSize","displayName","generateQueryStringObject","user","display_name","username","email","ip_address","ip","name","displayEmail","urls","ProjectCell","Item","TransactionCell","hasTxEvent","txDuration","txEvent","SpanOperationBreakdown","spanOperationRelativeBreakdownRenderer","enableOnClick","StartedAtCell","date","started_at","DurationCell","seconds","duration","asSeconds","exact","abbreviation","ErrorCountCell","count_errors","ActivityCell","scoreBarPalette","Array","fill","CHART_PALETTE","score","activity","palette","radius","theme","gray500","fontSizeMedium","ReplayTable","visibleColumns","routes","useRoutes","tableHeaders","StyledPanelTable","headers","isLoading","StyledAlert","type","showIcon","getRouteStringFromRoutes","EventView","isEmpty","length","Fragment","PanelTable","join","Alert"],"sourceRoot":""}