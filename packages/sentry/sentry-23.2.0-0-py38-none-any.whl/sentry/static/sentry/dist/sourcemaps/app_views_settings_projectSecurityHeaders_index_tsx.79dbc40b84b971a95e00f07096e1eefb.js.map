{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"scAWO,MAAMA,GAAgB,OAAO,KAAI,oBAAX,CAAY,qEAK5BC,EAAmB,IAA6B,IAA5B,QAACC,EAAO,MAAEC,GAAa,EACtD,OACE,QAAC,EAAAC,SAAQ,YACP,QAACC,EAAG,UAAEH,KACN,QAACI,EAAK,UAAEH,MACC,EALFF,EAAgB,+BAS7B,MAAMM,EAAe,QAAC,MAACC,GAAsB,QAAM,gBACtCA,EAAMC,8BACRC,EAAAA,EAAAA,GAAM,QAAQA,EAAAA,EAAAA,GAAM,qDAG7BC,GAAKA,EAAEH,MAAMI,iEAEOJ,EAAMK,2BAE3B,EAEKR,GAAM,OAAO,KAAI,oBAAX,CACRE,EAAY,WACLI,GAAKA,EAAEH,MAAMM,WAAS,KAG3BR,GAAQ,OAAO,KAAI,oBAAX,CACVC,EAAY,WACLI,GAAKA,EAAEH,MAAMO,SAAO,qB,0DC/B/B,QAZA,SACEC,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,wPCJe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,ivBCkB9B,MAAMO,UAA+BP,EAAAA,EACnCQ,eACE,MAAM,aAACC,GAAgBJ,KAAKK,OACtB,UAACC,GAAaN,KAAKK,MAAME,OAE/B,MAAO,CAAC,CAAC,UAAY,aAAYH,EAAaI,QAAQF,WACxD,CAEAT,WACE,MAAM,UAACS,GAAaN,KAAKK,MAAME,OAC/B,OAAOE,EAAAA,EAAAA,IAAcC,EAAAA,EAAAA,GAAE,oBAAqBJ,GAAW,EACzD,CAEAK,aACE,MAAO,CACL,CACEC,KAAM,gCACNC,KAAKC,EAAAA,EAAAA,GAAc,OAAQd,KAAKK,QAElC,CACEO,KAAM,uCACNC,KAAKC,EAAAA,EAAAA,GAAc,aAAcd,KAAKK,QAExC,CACEO,KAAM,iCACNC,KAAKC,EAAAA,EAAAA,GAAc,QAASd,KAAKK,QAGvC,CAEAU,aACE,MAAM,aAACX,EAAY,OAAEG,GAAUP,KAAKK,OAC9B,QAACW,GAAWhB,KAAKiB,MACvB,OAAgB,OAAZD,EACK,MAIP,0BACE,QAAC,IAAkB,CAACjB,OAAOW,EAAAA,EAAAA,GAAE,8BAE7B,QAAC,IAAS,CACRM,QAASA,EACTV,UAAWC,EAAOD,UAClBY,MAAOd,EAAaI,QAGtB,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEE,EAAAA,EAAAA,GAAE,+BAChB,QAAC,IAAS,CAACS,aAAW,aACpB,QAAC,IAAS,CAACC,MAAO,CAACC,aAAc,IAAI,UAClCC,EAAAA,EAAAA,IACC,uHACA,CACEC,WAAW,yBAAM,oBAIvB,QAAC,IAAa,YACZ,QAAC,IAAgB,CACfhD,QAAQ,qBACRC,OAAOkC,EAAAA,EAAAA,GAAE,8CAEX,QAAC,IAAgB,CACfnC,QAAQ,iBACRC,OAAOkC,EAAAA,EAAAA,GAAE,+CAMjB,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEA,EAAAA,EAAAA,GAAE,wBAChB,QAAC,IAAS,UACPV,KAAKW,aAAaa,KAAI,QAAC,KAACZ,EAAI,IAAEC,GAAI,SACjC,QAACY,EAAU,YACT,QAACC,EAAU,UAAEd,KACb,QAAC,KAAM,CAACe,GAAId,EAAKe,SAAS,UAAS,UAChClB,EAAAA,EAAAA,GAAE,oBAHUG,EAKJ,WAMzB,EAGF,SAAegB,EAAAA,EAAAA,GAAiB3B,GAE1BuB,GAAa,OAAOK,EAAAA,GAAS,qBAAhB,CAAiB,4EAK9BJ,GAAa,OAAO,OAAM,qBAAb,CAAc,0C,gbChHjC,MAAMK,EAAmB,kDAElB,SAASC,EAAehB,GAC7B,MAAMiB,EAAWjB,EAAQkB,OAASlB,EAAQ,GAAGmB,IAAIC,SAAWL,EAC5D,OAAOM,EAAAA,EAAAA,GAAe,CACpB7D,MAAOyD,EACPK,MAAOP,GAEX,CAQe,SAASQ,EAAU,GAAoC,IAApC,QAACvB,EAAO,MAAEE,EAAK,UAAEZ,GAAiB,EAClE,OACE,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEI,EAAAA,EAAAA,GAAE,iBAChB,QAAC,IAAS,YACR,QAAC,KAAU,CAAC8B,KAAK,OAAM,UACpBlB,EAAAA,EAAAA,IACC,sFACA,CACEmB,MAAM,QAAC,IAAI,CAACd,GAAK,aAAYT,cAAkBZ,iBAIrD,QAAC,IAAU,CAACoC,QAAQ,EAAOC,0BAAwB,YACjD,QAAC,IAAa,UAAEX,EAAehB,YAKzC,CAnBwBuB,EAAS,uB","sources":["webpack:///./app/components/keyValueTable.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/index.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nexport const KeyValueTableRow = ({keyName, value}: Props) => {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n};\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${p => p.theme.overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {KeyValueTable, KeyValueTableRow} from 'sentry/components/keyValueTable';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, ProjectKey} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport ReportUri from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectSecurityHeaders extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    return [['keyList', `/projects/${organization.slug}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Security Headers'), projectId, false);\n  }\n\n  getReports() {\n    return [\n      {\n        name: 'Content Security Policy (CSP)',\n        url: recreateRoute('csp/', this.props),\n      },\n      {\n        name: 'Certificate Transparency (Expect-CT)',\n        url: recreateRoute('expect-ct/', this.props),\n      },\n      {\n        name: 'HTTP Public Key Pinning (HPKP)',\n        url: recreateRoute('hpkp/', this.props),\n      },\n    ];\n  }\n\n  renderBody() {\n    const {organization, params} = this.props;\n    const {keyList} = this.state;\n    if (keyList === null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Security Header Reports')} />\n\n        <ReportUri\n          keyList={keyList}\n          projectId={params.projectId}\n          orgId={organization.slug}\n        />\n\n        <Panel>\n          <PanelHeader>{t('Additional Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextBlock style={{marginBottom: 20}}>\n              {tct(\n                'In addition to the [key_param] parameter, you may also pass the following within the querystring for the report URI:',\n                {\n                  key_param: <code>sentry_key</code>,\n                }\n              )}\n            </TextBlock>\n            <KeyValueTable>\n              <KeyValueTableRow\n                keyName=\"sentry_environment\"\n                value={t('The environment name (e.g. production).')}\n              />\n              <KeyValueTableRow\n                keyName=\"sentry_release\"\n                value={t('The version of the application.')}\n              />\n            </KeyValueTable>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Supported Formats')}</PanelHeader>\n          <PanelBody>\n            {this.getReports().map(({name, url}) => (\n              <ReportItem key={url}>\n                <HeaderName>{name}</HeaderName>\n                <Button to={url} priority=\"primary\">\n                  {t('Instructions')}\n                </Button>\n              </ReportItem>\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectSecurityHeaders);\n\nconst ReportItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst HeaderName = styled('span')`\n  font-size: 1.2em;\n`;\n","import FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <FieldGroup inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["KeyValueTable","KeyValueTableRow","keyName","value","Fragment","Key","Value","commonStyles","theme","fontSizeMedium","space","p","overflowEllipsis","backgroundSecondary","textColor","subText","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ProjectSecurityHeaders","getEndpoints","organization","props","projectId","params","slug","routeTitleGen","t","getReports","name","url","recreateRoute","renderBody","keyList","state","orgId","withPadding","style","marginBottom","tct","key_param","map","ReportItem","HeaderName","to","priority","withOrganization","PanelItem","DEFAULT_ENDPOINT","getSecurityDsn","endpoint","length","dsn","security","getDynamicText","fixed","ReportUri","type","link","inline","flexibleControlStateSize"],"sourceRoot":""}