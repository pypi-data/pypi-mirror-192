{"version":3,"file":"chunks/app_views_settings_project_projectUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yNAGO,MAAMA,EAAQ,sDAqBrB,EAnBqC,CACnC,CAEEC,MAAO,WACPC,OAAQ,CACN,CACEC,KAAM,oBACNC,KAAM,UAGNC,MAAO,uBACPC,YAAa,6BACbC,KAAM,kHACNC,QAASC,IAAQ,CAAEC,QAASD,O,0DCNpC,QAZA,SACEE,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,wPCJe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACnB,MAAOoB,KAAKF,WAAW,SACzCE,KAAKC,mBAGZ,EAdmBL,EAAS,uB,62BCmB9B,MAAMM,UAAoCN,EAAAA,EAAiB,oEACrBO,IAAS,2BAkC/B,KACZC,EAAAA,GAAwB,CAEtBC,QAAS,oCACT,GACH,CArCDC,oBACEC,OAAOC,oBAAsB,SAAUC,GAGrCA,EAAMC,OAAS,SAAUC,GACvBX,KAAKY,mBAAoB,EACzBL,OAAOM,YAAW,KAChBb,KAAKY,mBAAoB,EACzBZ,KAAKc,WAAW,GACf,IACL,CACF,CACF,CAEAC,uBACER,OAAOC,oBAAsB,IAC/B,CAEAQ,eACE,MAAM,aAACC,GAAgBjB,KAAKkB,OACtB,UAACC,GAAanB,KAAKkB,MAAME,OAC/B,MAAO,CACL,CAAC,UAAY,aAAYH,EAAaI,QAAQF,WAC9C,CAAC,UAAY,aAAYF,EAAaI,QAAQF,MAElD,CAEArB,WACE,MAAM,UAACqB,GAAanB,KAAKkB,MAAME,OAC/B,OAAOE,EAAAA,EAAAA,IAAcC,EAAAA,EAAAA,GAAE,iBAAkBJ,GAAW,EACtD,CASAK,aACE,MAAM,aAACP,GAAgBjB,KAAKkB,OACtB,UAACC,GAAanB,KAAKkB,MAAME,OAE/B,OACE,0BACE,QAAC,IAAkB,CAACxC,OAAO2C,EAAAA,EAAAA,GAAE,oBAC7B,QAAC,IAAS,WACPA,EAAAA,EAAAA,GACE,mNAKL,QAAC,IAAS,WACPA,EAAAA,EAAAA,GACE,kMAKL,QAACE,EAAU,YACT,QAAC,KAAM,CAACC,UAAQ,EAACC,KAAK,gDAA+C,UAClEJ,EAAAA,EAAAA,GAAE,oBAEL,QAAC,KAAM,CAACK,SAAS,UAAUC,QAAS7B,KAAK8B,YAAY,UAClDP,EAAAA,EAAAA,GAAE,gCAIP,QAAC,IAAI,CACHQ,YAAU,EACVC,UAAU,MACVC,YAAc,aAAYhB,EAAaI,QAAQF,KAC/Ce,YAAalC,KAAKmC,MAAMC,QAAQ/C,QAAQ,UAExC,QAAC,IAAM,CAACgD,OAAQ,CAAC,iBAAiB,SAC/B,QAAC,UAACC,GAAU,SAAK,QAAC,IAAQ,CAACC,UAAWD,EAAWE,MAAOC,EAAAA,SAAc,QAKjF,EAGF,MAAMhB,GAAa,OAAO,MAAK,qBAAZ,CAAa,kDAGvBiB,EAAAA,EAAAA,GAAM,GAAE,mBACEA,EAAAA,EAAAA,GAAM,GAAE,KAG3B,GAAeC,EAAAA,EAAAA,GAAiBzC,E","sources":["webpack:///./app/data/forms/userFeedback.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectUserFeedback.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/user-feedback/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'feedback:branding',\n        type: 'boolean',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Show Sentry Branding',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Show \"powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Access from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport formGroups from 'sentry/data/forms/userFeedback';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype RouteParams = {\n  projectId: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\nclass ProjectUserFeedbackSettings extends AsyncView<Props> {\n  submitTimeout: number | undefined = undefined;\n\n  componentDidMount() {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        window.setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${organization.slug}/${projectId}/keys/`],\n      ['project', `/projects/${organization.slug}/${projectId}/`],\n    ];\n  }\n\n  getTitle(): string {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('User Feedback'), projectId, false);\n  }\n\n  handleClick = () => {\n    Sentry.showReportDialog({\n      // should never make it to the Sentry API, but just in case, use throwaway id\n      eventId: '00000000000000000000000000000000',\n    });\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('User Feedback')} />\n        <TextBlock>\n          {t(\n            `Don't rely on stack traces and graphs alone to understand\n            the cause and impact of errors. Enable User Feedback to collect\n            your users' comments when they encounter a crash or bug.`\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            `When configured, your users will be presented with a dialog prompting\n            them for additional information. That information will get attached to\n            the issue in Sentry.`\n          )}\n        </TextBlock>\n        <ButtonList>\n          <Button external href=\"https://docs.sentry.io/product/user-feedback/\">\n            {t('Read the docs')}\n          </Button>\n          <Button priority=\"primary\" onClick={this.handleClick}>\n            {t('Open the report dialog')}\n          </Button>\n        </ButtonList>\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint={`/projects/${organization.slug}/${projectId}/`}\n          initialData={this.state.project.options}\n        >\n          <Access access={['project:write']}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst ButtonList = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(ProjectUserFeedbackSettings);\n"],"names":["route","title","fields","name","type","label","placeholder","help","getData","data","options","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","ProjectUserFeedbackSettings","undefined","Sentry","eventId","componentDidMount","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","componentWillUnmount","getEndpoints","organization","props","projectId","params","slug","routeTitleGen","t","renderBody","ButtonList","external","href","priority","onClick","handleClick","saveOnBlur","apiMethod","apiEndpoint","initialData","state","project","access","hasAccess","disabled","forms","formGroups","space","withOrganization"],"sourceRoot":""}