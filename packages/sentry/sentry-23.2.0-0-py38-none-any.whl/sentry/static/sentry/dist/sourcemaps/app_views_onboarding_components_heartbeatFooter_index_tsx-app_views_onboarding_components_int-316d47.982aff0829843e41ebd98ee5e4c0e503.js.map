{"version":3,"file":"chunks/app_views_onboarding_components_heartbeatFooter_index_tsx-app_views_onboarding_components_int-316d47.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/onboarding/components/genericFooter.tsx","webpack:///./app/views/onboarding/components/heartbeatFooter/index.tsx","webpack:///./app/views/onboarding/components/heartbeatFooter/useHeartbeat.tsx","webpack:///./app/views/onboarding/components/integrations/addInstallationInstructions.tsx","webpack:///./app/views/onboarding/components/integrations/postInstallCodeSnippet.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx","webpack:///./app/views/settings/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/settings/organizationIntegrations/addIntegrationButton.tsx","webpack:///../node_modules/lodash/_baseMean.js","webpack:///../node_modules/lodash/_baseSum.js","webpack:///../node_modules/lodash/mean.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport {motion} from 'framer-motion';\n\nimport testableTransition from 'sentry/utils/testableTransition';\n\nconst GenericFooter = styled(motion.div)`\n  width: 100%;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  height: 72px;\n  z-index: 100;\n  display: flex;\n  background-color: ${p => p.theme.background};\n  justify-content: space-between;\n  box-shadow: 0px -4px 24px rgba(43, 34, 51, 0.08);\n`;\n\nGenericFooter.defaultProps = {\n  initial: 'initial',\n  animate: 'animate',\n  exit: 'exit',\n  variants: {animate: {}},\n  transition: testableTransition({\n    staggerChildren: 0.2,\n  }),\n};\n\nexport default GenericFooter;\n","import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport IdBadge from 'sentry/components/idBadge';\nimport Placeholder from 'sentry/components/placeholder';\nimport {usingCustomerDomain} from 'sentry/constants';\nimport {IconCheckmark} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport PreferencesStore from 'sentry/stores/preferencesStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport pulsingIndicatorStyles from 'sentry/styles/pulsingIndicator';\nimport {space} from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport GenericFooter from '../genericFooter';\n\nimport {useHeartbeat} from './useHeartbeat';\n\nenum BeatStatus {\n  AWAITING = 'awaiting',\n  PENDING = 'pending',\n  COMPLETE = 'complete',\n}\n\nasync function openChangeRouteModal(\n  router: RouteComponentProps<{}, {}>['router'],\n  nextLocation: Location\n) {\n  const mod = await import(\n    'sentry/views/onboarding/components/heartbeatFooter/changeRouteModal'\n  );\n  const {ChangeRouteModal} = mod;\n\n  openModal(deps => (\n    <ChangeRouteModal {...deps} router={router} nextLocation={nextLocation} />\n  ));\n}\n\ntype Props = Pick<RouteComponentProps<{}, {}>, 'router' | 'route' | 'location'> & {\n  projectSlug: Project['slug'];\n  newOrg?: boolean;\n};\n\nexport function HeartbeatFooter({projectSlug, router, route, location, newOrg}: Props) {\n  const organization = useOrganization();\n  const preferences = useLegacyStore(PreferencesStore);\n\n  const {initiallyLoaded, fetchError, fetching, projects} = useProjects({\n    orgId: organization.id,\n    slugs: [projectSlug],\n  });\n\n  const projectsLoading = !initiallyLoaded && fetching;\n\n  const project =\n    !projectsLoading && !fetchError && projects.length\n      ? projects.find(proj => proj.slug === projectSlug)\n      : undefined;\n\n  const {\n    loading,\n    firstErrorReceived,\n    firstTransactionReceived,\n    sessionReceived,\n    serverConnected,\n  } = useHeartbeat(project?.slug, project?.id);\n\n  useEffect(() => {\n    const onUnload = (nextLocation?: Location) => {\n      const {orgId, platform, projectId} = router.params;\n\n      let isSetupDocsForNewOrg =\n        location.pathname === `/onboarding/setup-docs/` &&\n        nextLocation?.pathname !== `/onboarding/setup-docs/`;\n\n      let isGettingStartedForExistingOrg =\n        location.pathname === `/projects/${projectId}/getting-started/${platform}/` ||\n        location.pathname === `/getting-started/${projectId}/${platform}/`;\n\n      let isSetupDocsForNewOrgBackButton = `/onboarding/select-platform/`;\n      let isWelcomeForNewOrgBackButton = `/onboarding/welcome/`;\n\n      if (!usingCustomerDomain) {\n        isSetupDocsForNewOrg =\n          location.pathname === `/onboarding/${organization.slug}/setup-docs/` &&\n          nextLocation?.pathname !== `/onboarding/${organization.slug}/setup-docs/`;\n\n        isGettingStartedForExistingOrg =\n          location.pathname === `/${orgId}/${projectId}/getting-started/${platform}/` ||\n          location.pathname === `/organizations/${orgId}/${projectId}/getting-started/`;\n\n        isSetupDocsForNewOrgBackButton = `/onboarding/${organization.slug}/select-platform/`;\n        isWelcomeForNewOrgBackButton = `/onboarding/${organization.slug}/welcome/`;\n      }\n\n      if (isSetupDocsForNewOrg || isGettingStartedForExistingOrg) {\n        // TODO(Priscila): I have to adjust this to check for all selected projects in the onboarding of new orgs\n        if (serverConnected && firstErrorReceived) {\n          return true;\n        }\n\n        // Next Location is always available when user clicks on a item with a new route\n        if (nextLocation) {\n          // Back button in the onboarding of new orgs\n          if (\n            nextLocation.pathname === isSetupDocsForNewOrgBackButton ||\n            nextLocation.pathname === isWelcomeForNewOrgBackButton\n          ) {\n            return true;\n          }\n\n          if (nextLocation.query.setUpRemainingOnboardingTasksLater) {\n            return true;\n          }\n\n          openChangeRouteModal(router, nextLocation);\n          return false;\n        }\n\n        return true;\n      }\n\n      return true;\n    };\n\n    router.setRouteLeaveHook(route, onUnload);\n  }, [serverConnected, firstErrorReceived, route, router, organization.slug, location]);\n\n  useEffect(() => {\n    if (loading || !serverConnected) {\n      return;\n    }\n\n    addSuccessMessage(t('SDK Connected'));\n  }, [serverConnected, loading]);\n\n  useEffect(() => {\n    if (loading || !sessionReceived) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('heartbeat.onboarding_session_received', {\n      organization,\n      new_organization: !!newOrg,\n    });\n  }, [sessionReceived, loading, newOrg, organization]);\n\n  useEffect(() => {\n    if (loading || !firstTransactionReceived) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('heartbeat.onboarding_first_transaction_received', {\n      organization,\n      new_organization: !!newOrg,\n    });\n  }, [firstTransactionReceived, loading, newOrg, organization]);\n  useEffect(() => {\n    if (loading || !firstErrorReceived) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('heartbeat.onboarding_first_error_received', {\n      organization,\n      new_organization: !!newOrg,\n    });\n\n    addSuccessMessage(t('First error received'));\n  }, [firstErrorReceived, loading, newOrg, organization]);\n\n  return (\n    <Wrapper newOrg={!!newOrg} sidebarCollapsed={!!preferences.collapsed}>\n      <PlatformIconAndName>\n        {projectsLoading ? (\n          <LoadingPlaceholder height=\"28px\" width=\"276px\" />\n        ) : (\n          <IdBadge\n            project={project}\n            displayPlatformName\n            avatarSize={28}\n            hideOverflow\n            disableLink\n          />\n        )}\n      </PlatformIconAndName>\n      <Beats>\n        {loading ? (\n          <Fragment>\n            <LoadingPlaceholder height=\"28px\" width=\"160px\" />\n            <LoadingPlaceholder height=\"28px\" width=\"160px\" />\n          </Fragment>\n        ) : firstErrorReceived ? (\n          <Fragment>\n            <Beat status={BeatStatus.COMPLETE}>\n              <IconCheckmark size=\"sm\" isCircled />\n              {t('DSN response received')}\n            </Beat>\n            <Beat status={BeatStatus.COMPLETE}>\n              <IconCheckmark size=\"sm\" isCircled />\n              {t('First error received')}\n            </Beat>\n          </Fragment>\n        ) : serverConnected ? (\n          <Fragment>\n            <Beat status={BeatStatus.COMPLETE}>\n              <IconCheckmark size=\"sm\" isCircled />\n              {t('DSN response received')}\n            </Beat>\n            <Beat status={BeatStatus.AWAITING}>\n              <PulsingIndicator>2</PulsingIndicator>\n              {t('Awaiting first error')}\n            </Beat>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Beat status={BeatStatus.AWAITING}>\n              <PulsingIndicator>1</PulsingIndicator>\n              {t('Awaiting DSN response')}\n            </Beat>\n            <Beat status={BeatStatus.PENDING}>\n              <PulsingIndicator>2</PulsingIndicator>\n              {t('Awaiting first error')}\n            </Beat>\n          </Fragment>\n        )}\n      </Beats>\n      <Actions>\n        <ButtonBar gap={1}>\n          {newOrg ? (\n            <Fragment>\n              {loading ? (\n                <LoadingPlaceholderButton width=\"135px\" />\n              ) : firstErrorReceived ? (\n                <Button\n                  priority=\"primary\"\n                  busy={projectsLoading}\n                  to={`/organizations/${organization.slug}/issues/${\n                    firstErrorReceived &&\n                    firstErrorReceived !== true &&\n                    'id' in firstErrorReceived\n                      ? `${firstErrorReceived.id}/`\n                      : ''\n                  }?referrer=onboarding-first-event-footer`}\n                  onClick={() => {\n                    trackAdvancedAnalyticsEvent(\n                      'heartbeat.onboarding_go_to_my_error_button_clicked',\n                      {\n                        organization,\n                        new_organization: !!newOrg,\n                      }\n                    );\n                  }}\n                >\n                  {t('Go to my error')}\n                </Button>\n              ) : (\n                <Button\n                  priority=\"primary\"\n                  busy={projectsLoading}\n                  to={`/organizations/${organization.slug}/issues/`} // TODO(Priscila): See what Jesse meant with 'explore sentry'. What should be the expected action?\n                  onClick={() => {\n                    trackAdvancedAnalyticsEvent(\n                      'heartbeat.onboarding_explore_sentry_button_clicked',\n                      {organization}\n                    );\n                  }}\n                >\n                  {t('Explore Sentry')}\n                </Button>\n              )}\n            </Fragment>\n          ) : (\n            <Fragment>\n              <Button\n                busy={projectsLoading}\n                to={{\n                  pathname: `/organizations/${organization.slug}/performance/`,\n                  query: {project: project?.id},\n                }}\n                onClick={() => {\n                  trackAdvancedAnalyticsEvent(\n                    'heartbeat.onboarding_go_to_performance_button_clicked',\n                    {organization}\n                  );\n                }}\n              >\n                {t('Go to Performance')}\n              </Button>\n              {firstErrorReceived ? (\n                <Button\n                  priority=\"primary\"\n                  busy={projectsLoading}\n                  to={`/organizations/${organization.slug}/issues/${\n                    firstErrorReceived &&\n                    firstErrorReceived !== true &&\n                    'id' in firstErrorReceived\n                      ? `${firstErrorReceived.id}/`\n                      : ''\n                  }`}\n                  onClick={() => {\n                    trackAdvancedAnalyticsEvent(\n                      'heartbeat.onboarding_go_to_my_error_button_clicked',\n                      {\n                        organization,\n                        new_organization: !!newOrg,\n                      }\n                    );\n                  }}\n                >\n                  {t('Go to my error')}\n                </Button>\n              ) : (\n                <Button\n                  priority=\"primary\"\n                  busy={projectsLoading}\n                  to={{\n                    pathname: `/organizations/${organization.slug}/issues/`,\n                    query: {project: project?.id},\n                    hash: '#welcome',\n                  }}\n                  onClick={() => {\n                    trackAdvancedAnalyticsEvent(\n                      'heartbeat.onboarding_go_to_issues_button_clicked',\n                      {organization}\n                    );\n                  }}\n                >\n                  {t('Go to Issues')}\n                </Button>\n              )}\n            </Fragment>\n          )}\n        </ButtonBar>\n      </Actions>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled(GenericFooter)<{newOrg: boolean; sidebarCollapsed: boolean}>`\n  display: none;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  padding: ${space(2)} ${space(4)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    align-items: center;\n    gap: ${space(3)};\n  }\n  ${p =>\n    !p.newOrg &&\n    css`\n      @media (min-width: ${p.theme.breakpoints.medium}) {\n        width: calc(\n          100% -\n            ${p.theme.sidebar[p.sidebarCollapsed ? 'collapsedWidth' : 'expandedWidth']}\n        );\n        right: 0;\n        left: auto;\n      }\n    `}\n`;\n\nconst PlatformIconAndName = styled('div')`\n  display: none;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    max-width: 100%;\n    overflow: hidden;\n    width: 100%;\n    display: block;\n  }\n`;\n\nconst Beats = styled('div')`\n  display: none;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    gap: ${space(2)};\n    display: grid;\n    grid-template-columns: repeat(2, max-content);\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst LoadingPlaceholder = styled(Placeholder)`\n  width: ${p => p.width ?? '100%'};\n`;\n\nconst LoadingPlaceholderButton = styled(LoadingPlaceholder)`\n  height: ${p => p.theme.form.md.height}px;\n`;\n\nconst PulsingIndicator = styled('div')`\n  ${pulsingIndicatorStyles};\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  color: ${p => p.theme.white};\n  height: 16px;\n  width: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  :before {\n    top: auto;\n    left: auto;\n  }\n`;\n\nconst Beat = styled('div')<{status: BeatStatus}>`\n  width: 160px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.pink300};\n\n  ${p =>\n    p.status === BeatStatus.PENDING &&\n    css`\n      color: ${p.theme.disabled};\n      ${PulsingIndicator} {\n        background: ${p.theme.disabled};\n        :before {\n          content: none;\n        }\n      }\n    `}\n\n  ${p =>\n    p.status === BeatStatus.COMPLETE &&\n    css`\n      color: ${p.theme.successText};\n      ${PulsingIndicator} {\n        background: ${p.theme.success};\n        :before {\n          content: none;\n        }\n      }\n    `}\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n","import {useState} from 'react';\n\nimport {\n  Group,\n  Project,\n  SessionApiResponse,\n  SessionFieldWithOperation,\n} from 'sentry/types';\nimport {useQuery} from 'sentry/utils/queryClient';\nimport {getCount} from 'sentry/utils/sessions';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nconst DEFAULT_POLL_INTERVAL = 5000;\n\nexport function useHeartbeat(\n  projectSlug: string | undefined,\n  projectId: string | undefined\n) {\n  const organization = useOrganization();\n\n  const [firstError, setFirstError] = useState<string | null>(null);\n  const [firstTransactionReceived, setFirstTransactionReceived] = useState(false);\n  const [sessionReceived, setSessionReceived] = useState(false);\n  const [firstIssue, setFirstIssue] = useState<Group | undefined>(undefined);\n\n  const serverConnected = sessionReceived || firstTransactionReceived;\n\n  const {isLoading: eventIsLoading} = useQuery<Project>(\n    [`/projects/${organization.slug}/${projectSlug}/`],\n    {\n      staleTime: 0,\n      refetchInterval: DEFAULT_POLL_INTERVAL,\n      enabled: !!projectSlug && !firstError, // Fetch only if the project is available and we have not yet received an error,\n      onSuccess: data => {\n        setFirstError(data.firstEvent);\n        // When an error is received, a transaction is also received\n        setFirstTransactionReceived(!!data.firstTransactionEvent);\n      },\n    }\n  );\n\n  const {isLoading: sessionIsLoading} = useQuery<SessionApiResponse>(\n    [\n      `/organizations/${organization.slug}/sessions/`,\n      {\n        query: {\n          project: projectId,\n          statsPeriod: '24h',\n          field: [SessionFieldWithOperation.SESSIONS],\n        },\n      },\n    ],\n    {\n      staleTime: 0,\n      refetchInterval: DEFAULT_POLL_INTERVAL,\n      enabled: !!projectId && !serverConnected, // Fetch only if the project is available and we if a connection to Sentry was not yet established,\n      onSuccess: data => {\n        const hasHealthData =\n          getCount(data.groups, SessionFieldWithOperation.SESSIONS) > 0;\n\n        setSessionReceived(hasHealthData);\n      },\n    }\n  );\n\n  // Locate the projects first issue group. The project.firstEvent field will\n  // *not* include sample events, while just looking at the issues list will.\n  // We will wait until the project.firstEvent is set and then locate the\n  // event given that event datetime\n  useQuery<Group[]>([`/projects/${organization.slug}/${projectSlug}/issues/`], {\n    staleTime: 0,\n    enabled: !!firstError && !firstIssue, // Only fetch if an error event is received and we have not yet located the first issue,\n    onSuccess: data => {\n      setFirstIssue(data.find((issue: Group) => issue.firstSeen === firstError));\n    },\n  });\n\n  const firstErrorReceived = firstIssue ?? !!firstError;\n  const loading = eventIsLoading || sessionIsLoading;\n\n  return {\n    loading,\n    serverConnected,\n    firstErrorReceived,\n    firstTransactionReceived,\n    sessionReceived,\n  };\n}\n","import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\n\n// TODO: Make dyanmic for other platforms/integrations\nexport default function AddInstallationInstructions() {\n  return (\n    <Fragment>\n      <p>\n        {tct(\n          'The automated AWS Lambda setup will instrument your Lambda functions with Sentry error and performance monitoring without any code changes. We use CloudFormation Stack ([learnMore]) to create the Sentry role which gives us access to your AWS account.',\n          {\n            learnMore: (\n              <ExternalLink href=\"https://aws.amazon.com/cloudformation/\">\n                {t('Learn more about CloudFormation')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </p>\n      <p>\n        {tct(\n          'Just press the [addInstallation] button below and complete the steps in the popup that opens.',\n          {addInstallation: <strong>{t('Add Installation')}</strong>}\n        )}\n      </p>\n      <p>\n        {tct(\n          'If you don’t want to add CloudFormation stack to your AWS environment, press the [manualSetup] button instead.',\n          {manualSetup: <strong>{t('Manual Setup')}</strong>}\n        )}\n      </p>\n    </Fragment>\n  );\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider} from 'sentry/types';\n\ntype Props = {\n  provider: IntegrationProvider;\n  isOnboarding?: boolean;\n  platform?: PlatformKey;\n};\n\nexport default function PostInstallCodeSnippet({\n  provider,\n  platform,\n  isOnboarding,\n}: Props) {\n  // currently supporting both Python and Node\n  const token_punctuation: string = platform === 'python-awslambda' ? '()' : '();';\n  return (\n    <div>\n      <p>\n        {t(\n          \"Congrats, you just installed the %s integration! Now that it's is installed, the next time you trigger an error it will go to your Sentry.\",\n          provider.name\n        )}\n      </p>\n      <p>\n        {t(\n          'This snippet includes an intentional error, so you can test that everything is working as soon as you set it up:'\n        )}\n      </p>\n      <div>\n        <CodeWrapper>\n          <code>\n            <TokenFunction>myUndefinedFunction</TokenFunction>\n            <TokenPunctuation>{token_punctuation}</TokenPunctuation>)\n          </code>\n        </CodeWrapper>\n      </div>\n      {isOnboarding && (\n        <Fragment>\n          <p>\n            {t(\n              \"If you're new to Sentry, use the email alert to access your account and complete a product tour.\"\n            )}\n          </p>\n          <p>\n            {t(\n              \"If you're an existing user and have disabled alerts, you won't receive this email.\"\n            )}\n          </p>\n        </Fragment>\n      )}\n    </div>\n  );\n}\n\nconst CodeWrapper = styled('pre')`\n  padding: 1em;\n  overflow: auto;\n  background: #251f3d;\n  font-size: 15px;\n`;\n\nconst TokenFunction = styled('span')`\n  color: #7cc5c4;\n`;\n\nconst TokenPunctuation = styled('span')`\n  color: #b3acc1;\n`;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateSampleEventButtonProps = {\n  api: Client;\n  organization: Organization;\n  source: string;\n  project?: Project;\n} & ButtonProps;\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 30;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n\n    await new Promise(resolve => window.setTimeout(resolve, EVENT_POLL_INTERVAL));\n\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends Component<CreateSampleEventButtonProps, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('sample_event.button_viewed', {\n      organization,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}` as const;\n\n    trackAdvancedAnalyticsEvent(eventKey, {\n      organization,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_sample_event', {\n      platform: project.platform,\n      organization,\n    });\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel('warning');\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      normalizeUrl(\n        `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}&referrer=sample-error`\n      )\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n","import {Component} from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {NODE_ENV} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog?.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    // TODO: Would be better if we could mock document.location.origin to '' in\n    // the tests. jsdom's window.postMessage doesn't set an origin\n    if (message.origin !== document.location.origin && NODE_ENV === 'production') {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n","import {Button, ButtonProps} from 'sentry/components/button';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {IntegrationWithConfig} from 'sentry/types';\n\nimport AddIntegration from './addIntegration';\n\ninterface AddIntegrationButtonProps\n  extends Omit<ButtonProps, 'children' | 'analyticsParams'>,\n    Pick<\n      React.ComponentProps<typeof AddIntegration>,\n      'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n    > {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n}\n\nexport function AddIntegrationButton({\n  provider,\n  buttonText,\n  onAddIntegration,\n  organization,\n  reinstall,\n  analyticsParams,\n  modalParams,\n  ...buttonProps\n}: AddIntegrationButtonProps) {\n  const label =\n    buttonText ?? (reinstall ? t('Enable') : t('Add %s', provider.metadata.noun));\n\n  return (\n    <Tooltip\n      disabled={provider.canAdd}\n      title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n    >\n      <AddIntegration\n        provider={provider}\n        onInstall={onAddIntegration}\n        organization={organization}\n        analyticsParams={analyticsParams}\n        modalParams={modalParams}\n      >\n        {onClick => (\n          <Button\n            disabled={!provider.canAdd}\n            {...buttonProps}\n            onClick={() => onClick()}\n            aria-label={t('Add integration')}\n          >\n            {label}\n          </Button>\n        )}\n      </AddIntegration>\n    </Tooltip>\n  );\n}\n","var baseSum = require('./_baseSum');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/**\n * The base implementation of `_.mean` and `_.meanBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the mean.\n */\nfunction baseMean(array, iteratee) {\n  var length = array == null ? 0 : array.length;\n  return length ? (baseSum(array, iteratee) / length) : NAN;\n}\n\nmodule.exports = baseMean;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseMean = require('./_baseMean'),\n    identity = require('./identity');\n\n/**\n * Computes the mean of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the mean.\n * @example\n *\n * _.mean([4, 2, 8, 6]);\n * // => 5\n */\nfunction mean(array) {\n  return baseMean(array, identity);\n}\n\nmodule.exports = mean;\n"],"names":["GenericFooter","motion","p","theme","background","defaultProps","initial","animate","exit","variants","transition","testableTransition","staggerChildren","BeatStatus","HeartbeatFooter","projectSlug","router","route","location","newOrg","organization","useOrganization","preferences","useLegacyStore","PreferencesStore","initiallyLoaded","fetchError","fetching","projects","useProjects","orgId","id","slugs","projectsLoading","project","length","undefined","find","proj","slug","loading","firstErrorReceived","firstTransactionReceived","sessionReceived","serverConnected","projectId","firstError","setFirstError","useState","setFirstTransactionReceived","setSessionReceived","firstIssue","setFirstIssue","isLoading","eventIsLoading","useQuery","staleTime","refetchInterval","enabled","onSuccess","data","firstEvent","firstTransactionEvent","sessionIsLoading","query","statsPeriod","field","SessionFieldWithOperation","hasHealthData","getCount","groups","issue","firstSeen","useHeartbeat","useEffect","setRouteLeaveHook","nextLocation","platform","params","isSetupDocsForNewOrg","pathname","isGettingStartedForExistingOrg","isSetupDocsForNewOrgBackButton","isWelcomeForNewOrgBackButton","usingCustomerDomain","setUpRemainingOnboardingTasksLater","async","mod","ChangeRouteModal","openModal","deps","openChangeRouteModal","addSuccessMessage","t","trackAdvancedAnalyticsEvent","new_organization","Wrapper","sidebarCollapsed","collapsed","PlatformIconAndName","LoadingPlaceholder","height","width","displayPlatformName","avatarSize","hideOverflow","disableLink","Beats","Fragment","Beat","status","COMPLETE","size","isCircled","AWAITING","PulsingIndicator","PENDING","Actions","gap","LoadingPlaceholderButton","priority","busy","to","onClick","hash","space","breakpoints","small","css","medium","sidebar","Placeholder","form","md","pulsingIndicatorStyles","fontSizeExtraSmall","white","fontSizeSmall","pink300","disabled","successText","success","AddInstallationInstructions","tct","learnMore","href","addInstallation","manualSetup","PostInstallCodeSnippet","provider","isOnboarding","token_punctuation","name","CodeWrapper","TokenFunction","TokenPunctuation","EVENT_POLL_INTERVAL","CreateSampleEventButton","Component","creating","api","this","props","eventData","addLoadingMessage","duration","EVENT_POLL_RETRIES","setState","url","requestPromise","method","error","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","eventCreated","retries","groupID","Promise","resolve","window","setTimeout","latestEventAvailable","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","browserHistory","normalizeUrl","componentDidMount","source","project_id","eventKey","interval","render","_api","_organization","_project","_source","state","createSampleGroup","withApi","withOrganization","AddIntegration","urlParams","account","analyticsParams","modalParams","trackIntegrationAnalytics","integration","key","integration_type","setupDialog","left","top","computeCenteredWindow","installUrl","qs","opts","dialog","open","focus","message","onInstall","origin","document","NODE_ENV","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","openDialog","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","canAdd","title","baseSum","module","exports","array","iteratee","result","index","current","baseMean","identity"],"sourceRoot":""}