{"version":3,"file":"chunks/app_views_settings_settingsIndex_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/settingsIndex.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css, Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport DemoModeGate from 'sentry/components/acl/demoModeGate';\nimport OrganizationAvatar from 'sentry/components/avatar/organizationAvatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconDocs, IconLock, IconStack, IconSupport} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withLatestContext from 'sentry/utils/withLatestContext';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\n\nconst LINKS = {\n  DOCUMENTATION: 'https://docs.sentry.io/',\n  DOCUMENTATION_PLATFORMS: 'https://docs.sentry.io/platforms/',\n  DOCUMENTATION_QUICKSTART: 'https://docs.sentry.io/platform-redirect/?next=/',\n  DOCUMENTATION_CLI: 'https://docs.sentry.io/product/cli/',\n  DOCUMENTATION_API: 'https://docs.sentry.io/api/',\n  API: '/settings/account/api/',\n  MANAGE: '/manage/',\n  FORUM: 'https://forum.sentry.io/',\n  GITHUB_ISSUES: 'https://github.com/getsentry/sentry/issues',\n  SERVICE_STATUS: 'https://status.sentry.io/',\n};\n\nconst HOME_ICON_SIZE = 56;\n\ninterface SettingsIndexProps extends RouteComponentProps<{}, {}> {\n  organization: Organization;\n}\n\nfunction SettingsIndex({organization, ...props}: SettingsIndexProps) {\n  const api = useApi();\n\n  useEffect(() => {\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(api, organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }, [api, organization]);\n\n  const user = ConfigStore.get('user');\n  const isSelfHosted = ConfigStore.get('isSelfHosted');\n\n  const organizationSettingsUrl =\n    (organization && `/settings/${organization.slug}/`) || '';\n\n  const supportLinkProps = {\n    isSelfHosted,\n    organizationSettingsUrl,\n  };\n\n  const myAccount = (\n    <GridPanel>\n      <HomePanelHeader>\n        <HomeLinkIcon to=\"/settings/account/\">\n          <UserAvatar user={user} size={HOME_ICON_SIZE} />\n          {t('My Account')}\n        </HomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <HomeLink to=\"/settings/account/security/\">\n              {t('Change my password')}\n            </HomeLink>\n          </li>\n          <li>\n            <HomeLink to=\"/settings/account/notifications/\">\n              {t('Notification Preferences')}\n            </HomeLink>\n          </li>\n          <li>\n            <HomeLink to=\"/settings/account/\">{t('Change my avatar')}</HomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const orgSettings = (\n    <GridPanel>\n      {!organization && <LoadingIndicator overlay hideSpinner />}\n      <HomePanelHeader>\n        <HomeLinkIcon to={organizationSettingsUrl}>\n          {organization ? (\n            <OrganizationAvatar organization={organization} size={HOME_ICON_SIZE} />\n          ) : (\n            <HomeIconContainer color=\"green300\">\n              <IconStack size=\"lg\" />\n            </HomeIconContainer>\n          )}\n          <OrganizationName>\n            {organization ? organization.slug : t('No Organization')}\n          </OrganizationName>\n        </HomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}projects/`}>\n              {t('Projects')}\n            </HomeLink>\n          </li>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}teams/`}>{t('Teams')}</HomeLink>\n          </li>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}members/`}>{t('Members')}</HomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const documentation = (\n    <GridPanel>\n      <HomePanelHeader>\n        <ExternalHomeLinkIcon href={LINKS.DOCUMENTATION}>\n          <HomeIconContainer color=\"pink300\">\n            <IconDocs size=\"lg\" />\n          </HomeIconContainer>\n          {t('Documentation')}\n        </ExternalHomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_QUICKSTART}>\n              {t('Quickstart Guide')}\n            </ExternalHomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_PLATFORMS}>\n              {t('Platforms & Frameworks')}\n            </ExternalHomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_CLI}>\n              {t('Sentry CLI')}\n            </ExternalHomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const support = (\n    <GridPanel>\n      <HomePanelHeader>\n        <SupportLink icon {...supportLinkProps}>\n          <HomeIconContainer color=\"activeText\">\n            <IconSupport size=\"lg\" />\n          </HomeIconContainer>\n          {t('Support')}\n        </SupportLink>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <SupportLink {...supportLinkProps}>\n              {isSelfHosted ? t('Community Forums') : t('Contact Support')}\n            </SupportLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.GITHUB_ISSUES}>\n              {t('Sentry on GitHub')}\n            </ExternalHomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.SERVICE_STATUS}>\n              {t('Service Status')}\n            </ExternalHomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  const apiKeys = (\n    <GridPanel>\n      <HomePanelHeader>\n        <HomeLinkIcon to={LINKS.API}>\n          <HomeIconContainer>\n            <IconLock size=\"lg\" isSolid />\n          </HomeIconContainer>\n          {t('API Keys')}\n        </HomeLinkIcon>\n      </HomePanelHeader>\n\n      <HomePanelBody>\n        <h3>{t('Quick links')}:</h3>\n        <ul>\n          <li>\n            <HomeLink to={LINKS.API}>{t('Auth Tokens')}</HomeLink>\n          </li>\n          <li>\n            <HomeLink to={`${organizationSettingsUrl}developer-settings/`}>\n              {t('Your Integrations')}\n            </HomeLink>\n          </li>\n          <li>\n            <ExternalHomeLink href={LINKS.DOCUMENTATION_API}>\n              {t('Documentation')}\n            </ExternalHomeLink>\n          </li>\n        </ul>\n      </HomePanelBody>\n    </GridPanel>\n  );\n\n  return (\n    <SentryDocumentTitle\n      title={organization ? `${organization.slug} Settings` : 'Settings'}\n    >\n      <SettingsLayout {...props}>\n        <GridLayout>\n          <DemoModeGate>{myAccount}</DemoModeGate>\n          {orgSettings}\n          {documentation}\n          {support}\n          <DemoModeGate>{apiKeys} </DemoModeGate>\n        </GridLayout>\n      </SettingsLayout>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default withLatestContext(SettingsIndex);\n\nconst GridLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: ${space(2)};\n`;\n\nconst GridPanel = styled(Panel)`\n  margin-bottom: 0;\n`;\n\nconst HomePanelHeader = styled(PanelHeader)`\n  background: ${p => p.theme.background};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  align-items: center;\n  text-transform: unset;\n  padding: ${space(4)};\n`;\n\nconst HomePanelBody = styled(PanelBody)`\n  padding: 30px;\n\n  h3 {\n    font-size: 14px;\n  }\n\n  ul {\n    margin: 0;\n    li {\n      line-height: 1.6;\n      /* Bullet color */\n      color: ${p => p.theme.gray200};\n    }\n  }\n`;\n\nconst HomeIconContainer = styled('div')<{color?: string}>`\n  background: ${p => p.theme[p.color || 'gray300']};\n  color: ${p => p.theme.white};\n  width: ${HOME_ICON_SIZE}px;\n  height: ${HOME_ICON_SIZE}px;\n  border-radius: ${HOME_ICON_SIZE}px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst linkCss = ({theme}: {theme: Theme}) => css`\n  color: ${theme.activeText};\n\n  &:hover {\n    color: ${theme.activeText};\n  }\n`;\n\nconst linkIconCss = css`\n  overflow: hidden;\n  width: 100%;\n  display: grid;\n  grid-template-rows: max-content max-content;\n  gap: ${space(1.5)};\n  align-items: center;\n  justify-items: center;\n  justify-content: center;\n`;\n\nconst HomeLink = styled(Link)`\n  ${linkCss}\n`;\n\nconst ExternalHomeLink = styled(ExternalLink)`\n  ${linkCss}\n`;\n\nconst HomeLinkIcon = styled(HomeLink)`\n  ${linkIconCss}\n`;\n\nconst ExternalHomeLinkIcon = styled(ExternalLink)`\n  ${linkIconCss}\n`;\n\ninterface SupportLinkProps extends Omit<LinkProps, 'ref' | 'to'> {\n  isSelfHosted: boolean;\n  organizationSettingsUrl: string;\n  icon?: boolean;\n}\n\nfunction SupportLink({\n  isSelfHosted,\n  icon,\n  organizationSettingsUrl,\n  ...props\n}: SupportLinkProps) {\n  if (isSelfHosted) {\n    const SelfHostedLink = icon ? ExternalHomeLinkIcon : ExternalHomeLink;\n    return <SelfHostedLink href={LINKS.FORUM} {...props} />;\n  }\n\n  const SelfHostedLink = icon ? HomeLinkIcon : HomeLink;\n  return <SelfHostedLink to={`${organizationSettingsUrl}support`} {...props} />;\n}\n\nconst OrganizationName = styled('div')`\n  line-height: 1.1em;\n\n  ${p => p.theme.overflowEllipsis};\n`;\n"],"names":["LINKS","SettingsIndex","organization","props","api","useApi","useEffect","access","fetchOrganizationDetails","slug","setActive","loadProjects","user","ConfigStore","isSelfHosted","organizationSettingsUrl","supportLinkProps","myAccount","GridPanel","HomePanelHeader","HomeLinkIcon","to","size","t","HomePanelBody","HomeLink","orgSettings","overlay","hideSpinner","HomeIconContainer","color","OrganizationName","documentation","ExternalHomeLinkIcon","href","ExternalHomeLink","support","SupportLink","icon","apiKeys","isSolid","title","GridLayout","withLatestContext","space","Panel","PanelHeader","p","theme","background","fontSizeExtraLarge","PanelBody","gray200","white","linkCss","css","activeText","linkIconCss","Link","ExternalLink","SelfHostedLink","overflowEllipsis"],"sourceRoot":""}