{"version":3,"file":"chunks/app_components_forms_controls_multipleCheckbox_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+lBAoCA,MAAMA,GAA0BC,EAAAA,EAAAA,eAA4C,CAC1EC,aAAcC,IACdC,MAAO,GACPC,KAAM,GACNC,UAAU,IAGZ,SAASC,EAAiB,GAAoD,IAApD,SAACC,EAAQ,MAAEJ,EAAK,SAAEE,EAAQ,SAAEG,EAAQ,KAAEJ,GAAY,EAC1E,MAAMH,GAAeQ,EAAAA,EAAAA,cACnB,CAACC,EAA0BC,KACzB,GAAwB,mBAAbH,EACT,OAGF,MAAMI,EAAWD,EAAEE,OAAOC,QACtB,IAAIX,EAAOO,GACXP,EAAMY,QAAOC,GAAKA,IAAMN,IAE5BF,EAASI,EAAUD,EAAE,GAEvB,CAACR,EAAOK,IAGJS,GAAeC,EAAAA,EAAAA,UACnB,KAAM,CACJf,QACAF,eACAG,OACAC,cAEF,CAACA,EAAUJ,EAAcG,EAAMD,IAGjC,OACE,QAACJ,EAAwBoB,SAAQ,CAAChB,MAAOc,EAAa,UACpD,QAACG,EAAuB,UAAEb,KAGhC,CAEA,SAASc,EAAK,GAKQ,IAJpBlB,MAAOO,EAAS,SAChBH,EACAF,SAAUiB,EAAY,SACtBd,GACkB,EAClB,MAAM,SAACH,EAAQ,MAAEF,EAAK,aAAEF,EAAY,KAAEG,IAAQmB,EAAAA,EAAAA,YAAWxB,GAEzD,OACE,QAACyB,EAAc,WACb,QAACC,EAAK,YACJ,QAAC,IAAQ,CACPrB,KAAMA,EACNU,QAASX,EAAMuB,SAAShB,GACxBL,SAAUA,GAAYiB,EACtBd,SAAUG,IACRV,EAAaS,EAAWC,GACxBH,IAAWG,EAAE,EAEfR,MAAOA,EAAMwB,cAEf,QAACC,EAAa,UAAErB,QAIxB,CA1DSD,EAAgB,+BAiChBe,EAAI,mBA2Bbf,EAAiBe,KAAOA,EAExB,UAEMD,GAA0B,OAAO,MAAK,qBAAZ,CAAa,sDAKvCK,GAAQ,OAAO,QAAO,qBAAd,CAAe,uJAUvBG,GAAgB,OAAO,OAAM,qBAAb,CAAc,gBACnBC,EAAAA,EAAAA,GAAM,GAAE,KAGnBL,GAAiB,OAAO,MAAK,qBAAZ,CAAa,kCAGbM,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,oCAG9BH,GAAKA,EAAEC,MAAMC,YAAYE,QAAM,wCAG/BJ,GAAKA,EAAEC,MAAMC,YAAYG,OAAK,gB","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx"],"sourcesContent":["import React, {createContext, ReactNode, useCallback, useContext, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport noop from 'lodash/noop';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport {space} from 'sentry/styles/space';\n\ntype CheckboxValue = string | number;\n\ntype SelectedValue = CheckboxValue[];\n\ntype Props = {\n  children: ReactNode;\n  name: string;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype CheckboxItemProps = {\n  children: ReactNode;\n  value: string | number;\n  disabled?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype MultipleCheckboxContextValue = {\n  disabled: Props['disabled'];\n  handleChange: (\n    itemValue: CheckboxValue,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => void;\n  name: string;\n  value: Props['value'];\n};\n\nconst MultipleCheckboxContext = createContext<MultipleCheckboxContextValue>({\n  handleChange: noop,\n  value: [],\n  name: '',\n  disabled: false,\n});\n\nfunction MultipleCheckbox({children, value, disabled, onChange, name}: Props) {\n  const handleChange = useCallback(\n    (itemValue: CheckboxValue, e: React.ChangeEvent<HTMLInputElement>) => {\n      if (typeof onChange !== 'function') {\n        return;\n      }\n\n      const newValue = e.target.checked\n        ? [...value, itemValue]\n        : value.filter(v => v !== itemValue);\n\n      onChange(newValue, e);\n    },\n    [value, onChange]\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      value,\n      handleChange,\n      name,\n      disabled,\n    }),\n    [disabled, handleChange, name, value]\n  );\n\n  return (\n    <MultipleCheckboxContext.Provider value={contextValue}>\n      <MultipleCheckboxWrapper>{children}</MultipleCheckboxWrapper>\n    </MultipleCheckboxContext.Provider>\n  );\n}\n\nfunction Item({\n  value: itemValue,\n  children,\n  disabled: itemDisabled,\n  onChange,\n}: CheckboxItemProps) {\n  const {disabled, value, handleChange, name} = useContext(MultipleCheckboxContext);\n\n  return (\n    <LabelContainer>\n      <Label>\n        <Checkbox\n          name={name}\n          checked={value.includes(itemValue)}\n          disabled={disabled || itemDisabled}\n          onChange={e => {\n            handleChange(itemValue, e);\n            onChange?.(e);\n          }}\n          value={value.toString()}\n        />\n        <CheckboxLabel>{children}</CheckboxLabel>\n      </Label>\n    </LabelContainer>\n  );\n}\n\nMultipleCheckbox.Item = Item;\n\nexport default MultipleCheckbox;\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  display: inline-flex;\n  align-items: center;\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: ${space(1)};\n`;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n"],"names":["MultipleCheckboxContext","createContext","handleChange","noop","value","name","disabled","MultipleCheckbox","children","onChange","useCallback","itemValue","e","newValue","target","checked","filter","v","contextValue","useMemo","Provider","MultipleCheckboxWrapper","Item","itemDisabled","useContext","LabelContainer","Label","includes","toString","CheckboxLabel","space","p","theme","breakpoints","small","medium","large"],"sourceRoot":""}