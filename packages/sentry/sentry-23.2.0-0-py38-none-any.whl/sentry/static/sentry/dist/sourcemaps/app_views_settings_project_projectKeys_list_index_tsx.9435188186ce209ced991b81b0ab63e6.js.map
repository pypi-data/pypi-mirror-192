{"version":3,"file":"chunks/app_views_settings_project_projectKeys_list_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4LAYA,QAZA,SACEA,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,wPCJe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,kpCCmB9B,SAASO,EAAO,GAAqE,IAArE,KAACC,EAAI,SAAEC,EAAQ,SAAEC,EAAQ,OAAEC,EAAM,OAAEC,EAAM,SAAEC,EAAQ,OAAEC,GAAc,EACjF,MAGMC,GAAUC,EAAAA,EAAAA,GAAe,GAAER,EAAKS,MAAO,CAACL,SAAQE,SAAQD,aACxDK,EAAgBP,EAAOQ,IAAI,iBAEjC,OACE,QAAC,KAAK,YACJ,QAAC,KAAW,CAACC,YAAU,aACrB,QAACC,EAAK,CAACC,UAAWd,EAAKe,SAAS,WAC9B,QAACC,EAAe,CAACC,GAAIV,EAAQ,SAAEP,EAAKkB,SAClClB,EAAKe,WACL,2BACG,QACAI,EAAAA,EAAAA,GAAE,mBAIT,QAACC,EAAQ,YACP,QAAC,KAAM,CAACH,GAAIV,EAASc,KAAK,KAAI,UAC3BF,EAAAA,EAAAA,GAAE,gBAEL,QAAC,IAAO,CACNG,UAAWtB,EAAKe,SAtBJ,IAAMb,GAAS,EAAOF,GADvB,IAAME,GAAS,EAAMF,GAwBhCuB,YAAavB,EAAKe,UAAWI,EAAAA,EAAAA,GAAE,gBAAiBA,EAAAA,EAAAA,GAAE,cAClDK,QACExB,EAAKe,UACDI,EAAAA,EAAAA,GAAE,+CACFA,EAAAA,EAAAA,GAAE,6CACP,UAED,QAAC,KAAM,CAACE,KAAK,KAAKP,UAAWJ,EAAc,SACxCV,EAAKe,UAAWI,EAAAA,EAAAA,GAAE,YAAaA,EAAAA,EAAAA,GAAE,eAGtC,QAAC,IAAO,CACNM,SAAS,SACTH,UAAW,IAAMrB,EAASD,GAC1BuB,aAAaJ,EAAAA,EAAAA,GAAE,cACfK,SAASL,EAAAA,EAAAA,GACP,0EACA,UAEF,QAAC,KAAM,CACLE,KAAK,KACLP,UAAWJ,EACXgB,MAAM,QAAC,KAAU,IACjB,cAAYP,EAAAA,EAAAA,GAAE,qBAMtB,QAACQ,EAAgB,CAACC,WAAY,IAAKC,gBAAc,EAACC,SAASX,EAAAA,EAAAA,GAAE,UAAU,UACrE,QAACY,EAAe,CAACjB,UAAWd,EAAKe,SAAS,UACxC,QAAC,IAAqB,CAACiB,UAAY,GAAEhC,EAAKgC,YAAahC,KAAMA,UAKvE,CA7DSD,EAAM,qBA+Df,UAEM4B,GAAmB,OAAOM,EAAAA,EAAU,qBAAjB,CAAkB,oDAIrBC,EAAAA,EAAAA,GAAM,GAAE,MAIxBlB,GAAkB,OAAOmB,EAAAA,EAAI,qBAAX,CAAY,UACzBC,GAAKA,EAAEC,MAAMC,SAAO,KAGzBzB,GAAQ,OAAO,MAAK,qBAAZ,CAAa,WAEvBuB,GAAMA,EAAEtB,SAAW,gBAAkB,IAAG,kBAC1BoB,EAAAA,EAAAA,GAAM,GAAE,KAGpBd,GAAW,OAAO,MAAK,qBAAZ,CAAa,wCAGrBc,EAAAA,EAAAA,GAAM,GAAE,2BAIXH,GAAkB,OAAOQ,EAAAA,EAAS,qBAAhB,EACpBH,GAAMA,EAAEtB,SAAW,gBAAkB,IAAG,KClF5C,MAAM0B,UAAoBhD,EAAAA,EAAwB,kEAe9BiD,UAChB,MAAMC,EAAa,IAAI7C,KAAK8C,MAAMC,UAElCC,EAAAA,EAAAA,KAAkB1B,EAAAA,EAAAA,GAAE,kBAEpBtB,KAAKiD,UAASH,IAAS,CACrBC,QAASD,EAAMC,QAAQG,QAAOC,GAAOA,EAAIvC,KAAOT,EAAKS,SAGvD,MAAM,aAACwC,GAAgBpD,KAAKqD,OACtB,UAAClB,GAAanC,KAAKqD,MAAM5C,OAE/B,UACQT,KAAKsD,IAAIC,eACZ,aAAYH,EAAaI,QAAQrB,UAAkBhC,EAAKS,MACzD,CACE6C,OAAQ,YAGZC,EAAAA,EAAAA,KAAkBpC,EAAAA,EAAAA,GAAE,eAMtB,CALE,MAAOqC,GACP3D,KAAKiD,SAAS,CACZF,QAASF,KAEXe,EAAAA,EAAAA,KAAgBtC,EAAAA,EAAAA,GAAE,wBACpB,MACD,+BAEiBsB,MAAO1B,EAAmBf,KAC1C,MAAM0C,EAAa,IAAI7C,KAAK8C,MAAMC,UAElCC,EAAAA,EAAAA,KAAkB1B,EAAAA,EAAAA,GAAE,oBAEpBtB,KAAKiD,UAASH,IAWL,CAACC,QAVQD,EAAMC,QAAQc,KAAIV,GAC5BA,EAAIvC,KAAOT,EAAKS,GACX,IACFuC,EACHjC,UAAWf,EAAKe,UAIbiC,QAKX,MAAM,aAACC,GAAgBpD,KAAKqD,OACtB,UAAClB,GAAanC,KAAKqD,MAAM5C,OAE/B,UACQT,KAAKsD,IAAIC,eACZ,aAAYH,EAAaI,QAAQrB,UAAkBhC,EAAKS,MACzD,CACE6C,OAAQ,MACRtD,KAAM,CAACe,eAGXwC,EAAAA,EAAAA,IAAkBxC,GAAWI,EAAAA,EAAAA,GAAE,gBAAiBA,EAAAA,EAAAA,GAAE,gBAIpD,CAHE,MAAOqC,IACPC,EAAAA,EAAAA,IAAgB1C,GAAWI,EAAAA,EAAAA,GAAE,uBAAwBA,EAAAA,EAAAA,GAAE,wBACvDtB,KAAKiD,SAAS,CAACF,QAASF,GAC1B,MACD,+BAEiBD,UAChB,MAAM,aAACQ,GAAgBpD,KAAKqD,OACtB,UAAClB,GAAanC,KAAKqD,MAAM5C,OAE/B,IACE,MAAMN,QAAyBH,KAAKsD,IAAIC,eACrC,aAAYH,EAAaI,QAAQrB,UAClC,CACEsB,OAAQ,SAIZzD,KAAKiD,UAASH,IAAS,CACrBC,QAAS,IAAID,EAAMC,QAAS5C,QAE9BuD,EAAAA,EAAAA,KAAkBpC,EAAAA,EAAAA,GAAE,sBAGtB,CAFE,MAAOqC,IACPC,EAAAA,EAAAA,KAAgBtC,EAAAA,EAAAA,GAAE,+CACpB,IACD,CAlGDzB,WACE,MAAM,UAACsC,GAAanC,KAAKqD,MAAM5C,OAC/B,OAAOqD,EAAAA,EAAAA,IAAcxC,EAAAA,EAAAA,GAAE,eAAgBa,GAAW,EACpD,CAEA4B,eACE,MAAM,aAACX,GAAgBpD,KAAKqD,OACtB,UAAClB,GAAanC,KAAKqD,MAAM5C,OAC/B,MAAO,CAAC,CAAC,UAAY,aAAY2C,EAAaI,QAAQrB,WACxD,CA2FA6B,cACE,OACE,QAAC,KAAK,WACJ,QAAC,IAAY,CACXnC,MAAM,QAAC,KAAQ,CAACL,KAAK,OACrByC,aAAa3C,EAAAA,EAAAA,GAAE,iDAIvB,CAEA4C,gBACE,MAAM,SAAC1D,EAAQ,aAAE4C,EAAY,OAAE7C,EAAM,OAAEE,GAAUT,KAAKqD,OAChD,UAAClB,GAAa1B,EACdH,EAAS,IAAI6D,IAAIf,EAAa9C,QAEpC,OACE,QAAC,EAAA8D,SAAQ,WACNpE,KAAK8C,MAAMC,QAAQc,KAAIV,IACtB,QAAC,EAAM,CACL7C,OAAQA,EAER+D,MAAOjB,EAAaI,KACpBrB,UAAY,GAAEA,IACdhC,KAAMgD,EACN9C,SAAUL,KAAKsE,gBACflE,SAAUJ,KAAKuE,gBACfhE,OAAQA,EACRC,SAAUA,EACVC,OAAQA,GARH0C,EAAIvC,OAWb,QAAC,IAAU,CAAC4D,UAAWxE,KAAK8C,MAAM2B,qBAGxC,CAEAC,aACE,MAAMpE,EAAS,IAAI6D,IAAInE,KAAKqD,MAAMD,aAAa9C,QACzCqE,GAAW3E,KAAK8C,MAAMC,QAAQ6B,OAEpC,OACE,eAAK,eAAa,eAAc,WAC9B,QAAC,IAAkB,CACjB7E,OAAOuB,EAAAA,EAAAA,GAAE,eACTuD,OACEvE,EAAOQ,IAAI,kBACT,QAAC,KAAM,CACLgE,QAAS9E,KAAK+E,gBACdvD,KAAK,KACLI,SAAS,UACTC,MAAM,QAAC,KAAO,CAACL,KAAK,KAAKwD,WAAS,IAAI,UAErC1D,EAAAA,EAAAA,GAAE,sBAEH,QAGR,QAAC,IAAS,WACP2D,EAAAA,EAAAA,IACE,8QAID,CACEC,MACE,QAAC,IAAY,CAACC,KAAK,2EAErBC,MAAM,uBAKXT,EAAU3E,KAAKgE,cAAgBhE,KAAKkE,kBAG3C,EAGF,SAAemB,EAAAA,EAAAA,GAAiB1C,E,+kBC7LhC,SAAS2C,EAAsB,GAWrB,IAXqB,KAC7BnF,EAAI,UACJgC,EAAS,QACToD,GAAU,EAAI,cACdC,GAAgB,EAAI,aACpBC,GAAe,EAAI,cACnBC,GAAgB,EAAK,cACrBC,GAAgB,EAAK,cACrBC,GAAgB,EAAK,qBACrBC,GAAuB,EAAI,WAC3BC,GAAa,GACP,EACN,MAAOC,EAAmBC,IAAwBC,EAAAA,EAAAA,WAAS,GAE3D,OACE,QAAC,EAAA7B,SAAQ,WACNoB,IACC,QAAC,IAAU,CACTnE,OAAOC,EAAAA,EAAAA,GAAE,OACT4E,QAAQ,EACRC,0BAAwB,EACxBC,MAAMnB,EAAAA,EAAAA,IAAI,4DAA6D,CACrEC,KAAMK,GACJ,QAAC,IAAI,CAACnE,GAAG,GAAG0D,QAAS,IAAMkB,GAAqBK,IAASA,IAAM,SAC5DN,GAAoBzE,EAAAA,EAAAA,GAAE,wBAAyBA,EAAAA,EAAAA,GAAE,yBAElD,OACH,WAEH,QAAC,IAAa,WACXgF,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKqG,IAAIC,OAChBC,MAAO,cAGVX,IACC,QAACY,EAAW,CACVtF,MAAO,KACP+E,MAAM9E,EAAAA,EAAAA,GACJ,2KAEF4E,QAAQ,EACRC,0BAAwB,YAExB,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKqG,IAAII,OAChBF,MAAO,+BASjBlB,GAAiBD,IACjB,QAAC,IAAU,CACTlE,OAAOC,EAAAA,EAAAA,GAAE,oBACT8E,MAAM9E,EAAAA,EAAAA,GACJ,2KAEF4E,QAAQ,EACRC,0BAAwB,YAExB,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKqG,IAAII,OAChBF,MAAO,2BAMdb,IACC,QAAC,IAAU,CACTxE,OAAOC,EAAAA,EAAAA,GAAE,4BACT8E,MAAM9E,EAAAA,EAAAA,GACJ,kFAEF4E,QAAQ,EACRC,0BAAwB,YAExB,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKqG,IAAIK,SAChBH,MAAO,qCAMdjB,IACC,QAAC,IAAU,CACTpE,OAAOC,EAAAA,EAAAA,GAAE,qBACT8E,MAAMnB,EAAAA,EAAAA,IACJ,uFACA,CACEC,MACE,QAAC,IAAY,CAACC,KAAK,4DAA2D,SAAC,6BAMrFe,QAAQ,EACRC,0BAAwB,YAExB,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKqG,IAAIM,SAChBJ,MAAO,8BAMdZ,IACC,QAAC,IAAU,CACTzE,OAAOC,EAAAA,EAAAA,GAAE,4BACT8E,MAAM9E,EAAAA,EAAAA,GAAE,2DACR4E,QAAQ,EACRC,0BAAwB,YAExB,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKqG,IAAIO,QAAU,GAC1BL,MAAO,4BAMdf,IACC,QAAC,IAAU,CAACtE,OAAOC,EAAAA,EAAAA,GAAE,cAAe4E,QAAM,EAACC,0BAAwB,YACjE,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKsG,OACZC,MAAO,sBAMdd,IACC,QAAC,IAAU,CAACvE,OAAOC,EAAAA,EAAAA,GAAE,cAAe4E,QAAM,EAACC,0BAAwB,YACjE,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpG,EAAKyG,OACZF,MAAO,sBAMdhB,IACC,QAAC,IAAU,CAACrE,OAAOC,EAAAA,EAAAA,GAAE,cAAe4E,QAAM,EAACC,0BAAwB,YACjE,QAAC,IAAa,WACXG,EAAAA,EAAAA,GAAe,CACdC,MAAOpE,EACPuE,MAAO,wBAOrB,CAvKSpB,EAAqB,oCAyK9B,MAAMqB,GAAc,OAAOK,EAAAA,EAAU,oBAAjB,CAAkB,YACzB3E,EAAAA,EAAAA,GAAM,IAAI,WAGvB,G","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectKeys/list/keyRow.tsx","webpack:///./app/views/settings/project/projectKeys/list/index.tsx","webpack:///./app/views/settings/project/projectKeys/projectKeyCredentials.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport ClippedBox from 'sentry/components/clippedBox';\nimport Confirm from 'sentry/components/confirm';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Scope} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport ProjectKeyCredentials from 'sentry/views/settings/project/projectKeys/projectKeyCredentials';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\ntype Props = {\n  access: Set<Scope>;\n  data: ProjectKey;\n  onRemove: (data: ProjectKey) => void;\n  onToggle: (isActive: boolean, data: ProjectKey) => void;\n  orgId: string;\n  projectId: string;\n} & Pick<RouteComponentProps<{}, {}>, 'routes' | 'location' | 'params'>;\n\nfunction KeyRow({data, onRemove, onToggle, access, routes, location, params}: Props) {\n  const handleEnable = () => onToggle(true, data);\n  const handleDisable = () => onToggle(false, data);\n\n  const editUrl = recreateRoute(`${data.id}/`, {routes, params, location});\n  const controlActive = access.has('project:write');\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        <Title disabled={!data.isActive}>\n          <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>\n          {!data.isActive && (\n            <small>\n              {' \\u2014  '}\n              {t('Disabled')}\n            </small>\n          )}\n        </Title>\n        <Controls>\n          <Button to={editUrl} size=\"sm\">\n            {t('Configure')}\n          </Button>\n          <Confirm\n            onConfirm={data.isActive ? handleDisable : handleEnable}\n            confirmText={data.isActive ? t('Disable Key') : t('Enable Key')}\n            message={\n              data.isActive\n                ? t('Are you sure you want to disable this key?')\n                : t('Are you sure you want to enable this key?')\n            }\n          >\n            <Button size=\"sm\" disabled={!controlActive}>\n              {data.isActive ? t('Disable') : t('Enable')}\n            </Button>\n          </Confirm>\n          <Confirm\n            priority=\"danger\"\n            onConfirm={() => onRemove(data)}\n            confirmText={t('Remove Key')}\n            message={t(\n              'Are you sure you want to remove this key? This action is irreversible.'\n            )}\n          >\n            <Button\n              size=\"sm\"\n              disabled={!controlActive}\n              icon={<IconDelete />}\n              aria-label={t('Delete')}\n            />\n          </Confirm>\n        </Controls>\n      </PanelHeader>\n\n      <StyledClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>\n        <StyledPanelBody disabled={!data.isActive}>\n          <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />\n        </StyledPanelBody>\n      </StyledClippedBox>\n    </Panel>\n  );\n}\n\nexport default KeyRow;\n\nconst StyledClippedBox = styled(ClippedBox)`\n  padding: 0;\n  margin: 0;\n  > *:last-child {\n    padding-bottom: ${space(3)};\n  }\n`;\n\nconst PanelHeaderLink = styled(Link)`\n  color: ${p => p.theme.subText};\n`;\n\nconst Title = styled('div')<{disabled: boolean}>`\n  flex: 1;\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n  margin-right: ${space(1)};\n`;\n\nconst Controls = styled('div')`\n  display: grid;\n  align-items: center;\n  gap: ${space(1)};\n  grid-auto-flow: column;\n`;\n\nconst StyledPanelBody = styled(PanelBody)<{disabled: boolean}>`\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel} from 'sentry/components/panels';\nimport {IconAdd, IconFlag} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\nimport KeyRow from './keyRow';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  keyList: ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectKeys extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Client Keys'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    return [['keyList', `/projects/${organization.slug}/${projectId}/keys/`]];\n  }\n\n  /**\n   * Optimistically remove key\n   */\n  handleRemoveKey = async (data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Revoking key\\u2026'));\n\n    this.setState(state => ({\n      keyList: state.keyList.filter(key => key.id !== data.id),\n    }));\n\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/keys/${data.id}/`,\n        {\n          method: 'DELETE',\n        }\n      );\n      addSuccessMessage(t('Revoked key'));\n    } catch (_err) {\n      this.setState({\n        keyList: oldKeyList,\n      });\n      addErrorMessage(t('Unable to revoke key'));\n    }\n  };\n\n  handleToggleKey = async (isActive: boolean, data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.setState(state => {\n      const keyList = state.keyList.map(key => {\n        if (key.id === data.id) {\n          return {\n            ...key,\n            isActive: !data.isActive,\n          };\n        }\n\n        return key;\n      });\n      return {keyList};\n    });\n\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/keys/${data.id}/`,\n        {\n          method: 'PUT',\n          data: {isActive},\n        }\n      );\n      addSuccessMessage(isActive ? t('Enabled key') : t('Disabled key'));\n    } catch (_err) {\n      addErrorMessage(isActive ? t('Error enabling key') : t('Error disabling key'));\n      this.setState({keyList: oldKeyList});\n    }\n  };\n\n  handleCreateKey = async () => {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    try {\n      const data: ProjectKey = await this.api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/keys/`,\n        {\n          method: 'POST',\n        }\n      );\n\n      this.setState(state => ({\n        keyList: [...state.keyList, data],\n      }));\n      addSuccessMessage(t('Created a new key.'));\n    } catch (_err) {\n      addErrorMessage(t('Unable to create new key. Please try again.'));\n    }\n  };\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyMessage\n          icon={<IconFlag size=\"xl\" />}\n          description={t('There are no keys active for this project.')}\n        />\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {location, organization, routes, params} = this.props;\n    const {projectId} = params;\n    const access = new Set(organization.access);\n\n    return (\n      <Fragment>\n        {this.state.keyList.map(key => (\n          <KeyRow\n            access={access}\n            key={key.id}\n            orgId={organization.slug}\n            projectId={`${projectId}`}\n            data={key}\n            onToggle={this.handleToggleKey}\n            onRemove={this.handleRemoveKey}\n            routes={routes}\n            location={location}\n            params={params}\n          />\n        ))}\n        <Pagination pageLinks={this.state.keyListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const access = new Set(this.props.organization.access);\n    const isEmpty = !this.state.keyList.length;\n\n    return (\n      <div data-test-id=\"project-keys\">\n        <SettingsPageHeader\n          title={t('Client Keys')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                onClick={this.handleCreateKey}\n                size=\"sm\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Generate New Key')}\n              </Button>\n            ) : null\n          }\n        />\n        <TextBlock>\n          {tct(\n            `To send data to Sentry you will need to configure an SDK with a client key\n          (usually referred to as the [code:SENTRY_DSN] value). For more\n          information on integrating Sentry with your application take a look at our\n          [link:documentation].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/configuration/options/\" />\n              ),\n              code: <code />,\n            }\n          )}\n        </TextBlock>\n\n        {isEmpty ? this.renderEmpty() : this.renderResults()}\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectKeys);\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\ntype Props = {\n  data: ProjectKey;\n  projectId: string;\n  showDsn?: boolean;\n  showDsnPublic?: boolean;\n  showMinidump?: boolean;\n  showProjectId?: boolean;\n  showPublicKey?: boolean;\n  showSecretKey?: boolean;\n  showSecurityEndpoint?: boolean;\n  showUnreal?: boolean;\n};\n\nfunction ProjectKeyCredentials({\n  data,\n  projectId,\n  showDsn = true,\n  showDsnPublic = true,\n  showMinidump = true,\n  showProjectId = false,\n  showPublicKey = false,\n  showSecretKey = false,\n  showSecurityEndpoint = true,\n  showUnreal = true,\n}: Props) {\n  const [showDeprecatedDsn, setShowDeprecatedDsn] = useState(false);\n\n  return (\n    <Fragment>\n      {showDsnPublic && (\n        <FieldGroup\n          label={t('DSN')}\n          inline={false}\n          flexibleControlStateSize\n          help={tct('The DSN tells the SDK where to send the events to. [link]', {\n            link: showDsn ? (\n              <Link to=\"\" onClick={() => setShowDeprecatedDsn(curr => !curr)}>\n                {showDeprecatedDsn ? t('Hide deprecated DSN') : t('Show deprecated DSN')}\n              </Link>\n            ) : null,\n          })}\n        >\n          <TextCopyInput>\n            {getDynamicText({\n              value: data.dsn.public,\n              fixed: '__DSN__',\n            })}\n          </TextCopyInput>\n          {showDeprecatedDsn && (\n            <StyledField\n              label={null}\n              help={t(\n                'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n              )}\n              inline={false}\n              flexibleControlStateSize\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: data.dsn.secret,\n                  fixed: '__DSN_DEPRECATED__',\n                })}\n              </TextCopyInput>\n            </StyledField>\n          )}\n        </FieldGroup>\n      )}\n\n      {/* this edge case should imho not happen, but just to be sure */}\n      {!showDsnPublic && showDsn && (\n        <FieldGroup\n          label={t('DSN (Deprecated)')}\n          help={t(\n            'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n          )}\n          inline={false}\n          flexibleControlStateSize\n        >\n          <TextCopyInput>\n            {getDynamicText({\n              value: data.dsn.secret,\n              fixed: '__DSN_DEPRECATED__',\n            })}\n          </TextCopyInput>\n        </FieldGroup>\n      )}\n\n      {showSecurityEndpoint && (\n        <FieldGroup\n          label={t('Security Header Endpoint')}\n          help={t(\n            'Use your security header endpoint for features like CSP and Expect-CT reports.'\n          )}\n          inline={false}\n          flexibleControlStateSize\n        >\n          <TextCopyInput>\n            {getDynamicText({\n              value: data.dsn.security,\n              fixed: '__SECURITY_HEADER_ENDPOINT__',\n            })}\n          </TextCopyInput>\n        </FieldGroup>\n      )}\n\n      {showMinidump && (\n        <FieldGroup\n          label={t('Minidump Endpoint')}\n          help={tct(\n            'Use this endpoint to upload [link], for example with Electron, Crashpad or Breakpad.',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/native/guides/minidumps/\">\n                  minidump crash reports\n                </ExternalLink>\n              ),\n            }\n          )}\n          inline={false}\n          flexibleControlStateSize\n        >\n          <TextCopyInput>\n            {getDynamicText({\n              value: data.dsn.minidump,\n              fixed: '__MINIDUMP_ENDPOINT__',\n            })}\n          </TextCopyInput>\n        </FieldGroup>\n      )}\n\n      {showUnreal && (\n        <FieldGroup\n          label={t('Unreal Engine 4 Endpoint')}\n          help={t('Use this endpoint to configure your UE4 Crash Reporter.')}\n          inline={false}\n          flexibleControlStateSize\n        >\n          <TextCopyInput>\n            {getDynamicText({\n              value: data.dsn.unreal || '',\n              fixed: '__UNREAL_ENDPOINT__',\n            })}\n          </TextCopyInput>\n        </FieldGroup>\n      )}\n\n      {showPublicKey && (\n        <FieldGroup label={t('Public Key')} inline flexibleControlStateSize>\n          <TextCopyInput>\n            {getDynamicText({\n              value: data.public,\n              fixed: '__PUBLICKEY__',\n            })}\n          </TextCopyInput>\n        </FieldGroup>\n      )}\n\n      {showSecretKey && (\n        <FieldGroup label={t('Secret Key')} inline flexibleControlStateSize>\n          <TextCopyInput>\n            {getDynamicText({\n              value: data.secret,\n              fixed: '__SECRETKEY__',\n            })}\n          </TextCopyInput>\n        </FieldGroup>\n      )}\n\n      {showProjectId && (\n        <FieldGroup label={t('Project ID')} inline flexibleControlStateSize>\n          <TextCopyInput>\n            {getDynamicText({\n              value: projectId,\n              fixed: '__PROJECTID__',\n            })}\n          </TextCopyInput>\n        </FieldGroup>\n      )}\n    </Fragment>\n  );\n}\n\nconst StyledField = styled(FieldGroup)`\n  padding: ${space(0.5)} 0 0 0;\n`;\n\nexport default ProjectKeyCredentials;\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","KeyRow","data","onRemove","onToggle","access","routes","location","params","editUrl","recreateRoute","id","controlActive","has","hasButtons","Title","disabled","isActive","PanelHeaderLink","to","label","t","Controls","size","onConfirm","confirmText","message","priority","icon","StyledClippedBox","clipHeight","defaultClipped","btnText","StyledPanelBody","projectId","ClippedBox","space","Link","p","theme","subText","PanelBody","ProjectKeys","async","oldKeyList","state","keyList","addLoadingMessage","setState","filter","key","organization","props","api","requestPromise","slug","method","addSuccessMessage","_err","addErrorMessage","map","routeTitleGen","getEndpoints","renderEmpty","description","renderResults","Set","Fragment","orgId","handleToggleKey","handleRemoveKey","pageLinks","keyListPageLinks","renderBody","isEmpty","length","action","onClick","handleCreateKey","isCircled","tct","link","href","code","withOrganization","ProjectKeyCredentials","showDsn","showDsnPublic","showMinidump","showProjectId","showPublicKey","showSecretKey","showSecurityEndpoint","showUnreal","showDeprecatedDsn","setShowDeprecatedDsn","useState","inline","flexibleControlStateSize","help","curr","getDynamicText","value","dsn","public","fixed","StyledField","secret","security","minidump","unreal","FieldGroup"],"sourceRoot":""}