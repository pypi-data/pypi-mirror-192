{"version":3,"file":"chunks/app_views_settings_project_projectReleaseTracking_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectReleaseTracking.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {space} from 'sentry/styles/space';\nimport {Plugin} from 'sentry/types';\n\ntype Props = {\n  onEnablePlugin: (plugin: Plugin) => void;\n  plugins: Plugin[];\n};\n\nconst InactivePlugins = ({plugins, onEnablePlugin}: Props) => {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport InactivePlugins from 'sentry/components/inactivePlugins';\nimport {Panel, PanelItem} from 'sentry/components/panels';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  pluginList: Plugin[];\n  project: Project;\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nconst PluginList = ({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) => {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n};\n\nexport default PluginList;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, keyof 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Alert} from 'sentry/components/alert';\nimport AutoSelectText from 'sentry/components/autoSelectText';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport PluginList from 'sentry/components/pluginList';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nconst TOKEN_PLACEHOLDER = 'YOUR_TOKEN';\nconst WEBHOOK_PLACEHOLDER = 'YOUR_WEBHOOK_URL';\n\ntype Props = {\n  organization: Organization;\n  plugins: {loading: boolean; plugins: Plugin[]};\n  project: Project;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  data: {\n    token: string;\n    webhookUrl: string;\n  } | null;\n} & AsyncView['state'];\n\nconst placeholderData = {\n  token: TOKEN_PLACEHOLDER,\n  webhookUrl: WEBHOOK_PLACEHOLDER,\n};\n\nclass ProjectReleaseTracking extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Releases'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    // Allow 403s\n    return [\n      [\n        'data',\n        `/projects/${organization.slug}/${projectId}/releases/token/`,\n        {},\n        {allowError: err => err && err.status === 403},\n      ],\n    ];\n  }\n\n  handleRegenerateToken = () => {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    this.api.request(`/projects/${organization.slug}/${projectId}/releases/token/`, {\n      method: 'POST',\n      data: {project: projectId},\n      success: data => {\n        this.setState({\n          data: {\n            token: data.token,\n            webhookUrl: data.webhookUrl,\n          },\n        });\n        addSuccessMessage(\n          t(\n            'Your deploy token has been regenerated. You will need to update any existing deploy hooks.'\n          )\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to regenerate deploy token, please try again'));\n      },\n    });\n  };\n\n  getReleaseWebhookIntructions() {\n    const {webhookUrl} = this.state.data || placeholderData;\n    return (\n      'curl ' +\n      webhookUrl +\n      ' \\\\' +\n      '\\n  ' +\n      '-X POST \\\\' +\n      '\\n  ' +\n      \"-H 'Content-Type: application/json' \\\\\" +\n      '\\n  ' +\n      '-d \\'{\"version\": \"abcdefg\"}\\''\n    );\n  }\n\n  renderBody() {\n    const {organization, project, plugins} = this.props;\n    const hasWrite = organization.access.includes('project:write');\n\n    if (plugins.loading) {\n      return <LoadingIndicator />;\n    }\n\n    const pluginList = plugins.plugins.filter(\n      (p: Plugin) => p.type === 'release-tracking' && p.hasConfiguration\n    );\n\n    let {token, webhookUrl} = this.state.data || placeholderData;\n\n    token = getDynamicText({value: token, fixed: '__TOKEN__'});\n    webhookUrl = getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Release Tracking')} />\n        {!hasWrite && (\n          <Alert type=\"warning\">\n            {t(\n              'You do not have sufficient permissions to access Release tokens, placeholders are displayed below.'\n            )}\n          </Alert>\n        )}\n        <p>\n          {t(\n            'Configure release tracking for this project to automatically record new releases of your application.'\n          )}\n        </p>\n\n        <Panel>\n          <PanelHeader>{t('Client Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                'Start by binding the [release] attribute in your application, take a look at [link] to see how to configure this for the SDK you are using.',\n                {\n                  link: (\n                    <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/configuration/releases/\">\n                      our docs\n                    </ExternalLink>\n                  ),\n                  release: <code>release</code>,\n                }\n              )}\n            </p>\n            <p>\n              {t(\n                \"This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen.\"\n              )}\n            </p>\n            <p>\n              {t(\n                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Deploy Token')}</PanelHeader>\n          <PanelBody>\n            <FieldGroup\n              label={t('Token')}\n              help={t('A unique secret which is used to generate deploy hook URLs')}\n            >\n              <TextCopyInput>{token}</TextCopyInput>\n            </FieldGroup>\n            <FieldGroup\n              label={t('Regenerate Token')}\n              help={t(\n                'If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'\n              )}\n            >\n              <div>\n                <Confirm\n                  disabled={!hasWrite}\n                  priority=\"danger\"\n                  onConfirm={this.handleRegenerateToken}\n                  message={t(\n                    'Are you sure you want to regenerate your token? Your current token will no longer be usable.'\n                  )}\n                >\n                  <Button priority=\"danger\" disabled={!hasWrite}>\n                    {t('Regenerate Token')}\n                  </Button>\n                </Confirm>\n              </div>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Webhook')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'\n              )}\n            </p>\n\n            <AutoSelectText>\n              <pre>{webhookUrl}</pre>\n            </AutoSelectText>\n\n            <p>\n              {t(\n                'The release webhook accepts the same parameters as the \"Create a new Release\" API endpoint.'\n              )}\n            </p>\n\n            {getDynamicText({\n              value: (\n                <AutoSelectText>\n                  <pre>{this.getReleaseWebhookIntructions()}</pre>\n                </AutoSelectText>\n              ),\n              fixed: (\n                <pre>\n                  {`curl __WEBHOOK_URL__ \\\\\n  -X POST \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d \\'{\"version\": \"abcdefg\"}\\'`}\n                </pre>\n              ),\n            })}\n          </PanelBody>\n        </Panel>\n\n        <PluginList\n          organization={organization}\n          project={project}\n          pluginList={pluginList}\n        />\n\n        <Panel>\n          <PanelHeader>{t('API')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'You can notify Sentry when you release new versions of your application via our HTTP API.'\n              )}\n            </p>\n\n            <p>\n              {tct('See the [link:releases documentation] for more information.', {\n                link: <ExternalLink href=\"https://docs.sentry.io/workflow/releases/\" />,\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withPlugins(ProjectReleaseTracking);\n\n// Export for tests\nexport {ProjectReleaseTracking};\n"],"names":["InactivePlugins","plugins","onEnablePlugin","length","t","Plugins","map","plugin","IntegrationButton","onClick","className","id","Label","StyledPluginIcon","pluginId","shortName","name","space","p","theme","fontSizeSmall","borderRadius","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","isHidden","enablePlugin","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","WrappedComponent","WithPlugins","Component","loading","PluginsStore","this","setState","undefined","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","props","prevOrg","prevProject","defined","isOrgSame","isProjectSame","componentWillUnmount","unsubscribe","render","state","getDisplayName","withOrganization","withProject","AsyncView","AsyncComponent","getTitle","title","renderComponent","placeholderData","token","webhookUrl","ProjectReleaseTracking","params","api","request","method","success","addSuccessMessage","error","addErrorMessage","routeTitleGen","getEndpoints","allowError","err","status","getReleaseWebhookIntructions","renderBody","hasWrite","access","includes","type","hasConfiguration","getDynamicText","value","fixed","withPadding","tct","link","href","release","label","help","disabled","priority","onConfirm","handleRegenerateToken","message","withPlugins"],"sourceRoot":""}