{"version":3,"file":"chunks/app_views_settings_organizationDeveloperSettings_sentryApplicationDashboard_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/lineChart.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx"],"sourcesContent":["import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport LineSeries from './series/lineSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type LineChartSeries = Series &\n  Omit<LineSeriesOption, 'data' | 'name'> & {\n    dataArray?: LineSeriesOption['data'];\n  };\n\nexport interface LineChartProps extends Omit<ChartProps, 'series'> {\n  series: LineChartSeries[];\n  additionalSeries?: LineSeriesOption[];\n  seriesOptions?: LineSeriesOption;\n}\n\nexport function LineChart({series, seriesOptions, ...props}: LineChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      series={series.map(({seriesName, data, dataArray, ...options}) =>\n        LineSeries({\n          ...seriesOptions,\n          ...options,\n          name: seriesName,\n          data: dataArray || data?.map(({value, name}) => [name, value]),\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n        })\n      )}\n    />\n  );\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment-timezone';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {Button, StyledButton} from 'sentry/components/button';\nimport Checkbox from 'sentry/components/checkbox';\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport DateTime from 'sentry/components/dateTime';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport {IconChevron, IconFlag, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {SentryApp, SentryAppSchemaIssueLink, SentryAppWebhookRequest} from 'sentry/types';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\n\nconst ALL_EVENTS = t('All Events');\nconst MAX_PER_PAGE = 10;\nconst is24Hours = shouldUse24Hours();\n\nconst componentHasSelectUri = (issueLinkComponent: SentryAppSchemaIssueLink): boolean => {\n  const hasSelectUri = (fields: any[]): boolean =>\n    fields.some(field => field.type === 'select' && 'uri' in field);\n\n  const createHasSelectUri =\n    hasSelectUri(issueLinkComponent.create.required_fields) ||\n    hasSelectUri(issueLinkComponent.create.optional_fields || []);\n\n  const linkHasSelectUri =\n    hasSelectUri(issueLinkComponent.link.required_fields) ||\n    hasSelectUri(issueLinkComponent.link.optional_fields || []);\n\n  return createHasSelectUri || linkHasSelectUri;\n};\n\nconst getEventTypes = memoize((app: SentryApp) => {\n  // TODO(nola): ideally this would be kept in sync with EXTENDED_VALID_EVENTS on the backend\n\n  let issueLinkEvents: string[] = [];\n  const issueLinkComponent = (app.schema.elements || []).find(\n    element => element.type === 'issue-link'\n  );\n  if (issueLinkComponent) {\n    issueLinkEvents = ['external_issue.created', 'external_issue.linked'];\n    if (componentHasSelectUri(issueLinkComponent as SentryAppSchemaIssueLink)) {\n      issueLinkEvents.push('select_options.requested');\n    }\n  }\n\n  const events = [\n    ALL_EVENTS,\n    // Internal apps don't have installation webhooks\n    ...(app.status !== 'internal'\n      ? ['installation.created', 'installation.deleted']\n      : []),\n    ...(app.events.includes('error') ? ['error.created'] : []),\n    ...(app.events.includes('issue')\n      ? ['issue.created', 'issue.resolved', 'issue.ignored', 'issue.assigned']\n      : []),\n    ...(app.isAlertable\n      ? [\n          'event_alert.triggered',\n          'metric_alert.open',\n          'metric_alert.resolved',\n          'metric_alert.critical',\n          'metric_alert.warning',\n        ]\n      : []),\n    ...issueLinkEvents,\n  ];\n\n  return events;\n});\n\nconst ResponseCode = ({code}: {code: number}) => {\n  let type: React.ComponentProps<typeof Tag>['type'] = 'error';\n  if (code <= 399 && code >= 300) {\n    type = 'warning';\n  } else if (code <= 299 && code >= 100) {\n    type = 'success';\n  }\n\n  return (\n    <Tags>\n      <StyledTag type={type}>{code === 0 ? 'timeout' : code}</StyledTag>\n    </Tags>\n  );\n};\n\nconst TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) =>\n  link ? (\n    <ExternalLink href={link}>\n      <DateTime date={date} />\n      <StyledIconOpen size=\"xs\" />\n    </ExternalLink>\n  ) : (\n    <DateTime date={date} format={is24Hours ? 'MMM D, YYYY HH:mm:ss z' : 'll LTS z'} />\n  );\n\ntype Props = AsyncComponent['props'] & {\n  app: SentryApp;\n};\n\ntype State = AsyncComponent['state'] & {\n  currentPage: number;\n  errorsOnly: boolean;\n  eventType: string;\n  requests: SentryAppWebhookRequest[];\n};\n\nexport default class RequestLog extends AsyncComponent<Props, State> {\n  shouldReload = true;\n\n  get hasNextPage() {\n    return (this.state.currentPage + 1) * MAX_PER_PAGE < this.state.requests.length;\n  }\n\n  get hasPrevPage() {\n    return this.state.currentPage > 0;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {slug} = this.props.app;\n\n    const query: any = {};\n    if (this.state) {\n      if (this.state.eventType !== ALL_EVENTS) {\n        query.eventType = this.state.eventType;\n      }\n      if (this.state.errorsOnly) {\n        query.errorsOnly = true;\n      }\n    }\n\n    return [['requests', `/sentry-apps/${slug}/requests/`, {query}]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      requests: [],\n      eventType: ALL_EVENTS,\n      errorsOnly: false,\n      currentPage: 0,\n    };\n  }\n\n  handleChangeEventType = (eventType: string) => {\n    this.setState(\n      {\n        eventType,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleChangeErrorsOnly = () => {\n    this.setState(\n      {\n        errorsOnly: !this.state.errorsOnly,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleNextPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage + 1,\n    });\n  };\n\n  handlePrevPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage - 1,\n    });\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {requests, eventType, errorsOnly, currentPage} = this.state;\n    const {app} = this.props;\n\n    const currentRequests = requests.slice(\n      currentPage * MAX_PER_PAGE,\n      (currentPage + 1) * MAX_PER_PAGE\n    );\n\n    return (\n      <Fragment>\n        <h5>{t('Request Log')}</h5>\n\n        <div>\n          <p>\n            {t(\n              'This log shows the status of any outgoing webhook requests from Sentry to your integration.'\n            )}\n          </p>\n\n          <RequestLogFilters>\n            <CompactSelect\n              triggerLabel={eventType}\n              value={eventType}\n              options={getEventTypes(app).map(type => ({\n                value: type,\n                label: type,\n              }))}\n              onChange={opt => this.handleChangeEventType(opt?.value)}\n            />\n\n            <StyledErrorsOnlyButton onClick={this.handleChangeErrorsOnly}>\n              <ErrorsOnlyCheckbox>\n                <Checkbox checked={errorsOnly} onChange={() => {}} />\n                {t('Errors Only')}\n              </ErrorsOnlyCheckbox>\n            </StyledErrorsOnlyButton>\n          </RequestLogFilters>\n        </div>\n\n        <Panel>\n          <PanelHeader>\n            <TableLayout hasOrganization={app.status !== 'internal'}>\n              <div>{t('Time')}</div>\n              <div>{t('Status Code')}</div>\n              {app.status !== 'internal' && <div>{t('Organization')}</div>}\n              <div>{t('Event Type')}</div>\n              <div>{t('Webhook URL')}</div>\n            </TableLayout>\n          </PanelHeader>\n\n          {!this.state.loading ? (\n            <PanelBody>\n              {currentRequests.length > 0 ? (\n                currentRequests.map((request, idx) => (\n                  <PanelItem key={idx} data-test-id=\"request-item\">\n                    <TableLayout hasOrganization={app.status !== 'internal'}>\n                      <TimestampLink date={request.date} link={request.errorUrl} />\n                      <ResponseCode code={request.responseCode} />\n                      {app.status !== 'internal' && (\n                        <div>\n                          {request.organization ? request.organization.name : null}\n                        </div>\n                      )}\n                      <div>{request.eventType}</div>\n                      <OverflowBox>{request.webhookUrl}</OverflowBox>\n                    </TableLayout>\n                  </PanelItem>\n                ))\n              ) : (\n                <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n                  {t('No requests found in the last 30 days.')}\n                </EmptyMessage>\n              )}\n            </PanelBody>\n          ) : (\n            <LoadingIndicator />\n          )}\n        </Panel>\n\n        <PaginationButtons>\n          <Button\n            icon={<IconChevron direction=\"left\" size=\"sm\" />}\n            onClick={this.handlePrevPage}\n            disabled={!this.hasPrevPage}\n            aria-label={t('Previous page')}\n          />\n          <Button\n            icon={<IconChevron direction=\"right\" size=\"sm\" />}\n            onClick={this.handleNextPage}\n            disabled={!this.hasNextPage}\n            aria-label={t('Next page')}\n          />\n        </PaginationButtons>\n      </Fragment>\n    );\n  }\n}\n\nconst TableLayout = styled('div')<{hasOrganization: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr 0.5fr ${p => (p.hasOrganization ? '1fr' : '')} 1fr 1fr;\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst OverflowBox = styled('div')`\n  word-break: break-word;\n`;\n\nconst PaginationButtons = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n\n  > :first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n\n  > :nth-child(2) {\n    margin-left: -1px;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n`;\n\nconst RequestLogFilters = styled('div')`\n  display: flex;\n  align-items: center;\n  padding-bottom: ${space(1)};\n\n  > :first-child ${StyledButton} {\n    border-radius: ${p => p.theme.borderRadiusLeft};\n  }\n`;\n\nconst ErrorsOnlyCheckbox = styled('div')`\n  display: flex;\n  gap: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledErrorsOnlyButton = styled(Button)`\n  margin-left: -1px;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n\nconst StyledIconOpen = styled(IconOpen)`\n  margin-left: 6px;\n  color: ${p => p.theme.subText};\n`;\n\nconst Tags = styled('div')`\n  margin: -${space(0.5)};\n`;\n\nconst StyledTag = styled(Tag)`\n  padding: ${space(0.5)};\n  display: inline-flex;\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {LineChart, LineChartSeries} from 'sentry/components/charts/lineChart';\nimport DateTime from 'sentry/components/dateTime';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelBody, PanelFooter, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, SentryApp} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport RequestLog from './requestLog';\n\ntype Props = RouteComponentProps<{appSlug: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = AsyncView['state'] & {\n  app: SentryApp;\n  interactions: {\n    componentInteractions: {\n      [key: string]: [number, number][];\n    };\n    views: [number, number][];\n  };\n  stats: {\n    installStats: [number, number][];\n    totalInstalls: number;\n    totalUninstalls: number;\n    uninstallStats: [number, number][];\n  };\n};\n\nclass SentryApplicationDashboard extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {appSlug} = this.props.params;\n\n    // Default time range for now: 90 days ago to now\n    const now = Math.floor(new Date().getTime() / 1000);\n    const ninety_days_ago = 3600 * 24 * 90;\n\n    return [\n      [\n        'stats',\n        `/sentry-apps/${appSlug}/stats/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n\n      [\n        'interactions',\n        `/sentry-apps/${appSlug}/interaction/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n      ['app', `/sentry-apps/${appSlug}/`],\n    ];\n  }\n\n  getTitle() {\n    return t('Integration Dashboard');\n  }\n\n  renderInstallData() {\n    const {app, stats} = this.state;\n    const {totalUninstalls, totalInstalls} = stats;\n    return (\n      <Fragment>\n        <h5>{t('Installation & Interaction Data')}</h5>\n        <Row>\n          {app.datePublished ? (\n            <StatsSection>\n              <StatsHeader>{t('Date published')}</StatsHeader>\n              <DateTime dateOnly date={app.datePublished} />\n            </StatsSection>\n          ) : null}\n          <StatsSection data-test-id=\"installs\">\n            <StatsHeader>{t('Total installs')}</StatsHeader>\n            <p>{totalInstalls}</p>\n          </StatsSection>\n          <StatsSection data-test-id=\"uninstalls\">\n            <StatsHeader>{t('Total uninstalls')}</StatsHeader>\n            <p>{totalUninstalls}</p>\n          </StatsSection>\n        </Row>\n        {this.renderInstallCharts()}\n      </Fragment>\n    );\n  }\n\n  renderInstallCharts() {\n    const {installStats, uninstallStats} = this.state.stats;\n\n    const installSeries = {\n      data: installStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('installed'),\n    };\n    const uninstallSeries = {\n      data: uninstallStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('uninstalled'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Installations/Uninstallations over Last 90 Days')}</PanelHeader>\n        <ChartWrapper>\n          <BarChart\n            series={[installSeries, uninstallSeries]}\n            height={150}\n            stacked\n            isGroupedByDate\n            legend={{\n              show: true,\n              orient: 'horizontal',\n              data: ['installed', 'uninstalled'],\n              itemWidth: 15,\n            }}\n            yAxis={{type: 'value', minInterval: 1, max: 'dataMax'}}\n            xAxis={{type: 'time'}}\n            grid={{left: space(4), right: space(4)}}\n          />\n        </ChartWrapper>\n      </Panel>\n    );\n  }\n\n  renderIntegrationViews() {\n    const {views} = this.state.interactions;\n    const {organization} = this.props;\n    const {appSlug} = this.props.params;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Integration Views')}</PanelHeader>\n        <PanelBody>\n          <InteractionsChart data={{Views: views}} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {t('Integration views are measured through views on the ')}\n            <Link to={`/sentry-apps/${appSlug}/external-install/`}>\n              {t('external installation page')}\n            </Link>\n            {t(' and views on the Learn More/Install modal on the ')}\n            <Link to={`/settings/${organization.slug}/integrations/`}>\n              {t('integrations page')}\n            </Link>\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderComponentInteractions() {\n    const {componentInteractions} = this.state.interactions;\n    const componentInteractionsDetails = {\n      'stacktrace-link': t(\n        'Each link click or context menu open counts as one interaction'\n      ),\n      'issue-link': t('Each open of the issue link modal counts as one interaction'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Component Interactions')}</PanelHeader>\n\n        <PanelBody>\n          <InteractionsChart data={componentInteractions} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {Object.keys(componentInteractions).map(\n              (component, idx) =>\n                componentInteractionsDetails[component] && (\n                  <Fragment key={idx}>\n                    <strong>{`${component}: `}</strong>\n                    {componentInteractionsDetails[component]}\n                    <br />\n                  </Fragment>\n                )\n            )}\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderBody() {\n    const {app} = this.state;\n\n    return (\n      <div>\n        <SettingsPageHeader title={`${t('Integration Dashboard')} - ${app.name}`} />\n        {app.status === 'published' && this.renderInstallData()}\n        {app.status === 'published' && this.renderIntegrationViews()}\n        {app.schema.elements && this.renderComponentInteractions()}\n        <RequestLog app={app} />\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(SentryApplicationDashboard);\n\ntype InteractionsChartProps = {\n  data: {\n    [key: string]: [number, number][];\n  };\n};\nconst InteractionsChart = ({data}: InteractionsChartProps) => {\n  const elementInteractionsSeries: LineChartSeries[] = Object.keys(data).map(\n    (key: string) => {\n      const seriesData = data[key].map(point => ({\n        value: point[1],\n        name: point[0] * 1000,\n      }));\n      return {\n        seriesName: key,\n        data: seriesData,\n      };\n    }\n  );\n\n  return (\n    <ChartWrapper>\n      <LineChart\n        isGroupedByDate\n        series={elementInteractionsSeries}\n        grid={{left: space(4), right: space(4)}}\n        legend={{\n          show: true,\n          orient: 'horizontal',\n          data: Object.keys(data),\n        }}\n      />\n    </ChartWrapper>\n  );\n};\n\nconst Row = styled('div')`\n  display: flex;\n`;\n\nconst StatsSection = styled('div')`\n  margin-right: ${space(4)};\n`;\nconst StatsHeader = styled('h6')`\n  margin-bottom: ${space(1)};\n  font-size: 12px;\n  text-transform: uppercase;\n  color: ${p => p.theme.subText};\n`;\n\nconst StyledFooter = styled('div')`\n  padding: ${space(1.5)};\n`;\n\nconst ChartWrapper = styled('div')`\n  padding-top: ${space(3)};\n`;\n"],"names":["LineChart","series","seriesOptions","props","map","seriesName","data","dataArray","options","LineSeries","name","value","animation","animationThreshold","animationDuration","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ALL_EVENTS","t","is24Hours","shouldUse24Hours","getEventTypes","memoize","app","issueLinkEvents","issueLinkComponent","schema","elements","find","element","type","hasSelectUri","fields","some","field","createHasSelectUri","create","required_fields","optional_fields","linkHasSelectUri","link","componentHasSelectUri","push","status","events","includes","isAlertable","ResponseCode","code","Tags","StyledTag","TimestampLink","date","href","StyledIconOpen","size","format","RequestLog","eventType","setState","currentPage","remountComponent","errorsOnly","state","hasNextPage","requests","length","hasPrevPage","getEndpoints","slug","query","getDefaultState","super","renderLoading","renderBody","currentRequests","slice","Fragment","RequestLogFilters","triggerLabel","label","onChange","opt","handleChangeEventType","StyledErrorsOnlyButton","onClick","handleChangeErrorsOnly","ErrorsOnlyCheckbox","checked","TableLayout","hasOrganization","loading","request","idx","errorUrl","responseCode","organization","OverflowBox","webhookUrl","icon","PaginationButtons","direction","handlePrevPage","disabled","handleNextPage","p","space","StyledButton","theme","borderRadiusLeft","Button","IconOpen","subText","Tag","SentryApplicationDashboard","appSlug","params","now","Math","floor","Date","getTime","ninety_days_ago","since","until","renderInstallData","stats","totalUninstalls","totalInstalls","Row","datePublished","StatsSection","StatsHeader","dateOnly","renderInstallCharts","installStats","uninstallStats","installSeries","point","uninstallSeries","ChartWrapper","height","stacked","isGroupedByDate","legend","show","orient","itemWidth","yAxis","minInterval","max","xAxis","grid","left","right","renderIntegrationViews","views","interactions","InteractionsChart","Views","StyledFooter","to","renderComponentInteractions","componentInteractions","componentInteractionsDetails","Object","keys","component","withOrganization","elementInteractionsSeries","key"],"sourceRoot":""}