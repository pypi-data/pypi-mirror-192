{"version":3,"file":"chunks/app_views_settings_organizationApiKeys_organizationApiKeyDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"2MAYA,QAZA,SACEA,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,wPCJe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,+9BC0B9B,MAAMO,UAAkCP,EAAAA,EAAwB,sEAexC,MACpBQ,EAAAA,EAAAA,IAAkB,iBAGlBC,EAAAA,eAAAA,MACEC,EAAAA,EAAAA,GAAc,GAAI,CAChBC,UAAW,EACXC,OAAQP,KAAKQ,MAAMD,OACnBE,OAAQT,KAAKQ,MAAMC,SAEtB,KACF,iCAEmB,MAClBC,EAAAA,EAAAA,IAAgB,4CAA4C,GAC7D,CA7BDC,eACE,MAAM,aAACC,GAAgBZ,KAAKQ,MAC5B,MAAO,CACL,CACE,SACC,kBAAiBI,EAAaC,iBAAiBb,KAAKQ,MAAMC,OAAOK,WAGxE,CAEAjB,WACE,OAAOkB,EAAAA,EAAAA,IAAcC,EAAAA,EAAAA,GAAE,gBAAiBhB,KAAKQ,MAAMI,aAAaC,MAAM,EACxE,CAmBAI,aACE,MAAM,aAACL,GAAgBZ,KAAKQ,MAC5B,OACE,0BACE,QAAC,IAAkB,CAACT,OAAOiB,EAAAA,EAAAA,GAAE,mBAE7B,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEA,EAAAA,EAAAA,GAAE,cAChB,QAAC,IAAO,CACNE,UAAU,MACVC,YAAc,kBAAiBP,EAAaC,iBAAiBb,KAAKQ,MAAMC,OAAOK,UAC/EM,YAAapB,KAAKqB,MAAMP,OACxBQ,gBAAiBtB,KAAKuB,oBACtBC,cAAexB,KAAKyB,kBACpBC,SAAU,IACRtB,EAAAA,eAAAA,MACEC,EAAAA,EAAAA,GAAc,GAAI,CAChBC,UAAW,EACXC,OAAQP,KAAKQ,MAAMD,OACnBE,OAAQT,KAAKQ,MAAMC,UAGxB,UAED,QAAC,IAAS,YACR,QAAC,IAAS,CAACkB,OAAOX,EAAAA,EAAAA,GAAE,SAAUY,KAAK,WACnC,QAAC,IAAS,CAACD,OAAOX,EAAAA,EAAAA,GAAE,WAAYY,KAAK,MAAMC,UAAQ,KAEnD,QAAC,IAAS,CAACD,KAAK,aAAaD,OAAOX,EAAAA,EAAAA,GAAE,UAAWc,QAAQ,EAAOC,UAAQ,WACrE,QAAC,KAACH,EAAI,MAAEI,EAAK,SAAEC,GAAS,SACvB,QAAC,IAAgB,CAACD,MAAOA,EAAOC,SAAUA,EAAUL,KAAMA,EAAK,SAC5DM,EAAAA,GAAAA,KAAsBC,IACrB,QAAC,SAAqB,CAACH,MAAOG,EAAM,SACjCA,GADuCA,MAI3B,KAIvB,QAAC,IAAa,CACZR,OAAOX,EAAAA,EAAAA,GAAE,mBACTY,KAAK,kBACLQ,YAAY,0CACZC,KAAK,uDAOnB,EAGF,SAAeC,EAAAA,EAAAA,GAAiBpC,E","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeyDetails.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport TextareaField from 'sentry/components/forms/fields/textareaField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport FormField from 'sentry/components/forms/formField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {API_ACCESS_SCOPES} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport {DeprecatedApiKey} from './types';\n\ntype RouteParams = {\n  apiKey: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = AsyncView['state'] & {\n  apiKey: DeprecatedApiKey;\n};\n\nclass OrganizationApiKeyDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    return [\n      [\n        'apiKey',\n        `/organizations/${organization.slug}/api-keys/${this.props.params.apiKey}/`,\n      ],\n    ];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('Edit API Key'), this.props.organization.slug, false);\n  }\n\n  handleSubmitSuccess = () => {\n    addSuccessMessage('Saved changes');\n\n    // Go back to API list\n    browserHistory.push(\n      recreateRoute('', {\n        stepBack: -1,\n        routes: this.props.routes,\n        params: this.props.params,\n      })\n    );\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Unable to save changes. Please try again.');\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n    return (\n      <div>\n        <SettingsPageHeader title={t('Edit API Key')} />\n\n        <Panel>\n          <PanelHeader>{t('API Key')}</PanelHeader>\n          <ApiForm\n            apiMethod=\"PUT\"\n            apiEndpoint={`/organizations/${organization.slug}/api-keys/${this.props.params.apiKey}/`}\n            initialData={this.state.apiKey}\n            onSubmitSuccess={this.handleSubmitSuccess}\n            onSubmitError={this.handleSubmitError}\n            onCancel={() =>\n              browserHistory.push(\n                recreateRoute('', {\n                  stepBack: -1,\n                  routes: this.props.routes,\n                  params: this.props.params,\n                })\n              )\n            }\n          >\n            <PanelBody>\n              <TextField label={t('Label')} name=\"label\" />\n              <TextField label={t('API Key')} name=\"key\" disabled />\n\n              <FormField name=\"scope_list\" label={t('Scopes')} inline={false} required>\n                {({name, value, onChange}) => (\n                  <MultipleCheckbox value={value} onChange={onChange} name={name}>\n                    {API_ACCESS_SCOPES.map(scope => (\n                      <MultipleCheckbox.Item value={scope} key={scope}>\n                        {scope}\n                      </MultipleCheckbox.Item>\n                    ))}\n                  </MultipleCheckbox>\n                )}\n              </FormField>\n\n              <TextareaField\n                label={t('Allowed Domains')}\n                name=\"allowed_origins\"\n                placeholder=\"e.g. example.com or https://example.com\"\n                help=\"Separate multiple entries with a newline\"\n              />\n            </PanelBody>\n          </ApiForm>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationApiKeyDetails);\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","OrganizationApiKeyDetails","addSuccessMessage","browserHistory","recreateRoute","stepBack","routes","props","params","addErrorMessage","getEndpoints","organization","slug","apiKey","routeTitleGen","t","renderBody","apiMethod","apiEndpoint","initialData","state","onSubmitSuccess","handleSubmitSuccess","onSubmitError","handleSubmitError","onCancel","label","name","disabled","inline","required","value","onChange","API_ACCESS_SCOPES","scope","placeholder","help","withOrganization"],"sourceRoot":""}