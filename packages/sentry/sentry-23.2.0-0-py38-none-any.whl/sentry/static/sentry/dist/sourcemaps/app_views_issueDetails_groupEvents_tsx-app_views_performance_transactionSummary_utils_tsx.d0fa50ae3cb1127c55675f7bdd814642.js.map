{"version":3,"file":"chunks/app_views_issueDetails_groupEvents_tsx-app_views_performance_transactionSummary_utils_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/profiling/routes.tsx","webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/issueDetails/allEventsTable.tsx","webpack:///./app/views/issueDetails/groupEvents.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"sourcesContent":["import {Location, LocationDescriptor, Path} from 'history';\n\nimport {Organization, Project} from 'sentry/types';\nimport {Trace} from 'sentry/types/profiling/core';\n\nexport function generateProfilingRoute({orgSlug}: {orgSlug: Organization['slug']}): Path {\n  return `/organizations/${orgSlug}/profiling/`;\n}\n\nexport function generateProfileSummaryRoute({\n  orgSlug,\n  projectSlug,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n}): Path {\n  return `/organizations/${orgSlug}/profiling/summary/${projectSlug}/`;\n}\n\nexport function generateProfileFlamechartRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/flamechart/`;\n}\n\nexport function generateProfileDetailsRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/details/`;\n}\n\nexport function generateProfilingRouteWithQuery({\n  orgSlug,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfilingRoute({orgSlug});\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileSummaryRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  transaction,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n  transaction: string;\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileSummaryRoute({orgSlug, projectSlug});\n  return {\n    pathname,\n    query: {\n      ...query,\n      transaction,\n    },\n  };\n}\n\nexport function generateProfileFlamechartRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileFlamechartRoute({\n    orgSlug,\n    projectSlug,\n    profileId,\n  });\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileFlamechartRouteWithHighlightFrame({\n  orgSlug,\n  projectSlug,\n  profileId,\n  frameName,\n  framePackage,\n  query,\n}: {\n  frameName: string;\n  framePackage: string;\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  return generateProfileFlamechartRouteWithQuery({\n    orgSlug,\n    projectSlug,\n    profileId,\n    query: {\n      ...query,\n      frameName,\n      framePackage,\n    },\n  });\n}\n\nexport function generateProfileDetailsRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileDetailsRoute({orgSlug, projectSlug, profileId});\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n","import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport LoadingError from 'sentry/components/loadingError';\nimport {PlatformCategory, PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {Group, IssueCategory, Organization} from 'sentry/types';\nimport EventView, {decodeSorts} from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {getConfigForIssueType} from 'sentry/utils/issueTypeConfig';\nimport {platformToCategory} from 'sentry/utils/platform';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport EventsTable from 'sentry/views/performance/transactionSummary/transactionEvents/eventsTable';\n\nexport interface Props {\n  group: Group;\n  issueId: string;\n  location: Location;\n  organization: Organization;\n  excludedTags?: string[];\n}\n\nconst AllEventsTable = (props: Props) => {\n  const {location, organization, issueId, excludedTags, group} = props;\n  const config = getConfigForIssueType(props.group);\n  const [error, setError] = useState<string>('');\n  const routes = useRoutes();\n  const {fields, columnTitles} = getColumns(group, organization);\n\n  const eventView: EventView = EventView.fromLocation(props.location);\n  if (config.usesIssuePlatform) {\n    eventView.dataset = DiscoverDatasets.ISSUE_PLATFORM;\n  }\n  eventView.fields = fields.map(fieldName => ({field: fieldName}));\n\n  eventView.sorts = decodeSorts(location).filter(sort => fields.includes(sort.field));\n\n  useEffect(() => {\n    setError('');\n  }, [eventView.query]);\n\n  if (!eventView.sorts.length) {\n    eventView.sorts = [{field: 'timestamp', kind: 'desc'}];\n  }\n\n  const idQuery =\n    group.issueCategory === IssueCategory.PERFORMANCE\n      ? `performance.issue_ids:${issueId} event.type:transaction`\n      : `issue.id:${issueId}`;\n  eventView.project = [parseInt(group.project.id, 10)];\n  eventView.query = `${idQuery} ${props.location.query.query || ''}`;\n  eventView.statsPeriod = '90d';\n\n  if (error) {\n    return <LoadingError message={error} onRetry={() => setError('')} />;\n  }\n\n  const isReplayEnabled = organization.features.includes('session-replay-ui');\n\n  return (\n    <EventsTable\n      eventView={eventView}\n      location={location}\n      issueId={issueId}\n      organization={organization}\n      routes={routes}\n      excludedTags={excludedTags}\n      projectSlug={group.project.slug}\n      customColumns={['minidump']}\n      setError={(msg: string | undefined) => setError(msg ?? '')}\n      transactionName=\"\"\n      columnTitles={columnTitles.slice()}\n      referrer=\"api.issues.issue_events\"\n      showReplayCol={isReplayEnabled}\n    />\n  );\n};\n\ntype ColumnInfo = {columnTitles: string[]; fields: string[]};\n\nconst getColumns = (group: Group, organization: Organization): ColumnInfo => {\n  const isPerfIssue = group.issueCategory === IssueCategory.PERFORMANCE;\n  const isReplayEnabled = organization.features.includes('session-replay-ui');\n\n  const {fields: platformSpecificFields, columnTitles: platformSpecificColumnTitles} =\n    getPlatformColumns(group.project.platform ?? group.platform, {isReplayEnabled});\n\n  const fields: string[] = [\n    'id',\n    'transaction',\n    'title',\n    'release',\n    'environment',\n    'user.display',\n    'device',\n    'os',\n    ...platformSpecificFields,\n    ...(isPerfIssue ? ['transaction.duration'] : []),\n    'timestamp',\n  ];\n\n  const columnTitles: string[] = [\n    t('event id'),\n    t('transaction'),\n    t('title'),\n    t('release'),\n    t('environment'),\n    t('user'),\n    t('device'),\n    t('os'),\n    ...platformSpecificColumnTitles,\n    ...(isPerfIssue ? [t('total duration')] : []),\n    t('timestamp'),\n    t('minidump'),\n  ];\n\n  return {\n    fields,\n    columnTitles,\n  };\n};\n\nconst getPlatformColumns = (\n  platform: PlatformKey | undefined,\n  options: {isReplayEnabled: boolean}\n): ColumnInfo => {\n  const replayField = options.isReplayEnabled ? ['replayId'] : [];\n  const replayColumnTitle = options.isReplayEnabled ? [t('replay')] : [];\n\n  const backendServerlessColumnInfo = {\n    fields: ['url', 'runtime'],\n    columnTitles: [t('url'), t('runtime')],\n  };\n\n  const categoryToColumnMap: Record<PlatformCategory, ColumnInfo> = {\n    [PlatformCategory.BACKEND]: backendServerlessColumnInfo,\n    [PlatformCategory.SERVERLESS]: backendServerlessColumnInfo,\n    [PlatformCategory.FRONTEND]: {\n      fields: ['url', 'browser', ...replayField],\n      columnTitles: [t('url'), t('browser'), ...replayColumnTitle],\n    },\n    [PlatformCategory.MOBILE]: {\n      fields: ['url'],\n      columnTitles: [t('url')],\n    },\n    [PlatformCategory.DESKTOP]: {\n      fields: [],\n      columnTitles: [],\n    },\n    [PlatformCategory.OTHER]: {\n      fields: [],\n      columnTitles: [],\n    },\n  };\n\n  const platformCategory = platformToCategory(platform);\n\n  return categoryToColumnMap[platformCategory];\n};\n\nexport default AllEventsTable;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport EventSearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {space} from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\nimport {handleRouteLeave} from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport AllEventsTable from './allEventsTable';\n\ntype Props = {\n  api: Client;\n  group: Group;\n  organization: Organization;\n} & RouteComponentProps<{groupId: string}, {}>;\n\ninterface State {\n  query: string;\n}\n\nconst excludedTags = ['environment', 'issue', 'issue.id', 'performance.issue_ids'];\n\nclass GroupEvents extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n\n    this.state = {\n      query: queryParams.query || '',\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState({\n        query: queryParams.query,\n      });\n    }\n  }\n\n  UNSAFE_componentDidMount() {\n    this._unsubscribeHandleRouteLeave = browserHistory.listen(newLocation =>\n      handleRouteLeave({\n        fieldsToClean: ['cursor'],\n        newLocation,\n        oldPathname: this.props.location.pathname,\n      })\n    );\n  }\n\n  UNSAFE_componentWillUnmount() {\n    this._unsubscribeHandleRouteLeave?.();\n  }\n\n  _unsubscribeHandleRouteLeave: undefined | ReturnType<typeof browserHistory.listen>;\n\n  handleSearch = (query: string) => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {organization} = this.props;\n    const {groupId} = this.props.params;\n\n    browserHistory.push(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/issues/${groupId}/events/`,\n        query: targetQueryParams,\n      })\n    );\n  };\n\n  render() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <AllEventsFilters>\n            <EventSearchBar\n              organization={this.props.organization}\n              defaultQuery=\"\"\n              onSearch={this.handleSearch}\n              excludedTags={excludedTags}\n              query={this.state.query}\n              hasRecentSearches={false}\n            />\n          </AllEventsFilters>\n          <AllEventsTable\n            issueId={this.props.group.id}\n            location={this.props.location}\n            organization={this.props.organization}\n            group={this.props.group}\n            excludedTags={excludedTags}\n          />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nconst AllEventsFilters = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nexport {GroupEvents};\n\nexport default withOrganization(withApi(GroupEvents));\n","import {PlainRoute} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {generateProfileFlamechartRoute} from 'sentry/utils/profiling/routes';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nexport enum DisplayModes {\n  DURATION_PERCENTILE = 'durationpercentile',\n  DURATION = 'duration',\n  LATENCY = 'latency',\n  TREND = 'trend',\n  VITALS = 'vitals',\n  USER_MISERY = 'usermisery',\n}\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({\n  orgSlug,\n  subPath,\n}: {\n  orgSlug: string;\n  subPath?: string;\n}): string {\n  return `/organizations/${orgSlug}/performance/summary/${subPath ? `${subPath}/` : ''}`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n  subPath,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  subPath?: string;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n    subPath,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      referrer: 'performance-transaction-summary',\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport function generateProfileLink() {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query | undefined\n  ) => {\n    const profileId = tableRow['profile.id'];\n    if (!profileId) {\n      return {};\n    }\n    return generateProfileFlamechartRoute({\n      orgSlug: organization.slug,\n      projectSlug: String(tableRow['project.name']),\n      profileId: String(profileId),\n    });\n  };\n}\n\nexport function generateReplayLink(routes: PlainRoute<any>[]) {\n  const referrer = getRouteStringFromRoutes(routes);\n\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query | undefined\n  ): LocationDescriptor => {\n    const replayId = tableRow.replayId;\n    if (!replayId) {\n      return {};\n    }\n\n    const replaySlug = `${tableRow['project.name']}:${replayId}`;\n\n    if (!tableRow.timestamp) {\n      return {\n        pathname: `/organizations/${organization.slug}/replays/${replaySlug}/`,\n        query: {\n          referrer,\n        },\n      };\n    }\n\n    const transactionTimestamp = new Date(tableRow.timestamp).getTime();\n\n    const transactionStartTimestamp =\n      transactionTimestamp - (tableRow['transaction.duration'] as number);\n\n    return {\n      pathname: `/organizations/${organization.slug}/replays/${replaySlug}/`,\n      query: {\n        event_t: transactionStartTimestamp,\n        referrer,\n      },\n    };\n  };\n}\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"names":["generateProfileFlamechartRoute","orgSlug","projectSlug","profileId","generateProfilingRouteWithQuery","query","pathname","generateProfilingRoute","generateProfileSummaryRouteWithQuery","transaction","generateProfileSummaryRoute","generateProfileFlamechartRouteWithQuery","generateProfileFlamechartRouteWithHighlightFrame","frameName","framePackage","generateProfileDetailsRouteWithQuery","generateProfileDetailsRoute","handleRouteLeave","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","undefined","reduce","newQuery","browserHistory","location","useLocation","onRouteLeave","useCallback","useEffect","AllEventsTable","props","organization","issueId","excludedTags","group","config","getConfigForIssueType","error","setError","useState","routes","useRoutes","fields","columnTitles","getColumns","eventView","EventView","usesIssuePlatform","dataset","DiscoverDatasets","map","fieldName","sorts","decodeSorts","filter","sort","includes","length","kind","idQuery","issueCategory","IssueCategory","project","parseInt","id","statsPeriod","message","onRetry","isReplayEnabled","features","slug","customColumns","msg","transactionName","slice","referrer","showReplayCol","isPerfIssue","platformSpecificFields","platformSpecificColumnTitles","getPlatformColumns","platform","t","options","replayField","replayColumnTitle","backendServerlessColumnInfo","PlatformCategory","platformToCategory","GroupEvents","Component","constructor","super","targetQueryParams","this","groupId","params","normalizeUrl","queryParams","state","UNSAFE_componentWillReceiveProps","nextProps","search","setState","UNSAFE_componentDidMount","_unsubscribeHandleRouteLeave","UNSAFE_componentWillUnmount","render","fullWidth","AllEventsFilters","defaultQuery","onSearch","handleSearch","hasRecentSearches","space","withOrganization","withApi","DisplayModes","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","MutableSearch","transactionSummaryRouteWithQuery","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","additionalQuery","subPath","generateTransactionSummaryRoute","searchFilter","formatString","environment","start","end","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","spanId","eventSlug","generateEventSlug","getTransactionDetailsUrl","generateProfileLink","String","generateReplayLink","getRouteStringFromRoutes","replayId","replaySlug","timestamp","transactionStartTimestamp","Date","getTime","event_t","SidebarSpacer"],"sourceRoot":""}