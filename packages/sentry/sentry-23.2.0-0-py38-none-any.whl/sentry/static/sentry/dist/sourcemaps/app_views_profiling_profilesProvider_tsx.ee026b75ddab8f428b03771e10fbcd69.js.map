{"version":3,"file":"chunks/app_views_profiling_profilesProvider_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/profiling/profilingBreadcrumbs.tsx","webpack:///./app/utils/profiling/guards/profile.tsx","webpack:///./app/utils/profiling/routes.tsx","webpack:///./app/components/profiling/profileHeader.tsx","webpack:///./app/views/profiling/profilesProvider.tsx","webpack:///./app/utils/profiling/hooks/useSentryEvent.tsx"],"sourcesContent":["import {useMemo} from 'react';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport _Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {\n  generateProfileDetailsRouteWithQuery,\n  generateProfileFlamechartRouteWithQuery,\n  generateProfileSummaryRouteWithQuery,\n  generateProfilingRouteWithQuery,\n} from 'sentry/utils/profiling/routes';\n\nexport interface ProfilingBreadcrumbsProps {\n  organization: Organization;\n  trails: Trail[];\n}\n\nfunction ProfilingBreadcrumbs({organization, trails}: ProfilingBreadcrumbsProps) {\n  const crumbs = useMemo(\n    () => trails.map(trail => trailToCrumb(trail, {organization})),\n    [organization, trails]\n  );\n  return <_Breadcrumbs crumbs={crumbs} />;\n}\n\nfunction trailToCrumb(\n  trail: Trail,\n  {\n    organization,\n  }: {\n    organization: Organization;\n  }\n): Crumb {\n  switch (trail.type) {\n    case 'landing': {\n      return {\n        to: generateProfilingRouteWithQuery({\n          // cursor and query are not used in the landing page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n        }),\n        label: t('Profiling'),\n        preservePageFilters: true,\n      };\n    }\n    case 'profile summary': {\n      return {\n        to: generateProfileSummaryRouteWithQuery({\n          // cursor and query are not used in the summary page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          transaction: trail.payload.transaction,\n        }),\n        label: t('Profile Summary'),\n        preservePageFilters: true,\n      };\n    }\n    case 'flamechart': {\n      const generateRouteWithQuery =\n        trail.payload.tab === 'flamechart'\n          ? generateProfileFlamechartRouteWithQuery\n          : generateProfileDetailsRouteWithQuery;\n      return {\n        to: generateRouteWithQuery({\n          query: trail.payload.query,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          profileId: trail.payload.profileId,\n        }),\n        label: trail.payload.transaction,\n        preservePageFilters: true,\n      };\n    }\n    default:\n      throw new Error(`Unknown breadcrumb type: ${JSON.stringify(trail)}`);\n  }\n}\n\ntype ProfilingTrail = {\n  payload: {\n    query: Location['query'];\n  };\n  type: 'landing';\n};\n\ntype ProfileSummaryTrail = {\n  payload: {\n    projectSlug: Project['slug'];\n    query: Location['query'];\n    transaction: string;\n  };\n  type: 'profile summary';\n};\n\ntype FlamegraphTrail = {\n  payload: {\n    profileId: string;\n    projectSlug: string;\n    query: Location['query'];\n    tab: 'flamechart' | 'details';\n    transaction: string;\n  };\n  type: 'flamechart';\n};\n\ntype Trail = ProfilingTrail | ProfileSummaryTrail | FlamegraphTrail;\n\nexport {ProfilingBreadcrumbs};\n","export function isSchema(input: any): input is Profiling.Schema {\n  return (\n    typeof input === 'object' &&\n    // 'metadata' in input &&\n    'profiles' in input &&\n    Array.isArray(input.profiles) &&\n    'shared' in input\n  );\n}\n\nexport function isEventedProfile(profile: any): profile is Profiling.EventedProfile {\n  return 'type' in profile && profile.type === 'evented';\n}\n\nexport function isSampledProfile(profile: any): profile is Profiling.SampledProfile {\n  return 'type' in profile && profile.type === 'sampled';\n}\n\nexport function isJSProfile(profile: any): profile is JSSelfProfiling.Trace {\n  return !('type' in profile) && Array.isArray(profile.resources);\n}\n\nexport function isSentrySampledProfile(\n  profile: any\n): profile is Profiling.SentrySampledProfile {\n  return (\n    'profile' in profile &&\n    'samples' in profile.profile &&\n    'stacks' in profile.profile &&\n    'frames' in profile.profile\n  );\n}\n\nexport function isChromeTraceObjectFormat(\n  profile: any\n): profile is ChromeTrace.ObjectFormat {\n  return typeof profile === 'object' && 'traceEvents' in profile;\n}\n\n// We check for the presence of at least one ProfileChunk event in the trace\nexport function isChromeTraceArrayFormat(\n  profile: any\n): profile is ChromeTrace.ProfileType {\n  return (\n    Array.isArray(profile) && profile.some(p => p.ph === 'P' && p.name === 'ProfileChunk')\n  );\n}\n\n// Typescript uses only a subset of the event types (only B and E cat),\n// so we need to inspect the contents of the trace to determine the type of the profile.\n// The TS trace can still contain other event types like metadata events, meaning we cannot\n// use array.every() and need to check all the events to make sure no P events are present\nexport function isTypescriptChromeTraceArrayFormat(\n  profile: any\n): profile is ChromeTrace.ArrayFormat {\n  return (\n    Array.isArray(profile) &&\n    !profile.some(p => p.ph === 'P' && p.name === 'ProfileChunk')\n  );\n}\n\nexport function isChromeTraceFormat(\n  profile: Readonly<any>\n): profile is ChromeTrace.ArrayFormat {\n  return (\n    isTypescriptChromeTraceArrayFormat(profile) ||\n    isChromeTraceObjectFormat(profile) ||\n    isChromeTraceArrayFormat(profile)\n  );\n}\n","import {Location, LocationDescriptor, Path} from 'history';\n\nimport {Organization, Project} from 'sentry/types';\nimport {Trace} from 'sentry/types/profiling/core';\n\nexport function generateProfilingRoute({orgSlug}: {orgSlug: Organization['slug']}): Path {\n  return `/organizations/${orgSlug}/profiling/`;\n}\n\nexport function generateProfileSummaryRoute({\n  orgSlug,\n  projectSlug,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n}): Path {\n  return `/organizations/${orgSlug}/profiling/summary/${projectSlug}/`;\n}\n\nexport function generateProfileFlamechartRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/flamechart/`;\n}\n\nexport function generateProfileDetailsRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/details/`;\n}\n\nexport function generateProfilingRouteWithQuery({\n  orgSlug,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfilingRoute({orgSlug});\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileSummaryRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  transaction,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n  transaction: string;\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileSummaryRoute({orgSlug, projectSlug});\n  return {\n    pathname,\n    query: {\n      ...query,\n      transaction,\n    },\n  };\n}\n\nexport function generateProfileFlamechartRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileFlamechartRoute({\n    orgSlug,\n    projectSlug,\n    profileId,\n  });\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileFlamechartRouteWithHighlightFrame({\n  orgSlug,\n  projectSlug,\n  profileId,\n  frameName,\n  framePackage,\n  query,\n}: {\n  frameName: string;\n  framePackage: string;\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  return generateProfileFlamechartRouteWithQuery({\n    orgSlug,\n    projectSlug,\n    profileId,\n    query: {\n      ...query,\n      frameName,\n      framePackage,\n    },\n  });\n}\n\nexport function generateProfileDetailsRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileDetailsRoute({orgSlug, projectSlug, profileId});\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n","import {useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Link from 'sentry/components/links/link';\nimport {\n  ProfilingBreadcrumbs,\n  ProfilingBreadcrumbsProps,\n} from 'sentry/components/profiling/profilingBreadcrumbs';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Event} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {isSchema, isSentrySampledProfile} from 'sentry/utils/profiling/guards/profile';\nimport {\n  generateProfileDetailsRouteWithQuery,\n  generateProfileFlamechartRouteWithQuery,\n} from 'sentry/utils/profiling/routes';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useProfiles} from 'sentry/views/profiling/profilesProvider';\n\nfunction getTransactionName(input: Profiling.ProfileInput): string {\n  if (isSchema(input)) {\n    return input.metadata.transactionName;\n  }\n  if (isSentrySampledProfile(input)) {\n    return input.transactions?.[0]?.name || t('Unknown Transaction');\n  }\n\n  return t('Unknown Transaction');\n}\n\ninterface ProfileHeaderProps {\n  eventId: string;\n  projectId: string;\n  transaction: Event | null;\n}\n\nfunction ProfileHeader({transaction, projectId, eventId}: ProfileHeaderProps) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const profiles = useProfiles();\n\n  const transactionName =\n    profiles.type === 'resolved' ? getTransactionName(profiles.data) : '';\n  const profileId = eventId ?? '';\n  const projectSlug = projectId ?? '';\n\n  const transactionTarget = transaction?.id\n    ? getTransactionDetailsUrl(organization.slug, `${projectSlug}:${transaction.id}`)\n    : null;\n\n  function handleGoToTransaction() {\n    trackAdvancedAnalyticsEvent('profiling_views.go_to_transaction', {\n      organization,\n      source: 'transaction_details',\n    });\n  }\n\n  const breadcrumbTrails: ProfilingBreadcrumbsProps['trails'] = useMemo(() => {\n    return [\n      {type: 'landing', payload: {query: location.query}},\n      {\n        type: 'profile summary',\n        payload: {\n          projectSlug,\n          transaction: transactionName,\n          query: location.query,\n        },\n      },\n      {\n        type: 'flamechart',\n        payload: {\n          transaction: transactionName,\n          profileId,\n          projectSlug,\n          query: location.query,\n          tab: location.pathname.endsWith('details/') ? 'details' : 'flamechart',\n        },\n      },\n    ];\n  }, [location, projectSlug, transactionName, profileId]);\n\n  return (\n    <SmallerLayoutHeader>\n      <SmallerHeaderContent>\n        <SmallerProfilingBreadcrumbsWrapper>\n          <ProfilingBreadcrumbs organization={organization} trails={breadcrumbTrails} />\n        </SmallerProfilingBreadcrumbsWrapper>\n      </SmallerHeaderContent>\n      <Layout.HeaderActions>\n        {transactionTarget && (\n          <Button size=\"sm\" onClick={handleGoToTransaction} to={transactionTarget}>\n            {t('Go to Transaction')}\n          </Button>\n        )}\n      </Layout.HeaderActions>\n      <SmallerProfilingHeaderNavTabs underlined>\n        <li className={location.pathname.endsWith('flamechart/') ? 'active' : undefined}>\n          <Link\n            to={generateProfileFlamechartRouteWithQuery({\n              orgSlug: organization.slug,\n              projectSlug,\n              profileId,\n              query: location.query,\n            })}\n          >\n            {t('Flamechart')}\n          </Link>\n        </li>\n        <li className={location.pathname.endsWith('details/') ? 'active' : undefined}>\n          <Link\n            to={generateProfileDetailsRouteWithQuery({\n              orgSlug: organization.slug,\n              projectSlug,\n              profileId,\n              query: location.query,\n            })}\n          >\n            {t('Details')}\n          </Link>\n        </li>\n      </SmallerProfilingHeaderNavTabs>\n    </SmallerLayoutHeader>\n  );\n}\n\nconst SmallerHeaderContent = styled(Layout.HeaderContent)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst SmallerProfilingBreadcrumbsWrapper = styled('div')`\n  nav {\n    padding-bottom: ${space(1)};\n  }\n`;\n\nconst SmallerProfilingHeaderNavTabs = styled(Layout.HeaderNavTabs)`\n  a {\n    padding-top: 0 !important;\n  }\n`;\nconst SmallerLayoutHeader = styled(Layout.Header)`\n  padding: ${space(1)} ${space(2)} ${space(0)} ${space(2)} !important;\n`;\n\nexport {ProfileHeader};\n","import {createContext, useContext, useEffect, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {Client} from 'sentry/api';\nimport {ProfileHeader} from 'sentry/components/profiling/profileHeader';\nimport {t} from 'sentry/locale';\nimport type {EventTransaction, Organization, Project} from 'sentry/types';\nimport {RequestState} from 'sentry/types/core';\nimport {useSentryEvent} from 'sentry/utils/profiling/hooks/useSentryEvent';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useParams} from 'sentry/utils/useParams';\n\nimport {isSchema} from '../../utils/profiling/guards/profile';\n\nfunction fetchFlamegraphs(\n  api: Client,\n  eventId: string,\n  projectSlug: Project['slug'],\n  orgSlug: Organization['slug']\n): Promise<Profiling.ProfileInput> {\n  return api\n    .requestPromise(\n      `/projects/${orgSlug}/${projectSlug}/profiling/profiles/${eventId}/`,\n      {\n        method: 'GET',\n        includeAllArgs: true,\n      }\n    )\n    .then(([data]) => data);\n}\n\nfunction getTransactionId(input: Profiling.ProfileInput): string | null {\n  if (isSchema(input)) {\n    return input.metadata.transactionID;\n  }\n  return null;\n}\n\ninterface FlamegraphViewProps {\n  children: React.ReactNode;\n}\n\ntype ProfileProviderValue = RequestState<Profiling.ProfileInput>;\ntype SetProfileProviderValue = React.Dispatch<\n  React.SetStateAction<RequestState<Profiling.ProfileInput>>\n>;\nexport const ProfileContext = createContext<ProfileProviderValue | null>(null);\nconst SetProfileProvider = createContext<SetProfileProviderValue | null>(null);\n\nexport function useProfiles() {\n  const context = useContext(ProfileContext);\n  if (!context) {\n    throw new Error('useProfiles was called outside of ProfileProvider');\n  }\n  return context;\n}\n\nexport function useSetProfiles() {\n  const context = useContext(SetProfileProvider);\n  if (!context) {\n    throw new Error('useSetProfiles was called outside of SetProfileProvider');\n  }\n  return context;\n}\n\nconst ProfileTransactionContext =\n  createContext<RequestState<EventTransaction | null> | null>(null);\n\nexport function useProfileTransaction() {\n  const context = useContext(ProfileTransactionContext);\n  if (!context) {\n    throw new Error(\n      'useProfileTransaction was called outside of ProfileTransactionContext'\n    );\n  }\n  return context;\n}\n\nfunction ProfileProviderWrapper(props: FlamegraphViewProps): React.ReactElement {\n  const organization = useOrganization();\n  const params = useParams();\n\n  const [profiles, setProfiles] = useState<RequestState<Profiling.ProfileInput>>({\n    type: 'initial',\n  });\n\n  const profileTransaction = useSentryEvent<EventTransaction>(\n    params.orgId,\n    params.projectId,\n    profiles.type === 'resolved' ? getTransactionId(profiles.data) : null\n  );\n\n  return (\n    <ProfilesProvider\n      onUpdateProfiles={setProfiles}\n      orgSlug={organization.slug}\n      profileId={params.eventId}\n      projectSlug={params.projectId}\n    >\n      <SetProfileProvider.Provider value={setProfiles}>\n        <ProfileTransactionContext.Provider value={profileTransaction}>\n          <ProfileHeader\n            eventId={params.eventId}\n            projectId={params.projectId}\n            transaction={\n              profileTransaction.type === 'resolved' ? profileTransaction.data : null\n            }\n          />\n          {props.children}\n        </ProfileTransactionContext.Provider>\n      </SetProfileProvider.Provider>\n    </ProfilesProvider>\n  );\n}\n\ninterface ProfilesProviderProps {\n  children: React.ReactNode;\n  orgSlug: Organization['slug'];\n  profileId: string;\n  projectSlug: Project['slug'];\n  onUpdateProfiles?: (any) => void;\n}\n\nexport function ProfilesProvider({\n  children,\n  onUpdateProfiles,\n  orgSlug,\n  projectSlug,\n  profileId,\n}: ProfilesProviderProps) {\n  const api = useApi();\n\n  const [profiles, setProfiles] = useState<RequestState<Profiling.ProfileInput>>({\n    type: 'initial',\n  });\n\n  useEffect(() => {\n    if (!profileId || !projectSlug || !orgSlug) {\n      return undefined;\n    }\n\n    setProfiles({type: 'loading'});\n\n    fetchFlamegraphs(api, profileId, projectSlug, orgSlug)\n      .then(p => {\n        setProfiles({type: 'resolved', data: p});\n        onUpdateProfiles?.({type: 'resolved', data: p});\n      })\n      .catch(err => {\n        const message = err.toString() || t('Error: Unable to load profiles');\n        setProfiles({type: 'errored', error: message});\n        onUpdateProfiles?.({type: 'errored', error: message});\n        Sentry.captureException(err);\n      });\n\n    return () => {\n      api.clear();\n    };\n  }, [api, onUpdateProfiles, orgSlug, projectSlug, profileId]);\n\n  return <ProfileContext.Provider value={profiles}>{children}</ProfileContext.Provider>;\n}\n\nexport default ProfileProviderWrapper;\n","import {useEffect, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {Event, RequestState} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\nfunction fetchSentryEvent<T extends Event>(\n  api: Client,\n  organizationSlug: string,\n  projectSlug: string,\n  eventId: string\n): Promise<T> {\n  return api.requestPromise(\n    `/projects/${organizationSlug}/${projectSlug}/events/${eventId}/`\n  );\n}\n\nexport function useSentryEvent<T extends Event>(\n  organizationSlug: string,\n  projectSlug: string,\n  eventId: string | null\n): RequestState<T> {\n  const api = useApi();\n  const [requestState, setRequestState] = useState<RequestState<T>>({\n    type: 'initial',\n  });\n\n  useEffect(() => {\n    if (eventId === null) {\n      return undefined;\n    }\n\n    fetchSentryEvent<T>(api, organizationSlug, projectSlug, eventId)\n      .then(event => {\n        setRequestState({\n          type: 'resolved',\n          data: event,\n        });\n      })\n      .catch(err => {\n        setRequestState({type: 'errored', error: err});\n      });\n\n    return () => {\n      api.clear();\n    };\n  }, [api, organizationSlug, projectSlug, eventId]);\n\n  return requestState;\n}\n"],"names":["ProfilingBreadcrumbs","organization","trails","crumbs","useMemo","map","trail","type","to","generateProfilingRouteWithQuery","query","omit","payload","orgSlug","slug","label","t","preservePageFilters","generateProfileSummaryRouteWithQuery","projectSlug","transaction","tab","generateProfileFlamechartRouteWithQuery","generateProfileDetailsRouteWithQuery","profileId","Error","JSON","stringify","trailToCrumb","isSchema","input","Array","isArray","profiles","isEventedProfile","profile","isSampledProfile","isJSProfile","resources","isSentrySampledProfile","isChromeTraceObjectFormat","isTypescriptChromeTraceArrayFormat","some","p","ph","name","isChromeTraceFormat","isChromeTraceArrayFormat","generateProfileFlamechartRoute","pathname","generateProfilingRoute","generateProfileSummaryRoute","generateProfileFlamechartRouteWithHighlightFrame","frameName","framePackage","generateProfileDetailsRoute","ProfileHeader","projectId","eventId","location","useLocation","useOrganization","useProfiles","transactionName","data","metadata","transactions","transactionTarget","id","getTransactionDetailsUrl","breadcrumbTrails","endsWith","SmallerLayoutHeader","SmallerHeaderContent","SmallerProfilingBreadcrumbsWrapper","size","onClick","trackAdvancedAnalyticsEvent","source","SmallerProfilingHeaderNavTabs","underlined","className","undefined","Layout","space","ProfileContext","createContext","SetProfileProvider","context","useContext","useSetProfiles","ProfileTransactionContext","useProfileTransaction","ProfileProviderWrapper","props","params","useParams","setProfiles","useState","profileTransaction","organizationSlug","api","useApi","requestState","setRequestState","useEffect","requestPromise","fetchSentryEvent","then","event","catch","err","error","clear","useSentryEvent","orgId","transactionID","ProfilesProvider","onUpdateProfiles","Provider","value","children","method","includeAllArgs","fetchFlamegraphs","message","toString","Sentry"],"sourceRoot":""}