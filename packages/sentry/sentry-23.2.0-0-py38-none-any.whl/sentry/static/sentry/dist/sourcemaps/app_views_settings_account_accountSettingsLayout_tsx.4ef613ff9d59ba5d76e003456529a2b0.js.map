{"version":3,"file":"chunks/app_views_settings_account_accountSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"msBAQA,MAAMA,EAA4B,QAAC,aAACC,GAAoB,SACtD,QAAC,IAAkB,CAACC,mBAAmBC,EAAAA,EAAAA,GAAiB,CAACF,kBAAkB,EADvED,EAAyB,wCAI/B,U,8DCIA,MAAMI,UAA8BC,EAAAA,UAKlCC,kBACE,MAAO,CACLL,aAAcM,KAAKC,MAAMP,aAE7B,CAEAQ,mBAAmBC,GACjB,MAAM,IAACC,EAAG,aAAEV,GAAgBM,KAAKC,MAC7BE,EAAUT,eAAiBA,GAO3BA,QAA+C,IAAxBA,EAAaW,SACtCC,EAAAA,EAAAA,IAAyBF,EAAKV,EAAaa,KAAM,CAC/CC,WAAW,EACXC,cAAc,GAGpB,CAEAC,SACE,MAAM,aAAChB,GAAgBM,KAAKC,MAE5B,OACE,QAAC,IAAc,IACTD,KAAKC,MACTU,iBAAkB,KAAM,QAAC,EAAyB,CAACjB,aAAcA,IAAiB,SAEjFM,KAAKC,MAAMW,UAGlB,EAvCIf,EAAqB,4CAArBA,EAAqB,oBACE,CACzBH,aAAcmB,EAAAA,EAAAA,eAwClB,SAAeC,EAAAA,EAAAA,IAAkBC,EAAAA,EAAAA,GAAQlB,G","sources":["webpack:///./app/views/settings/account/accountSettingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsLayout.tsx"],"sourcesContent":["import {Organization} from 'sentry/types';\nimport getConfiguration from 'sentry/views/settings/account/navigationConfiguration';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\n\ntype Props = {\n  organization: Organization;\n};\n\nconst AccountSettingsNavigation = ({organization}: Props) => (\n  <SettingsNavigation navigationObjects={getConfiguration({organization})} />\n);\n\nexport default AccountSettingsNavigation;\n","import {Component} from 'react';\n\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport {Client} from 'sentry/api';\nimport SentryTypes from 'sentry/sentryTypes';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withLatestContext from 'sentry/utils/withLatestContext';\nimport AccountSettingsNavigation from 'sentry/views/settings/account/accountSettingsNavigation';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\n\ntype Props = React.ComponentProps<typeof SettingsLayout> & {\n  api: Client;\n  organization: Organization;\n};\n\nclass AccountSettingsLayout extends Component<Props> {\n  static childContextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getChildContext() {\n    return {\n      organization: this.props.organization,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {api, organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(api, organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SettingsLayout\n        {...this.props}\n        renderNavigation={() => <AccountSettingsNavigation organization={organization} />}\n      >\n        {this.props.children}\n      </SettingsLayout>\n    );\n  }\n}\n\nexport default withLatestContext(withApi(AccountSettingsLayout));\n"],"names":["AccountSettingsNavigation","organization","navigationObjects","getConfiguration","AccountSettingsLayout","Component","getChildContext","this","props","componentDidUpdate","prevProps","api","access","fetchOrganizationDetails","slug","setActive","loadProjects","render","renderNavigation","children","SentryTypes","withLatestContext","withApi"],"sourceRoot":""}