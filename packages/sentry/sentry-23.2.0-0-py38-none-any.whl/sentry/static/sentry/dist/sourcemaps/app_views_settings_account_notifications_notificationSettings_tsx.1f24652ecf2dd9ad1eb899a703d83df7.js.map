{"version":3,"file":"chunks/app_views_settings_account_notifications_notificationSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"6vCA0CA,MAAMA,UAA6BC,EAAAA,EAA6B,uDACtD,IAAIC,EAAAA,IAAW,uCAwBG,CACxBC,EACAC,KASA,MAAM,qBAACC,GAAwBC,KAAKC,MAE9BC,GAA8BC,EAAAA,EAAAA,IAClCL,EACAC,EACAF,GACAO,EAAAA,EAAAA,IAAaN,EAAkBC,IAUjC,OAPAC,KAAKK,SAAS,CACZN,sBAAsBO,EAAAA,EAAAA,IACpBP,EACAG,KAIGA,CAA2B,KACnC,6BAiFgBK,IACXC,EAAAA,GAAAA,SAA0CD,GAC5CP,KAAKS,MAAMC,eAAe,CAACC,YAAa,6BAExCX,KAAKS,MAAMC,eAAe,CAACC,YAAa,oCAC1C,GACD,CAzIDC,kBACE,MAAO,IACFC,MAAMD,kBACTb,qBAAsB,CAAC,EACvBe,WAAY,CAAC,EAEjB,CAEAC,eACE,MAAO,CACL,CAAC,uBAAyB,oCAC1B,CAAC,aAAc,4BAEnB,CAEAC,qBAEEC,EAAAA,EAAAA,GAA4B,0CAA2C,CACrEC,aAAc,MAElB,CAgCIC,+BAEF,OAAOC,EAAAA,GAAAA,QAAmCC,IACxC,MAAMC,EAAmBC,EAAAA,GAAyBF,GAClD,OAAIC,GACKtB,KAAKwB,MAAMC,cAAcC,MAAKC,GACnCA,EAAIC,UAAUC,SAASP,IAGhB,GAEf,CAEAQ,iBACE,MAAM,qBAAC/B,EAAoB,WAAEe,GAAcd,KAAKC,MAchD,MALuB,IAPU8B,OAAOC,YACtChC,KAAKmB,yBAAyBc,KAAInC,GAAoB,CACpDA,GACAoC,EAAAA,EAAAA,IAAcpC,EAAkBC,UAM/Be,EAIP,CAEAqB,YACE,MAAM,qBAACpC,GAAwBC,KAAKC,MAE9BmC,EAAwB,GACxBC,EAA6B,GACnC,IAAK,MAAMvC,KAAoBE,KAAKmB,yBAA0B,CAC5D,MAAMmB,EAAQP,OAAOQ,OAAO,CAAC,EAAGC,EAAAA,EAA4B1C,GAAmB,CAC7E2C,QAASC,GAAQ1C,KAAKG,wBAAwBuC,EAAM5C,GACpD6C,MACE,QAAC,EAAAC,SAAQ,WACP,uBACGJ,EAAAA,EAA4B1C,GAAkB6C,KAAK,KAEpD,QAAC,IAAI,CACH,eAAa,cACbE,GAAK,mCAAkCC,EAAAA,GAAgChD,KAAoB,SAC5F,sBASPiD,EAAAA,EAAAA,IAAsBjD,EAAkBC,IACvB,mBAAVuC,IAEPA,EAAMU,QAAU,CAACC,MAAOC,EAAAA,KAEP,UAAfZ,EAAMjB,KACRgB,EAAYc,KAAKb,GAEjBF,EAAOe,KAAKb,EAEhB,CAEA,MAAMc,EAAc5C,EAAAA,GAAAA,KAClBa,GAAQmB,EAAAA,EAA4BnB,KAOtC,OAJAe,EAAOe,QAAQC,GAEG,IAAIhB,KAAWC,EAGnC,CAUAgB,aACE,OACE,QAAC,EAAAT,SAAQ,YACP,QAAC,IAAkB,CAACU,MAAM,mBAC1B,QAAC,IAAS,UAAC,6DACX,QAAC,IAAI,CACH7C,MAAOT,KAAKS,MACZ8C,YAAU,EACVC,UAAU,MACVC,cAAezD,KAAKyD,cACpBC,YAAa1D,KAAK8B,iBAAiB,UAEnC,QAAC,IAAQ,CAACwB,OAAOK,EAAAA,EAAAA,GAAE,iBAAkBvB,OAAQpC,KAAKmC,iBAEpD,QAAC,IAAS,CAACU,GAAG,2BAA2Be,MAAM,QAAC,IAAQ,IAAI,UACzDD,EAAAA,EAAAA,GAAE,wEAIX,EAGF,SAAeE,EAAAA,EAAAA,GAAkBnE,E","sources":["webpack:///./app/views/settings/account/notifications/notificationSettings.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {FieldObject} from 'sentry/components/forms/types';\nimport Link from 'sentry/components/links/link';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  CONFIRMATION_MESSAGE,\n  NOTIFICATION_FEATURE_MAP,\n  NOTIFICATION_SETTINGS_PATHNAMES,\n  NOTIFICATION_SETTINGS_TYPES,\n  NotificationSettingsObject,\n  SELF_NOTIFICATION_SETTINGS_TYPES,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'sentry/views/settings/account/notifications/fields2';\nimport {\n  decideDefault,\n  getParentIds,\n  getStateToPutForDefault,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'sentry/views/settings/account/notifications/utils';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'] & {\n  organizations: Organization[];\n};\n\ntype State = {\n  legacyData: {[key: string]: string};\n  notificationSettings: NotificationSettingsObject;\n} & AsyncComponent['state'];\n\nclass NotificationSettings extends AsyncComponent<Props, State> {\n  model = new FormModel();\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      legacyData: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [\n      ['notificationSettings', `/users/me/notification-settings/`],\n      ['legacyData', '/users/me/notifications/'],\n    ];\n  }\n\n  componentDidMount() {\n    // only tied to a user\n    trackAdvancedAnalyticsEvent('notification_settings.index_page_viewed', {\n      organization: null,\n    });\n  }\n\n  getStateToPutForDefault = (\n    changedData: {[key: string]: string},\n    notificationType: string\n  ) => {\n    /**\n     * Update the current providers' parent-independent notification settings\n     * with the new value. If the new value is \"never\", then also update all\n     * parent-specific notification settings to \"default\". If the previous value\n     * was \"never\", then assume providerList should be \"email\" only.\n     */\n\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  get notificationSettingsType() {\n    // filter out notification settings if the feature flag isn't set\n    return NOTIFICATION_SETTINGS_TYPES.filter(type => {\n      const notificationFlag = NOTIFICATION_FEATURE_MAP[type];\n      if (notificationFlag) {\n        return this.props.organizations.some(org =>\n          org.features?.includes(notificationFlag)\n        );\n      }\n      return true;\n    });\n  }\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationSettings, legacyData} = this.state;\n\n    const notificationsInitialData = Object.fromEntries(\n      this.notificationSettingsType.map(notificationType => [\n        notificationType,\n        decideDefault(notificationType, notificationSettings),\n      ])\n    );\n\n    const allInitialData = {\n      ...notificationsInitialData,\n      ...legacyData,\n    };\n\n    return allInitialData;\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationSettings} = this.state;\n\n    const fields: FieldObject[] = [];\n    const endOfFields: FieldObject[] = [];\n    for (const notificationType of this.notificationSettingsType) {\n      const field = Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        getData: data => this.getStateToPutForDefault(data, notificationType),\n        help: (\n          <Fragment>\n            <p>\n              {NOTIFICATION_SETTING_FIELDS[notificationType].help}\n              &nbsp;\n              <Link\n                data-test-id=\"fine-tuning\"\n                to={`/settings/account/notifications/${NOTIFICATION_SETTINGS_PATHNAMES[notificationType]}`}\n              >\n                Fine tune\n              </Link>\n            </p>\n          </Fragment>\n        ),\n      }) as any;\n\n      if (\n        isSufficientlyComplex(notificationType, notificationSettings) &&\n        typeof field !== 'function'\n      ) {\n        field.confirm = {never: CONFIRMATION_MESSAGE};\n      }\n      if (field.type === 'blank') {\n        endOfFields.push(field);\n      } else {\n        fields.push(field);\n      }\n    }\n\n    const legacyField = SELF_NOTIFICATION_SETTINGS_TYPES.map(\n      type => NOTIFICATION_SETTING_FIELDS[type] as FieldObject\n    );\n\n    fields.push(...legacyField);\n\n    const allFields = [...fields, ...endOfFields];\n\n    return allFields;\n  }\n\n  onFieldChange = (fieldName: string) => {\n    if (SELF_NOTIFICATION_SETTINGS_TYPES.includes(fieldName)) {\n      this.model.setFormOptions({apiEndpoint: '/users/me/notifications/'});\n    } else {\n      this.model.setFormOptions({apiEndpoint: '/users/me/notification-settings/'});\n    }\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Notifications\" />\n        <TextBlock>Personal notifications sent by email or an integration.</TextBlock>\n        <Form\n          model={this.model}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          onFieldChange={this.onFieldChange}\n          initialData={this.getInitialData()}\n        >\n          <JsonForm title={t('Notifications')} fields={this.getFields()} />\n        </Form>\n        <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n          {t('Looking to add or remove an email address? Use the emails panel.')}\n        </AlertLink>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettings);\n"],"names":["NotificationSettings","AsyncComponent","FormModel","changedData","notificationType","notificationSettings","this","state","updatedNotificationSettings","getStateToPutForDefault","getParentIds","setState","mergeNotificationSettings","fieldName","SELF_NOTIFICATION_SETTINGS_TYPES","model","setFormOptions","apiEndpoint","getDefaultState","super","legacyData","getEndpoints","componentDidMount","trackAdvancedAnalyticsEvent","organization","notificationSettingsType","NOTIFICATION_SETTINGS_TYPES","type","notificationFlag","NOTIFICATION_FEATURE_MAP","props","organizations","some","org","features","includes","getInitialData","Object","fromEntries","map","decideDefault","getFields","fields","endOfFields","field","assign","NOTIFICATION_SETTING_FIELDS","getData","data","help","Fragment","to","NOTIFICATION_SETTINGS_PATHNAMES","isSufficientlyComplex","confirm","never","CONFIRMATION_MESSAGE","push","legacyField","renderBody","title","saveOnBlur","apiMethod","onFieldChange","initialData","t","icon","withOrganizations"],"sourceRoot":""}