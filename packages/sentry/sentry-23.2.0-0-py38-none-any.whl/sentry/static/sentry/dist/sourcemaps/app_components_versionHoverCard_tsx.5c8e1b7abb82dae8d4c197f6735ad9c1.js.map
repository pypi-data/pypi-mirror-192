{"version":3,"file":"chunks/app_components_versionHoverCard_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/release.tsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/repoLabel.tsx","webpack:///./app/components/versionHoverCard.tsx","webpack:///./app/utils/withRelease.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport ReleaseStore, {getReleaseStoreKey} from 'sentry/stores/releaseStore';\nimport {Deploy, Release, ReleaseStatus} from 'sentry/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\nexport function getProjectRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/`;\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRelease for the same\n  // release to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  ReleaseStore.state.releaseLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseStore.loadRelease(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Release) => {\n      ReleaseStore.loadReleaseSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseStore.loadReleaseSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseStore.loadReleaseError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getRelease-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function getReleaseDeploys(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/deploys/`;\n\n  // HACK(leedongwei): Same as above\n  ReleaseStore.state.deploysLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseStore.loadDeploys(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Deploy[]) => {\n      ReleaseStore.loadDeploysSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseStore.loadDeploysSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseStore.loadDeploysError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getReleaseDeploys-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function archiveRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseStore.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Archiving Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Archived,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseStore.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully archived.'));\n    })\n    .catch(error => {\n      ReleaseStore.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be archived.')\n      );\n      throw error;\n    });\n}\n\nexport function restoreRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseStore.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Restoring Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Active,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseStore.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully restored.'));\n    })\n    .catch(error => {\n      ReleaseStore.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be restored.')\n      );\n      throw error;\n    });\n}\n","import styled from '@emotion/styled';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AvatarUser, Commit} from 'sentry/types';\n\ntype Props = {\n  commit: Commit;\n  className?: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nfunction LastCommit({commit, className}: Props) {\n  function renderMessage(message: Commit['message']) {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have ellipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return `${truncated}\\u2026`;\n    }\n    return firstLine;\n  }\n\n  const commitAuthor = commit?.author;\n  return (\n    <div className={className}>\n      <h6>Last commit</h6>\n      <InnerWrap>\n        <UserAvatar user={commitAuthor || unknownUser} />\n        <div>\n          <Message>{renderMessage(commit.message)}</Message>\n          <Meta>\n            <strong>{commitAuthor?.name || t('Unknown Author')}</strong>\n            &nbsp;\n            <TimeSince date={commit.dateCreated} />\n          </Meta>\n        </div>\n      </InnerWrap>\n    </div>\n  );\n}\n\nexport default LastCommit;\n\nconst InnerWrap = styled('div')`\n  display: grid;\n  grid-template-columns: max-content minmax(0, 1fr);\n  gap: ${space(1)};\n  margin-top: ${space(1)};\n`;\n\nconst Message = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  margin-bottom: ${space(0.5)};\n`;\n\nconst Meta = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.subText};\n`;\n","import styled from '@emotion/styled';\n\nconst RepoLabel = styled('span')`\n  /* label mixin from bootstrap */\n  font-weight: 700;\n  color: ${p => p.theme.white};\n  text-align: center;\n  white-space: nowrap;\n  border-radius: 0.25em;\n  /* end of label mixin from bootstrap */\n\n  ${p => p.theme.overflowEllipsis};\n\n  display: inline-block;\n  vertical-align: text-bottom;\n  line-height: 1;\n  background: ${p => p.theme.gray200};\n  padding: 3px;\n  max-width: 86px;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default RepoLabel;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport AvatarList from 'sentry/components/avatar/avatarList';\nimport {Button} from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport {Divider, Hovercard} from 'sentry/components/hovercard';\nimport LastCommit from 'sentry/components/lastCommit';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport RepoLabel from 'sentry/components/repoLabel';\nimport TimeSince from 'sentry/components/timeSince';\nimport Version from 'sentry/components/version';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Deploy, Organization, Release, Repository} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport withRelease from 'sentry/utils/withRelease';\nimport withRepositories from 'sentry/utils/withRepositories';\n\ninterface Props extends React.ComponentProps<typeof Hovercard> {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n\n  releaseVersion: string;\n  deploys?: Array<Deploy>;\n  deploysError?: Error;\n  deploysLoading?: boolean;\n  release?: Release;\n  releaseError?: Error;\n  releaseLoading?: boolean;\n  repositories?: Array<Repository>;\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n}\n\ntype State = {\n  visible: boolean;\n};\n\nclass VersionHoverCard extends Component<Props, State> {\n  state: State = {\n    visible: false,\n  };\n\n  toggleHovercard() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  getRepoLink() {\n    const {organization} = this.props;\n    const orgSlug = organization.slug;\n    return {\n      header: null,\n      body: (\n        <ConnectRepo>\n          <h5>{t('Releases are better with commit data!')}</h5>\n          <p>\n            {t(\n              'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n            )}\n          </p>\n          <Button href={`/organizations/${orgSlug}/repos/`} priority=\"primary\">\n            {t('Connect a repository')}\n          </Button>\n        </ConnectRepo>\n      ),\n    };\n  }\n\n  getBody() {\n    const {releaseVersion, release, deploys} = this.props;\n    if (release === undefined || !defined(deploys)) {\n      return {header: null, body: null};\n    }\n\n    const {lastCommit} = release;\n    const recentDeploysByEnvironment = deploys.reduce(function (dbe, deploy) {\n      const {dateFinished, environment} = deploy;\n      if (!dbe.hasOwnProperty(environment)) {\n        dbe[environment] = dateFinished;\n      }\n\n      return dbe;\n    }, {});\n    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);\n\n    if (Object.keys(recentDeploysByEnvironment).length > 3) {\n      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);\n    }\n\n    return {\n      header: <VersionHoverHeader releaseVersion={releaseVersion} />,\n      body: (\n        <div>\n          <div className=\"row\">\n            <div className=\"col-xs-4\">\n              <h6>{t('New Issues')}</h6>\n              <CountSince>{release.newGroups}</CountSince>\n            </div>\n            <div className=\"col-xs-8\">\n              <h6 style={{textAlign: 'right'}}>\n                {release.commitCount}{' '}\n                {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')}{' '}\n                {release.authors.length}{' '}\n                {release.authors.length !== 1 ? t('authors') : t('author')}{' '}\n              </h6>\n              <AvatarList\n                users={release.authors}\n                avatarSize={25}\n                tooltipOptions={{container: 'body'} as any}\n                typeMembers=\"authors\"\n              />\n            </div>\n          </div>\n          {lastCommit && <StyledLastCommit commit={lastCommit} />}\n          {deploys.length > 0 && (\n            <div>\n              <Divider>\n                <h6>{t('Deploys')}</h6>\n              </Divider>\n              {mostRecentDeploySlice.map((env, idx) => {\n                const dateFinished = recentDeploysByEnvironment[env];\n                return (\n                  <DeployWrap key={idx}>\n                    <VersionRepoLabel>{env}</VersionRepoLabel>\n                    {dateFinished && <StyledTimeSince date={dateFinished} />}\n                  </DeployWrap>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      ),\n    };\n  }\n\n  render() {\n    const {\n      deploysLoading,\n      deploysError,\n      release,\n      releaseLoading,\n      releaseError,\n      repositories,\n      repositoriesLoading,\n      repositoriesError,\n    } = this.props;\n    let header: React.ReactNode = null;\n    let body: React.ReactNode = null;\n\n    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);\n    const error = deploysError ?? releaseError ?? repositoriesError;\n    const hasRepos = repositories && repositories.length > 0;\n\n    if (loading) {\n      body = <LoadingIndicator mini />;\n    } else if (error) {\n      body = <LoadingError />;\n    } else {\n      const renderObj: {[key: string]: React.ReactNode} =\n        hasRepos && release ? this.getBody() : this.getRepoLink();\n      header = renderObj.header;\n      body = renderObj.body;\n    }\n\n    return (\n      <Hovercard {...this.props} header={header} body={body}>\n        {this.props.children}\n      </Hovercard>\n    );\n  }\n}\n\ninterface VersionHoverHeaderProps {\n  releaseVersion: string;\n}\n\nexport class VersionHoverHeader extends Component<VersionHoverHeaderProps> {\n  render() {\n    return (\n      <HeaderWrapper>\n        {t('Release')}\n        <VersionWrapper>\n          <StyledVersion version={this.props.releaseVersion} truncate anchor={false} />\n\n          <Clipboard value={this.props.releaseVersion}>\n            <ClipboardIconWrapper>\n              <IconCopy data-test-id=\"version-hover-header-copy-icon\" size=\"xs\" />\n            </ClipboardIconWrapper>\n          </Clipboard>\n        </VersionWrapper>\n      </HeaderWrapper>\n    );\n  }\n}\n\nexport {VersionHoverCard};\nexport default withApi(withRelease(withRepositories(VersionHoverCard)));\n\nconst ConnectRepo = styled('div')`\n  padding: ${space(2)};\n  text-align: center;\n`;\n\nconst VersionRepoLabel = styled(RepoLabel)`\n  width: 86px;\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst VersionWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst StyledVersion = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\n\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst CountSince = styled('div')`\n  color: ${p => p.theme.headingColor};\n  font-size: ${p => p.theme.headerFontSize};\n`;\n\nconst StyledLastCommit = styled(LastCommit)`\n  margin-top: ${space(2)};\n`;\n\nconst DeployWrap = styled('div')`\n  display: grid;\n  grid-template-columns: max-content minmax(0, 1fr);\n  gap: ${space(1)};\n  justify-items: start;\n  align-items: center;\n`;\n","import {Component} from 'react';\n\nimport {getProjectRelease, getReleaseDeploys} from 'sentry/actionCreators/release';\nimport {Client} from 'sentry/api';\nimport ReleaseStore from 'sentry/stores/releaseStore';\nimport {Deploy, Organization, Release} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\ntype InjectedProps = {\n  deploys?: Array<Deploy>;\n  deploysError?: Error;\n  deploysLoading?: boolean;\n  release?: Release;\n  releaseError?: Error;\n  releaseLoading?: boolean;\n};\n\nfunction withRelease<P extends DependentProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithRelease extends Component<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  > {\n    static displayName = `withRelease(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      this.state = {...releaseData};\n    }\n\n    componentDidMount() {\n      this.fetchRelease();\n      this.fetchDeploys();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ReleaseStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRelease() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.release && !releaseData.releaseLoading) ||\n        releaseData.releaseError\n      ) {\n        getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    fetchDeploys() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.deploys && !releaseData.deploysLoading) ||\n        releaseData.deploysError\n      ) {\n        getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    onStoreUpdate() {\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      this.setState({...releaseData});\n    }\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P & DependentProps)}\n          {...(this.state as InjectedProps)}\n        />\n      );\n    }\n  }\n  return WithRelease;\n}\n\nexport default withRelease;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Repository} from 'sentry/types';\n\ntype State = {\n  orgSlug?: string;\n  repositories?: Repository[];\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n};\n\ninterface RepositoryStoreDefinition extends StoreDefinition {\n  get(): State;\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesError(error: Error): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  resetRepositories(): void;\n  state: State;\n}\n\nconst storeConfig: RepositoryStoreDefinition = {\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\nconst RepositoryStore = createStore(storeConfig);\nexport default RepositoryStore;\n","import {Component} from 'react';\n\nimport {getRepositories} from 'sentry/actionCreators/repositories';\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Organization, Repository} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nfunction withRepositories<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithRepositories extends Component<P & DependentProps, InjectedProps> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: P & DependentProps, context: any) {\n      super(props, context);\n\n      const repoData = RepositoryStore.get();\n\n      this.state =\n        repoData.orgSlug === props.organization.slug\n          ? {...INITIAL_STATE, ...repoData}\n          : {...INITIAL_STATE};\n    }\n\n    componentDidMount() {\n      const {organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryStore.resetRepositories();\n      }\n\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    }\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = RepositoryStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRepositories() {\n      const {api, organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    }\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return WithRepositories;\n}\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Repository} from 'sentry/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryStore.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryStore.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryStore.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n"],"names":["getProjectRelease","api","params","orgSlug","projectSlug","releaseVersion","path","encodeURIComponent","ReleaseStore","getReleaseStoreKey","requestPromise","method","then","res","catch","err","status","Sentry","scope","setLevel","setFingerprint","getReleaseDeploys","archiveRelease","addLoadingMessage","t","data","ReleaseStatus","projects","version","release","addSuccessMessage","error","addErrorMessage","responseJSON","detail","restoreRelease","unknownUser","id","name","username","email","avatarUrl","avatar","avatarUuid","avatarType","ip_address","LastCommit","commit","className","commitAuthor","author","InnerWrap","user","Message","message","firstLine","split","length","truncated","substr","words","pop","join","renderMessage","Meta","date","dateCreated","space","p","theme","overflowEllipsis","fontSizeSmall","subText","white","gray200","VersionHoverCard","Component","visible","toggleHovercard","this","setState","getRepoLink","organization","props","slug","header","body","ConnectRepo","href","priority","getBody","deploys","undefined","defined","lastCommit","recentDeploysByEnvironment","reduce","dbe","deploy","dateFinished","environment","hasOwnProperty","mostRecentDeploySlice","Object","keys","slice","VersionHoverHeader","CountSince","newGroups","style","textAlign","commitCount","authors","users","avatarSize","tooltipOptions","container","typeMembers","StyledLastCommit","map","env","idx","DeployWrap","VersionRepoLabel","StyledTimeSince","render","deploysLoading","deploysError","releaseLoading","releaseError","repositories","repositoriesLoading","repositoriesError","loading","hasRepos","mini","renderObj","children","HeaderWrapper","VersionWrapper","StyledVersion","truncate","anchor","value","ClipboardIconWrapper","size","withApi","WrappedComponent","WithRelease","constructor","context","super","onStoreUpdate","releaseData","state","componentDidMount","fetchRelease","fetchDeploys","componentWillUnmount","unsubscribe","getDisplayName","withRelease","withRepositories","RepoLabel","TimeSince","gray300","Version","headingColor","headerFontSize","storeConfig","init","resetRepositories","trigger","loadRepositories","loadRepositoriesError","loadRepositoriesSuccess","get","createStore","INITIAL_STATE","WithRepositories","RepositoryStore","repoData","fetchRepositories","getRepositories"],"sourceRoot":""}