{"version":3,"file":"chunks/app_components_acl_feature_tsx-app_components_acl_featureDisabled_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/comingSoon.tsx","webpack:///./app/components/acl/feature.tsx","webpack:///./app/components/acl/featureDisabled.tsx","webpack:///./app/components/clipboard.tsx","webpack:///./app/utils/selectText.tsx","webpack:///./app/utils/withConfig.tsx"],"sourcesContent":["import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\nconst ComingSoon = () => (\n  <Alert type=\"info\" showIcon>\n    {t('This feature is coming soon!')}\n  </Alert>\n);\n\nexport default ComingSoon;\n","import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {Config, Organization, Project} from 'sentry/types';\nimport {FeatureDisabledHooks} from 'sentry/types/hooks';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\nimport ComingSoon from './comingSoon';\n\ntype Props = {\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed FeatureRenderProps.\n   *\n   * The other interface is more simple, only show `children` if org/project has\n   * all the required feature.\n   */\n  children: React.ReactNode | ChildrenRenderFn;\n  config: Config;\n  /**\n   * List of required feature tags. Note we do not enforce uniqueness of tags anywhere.\n   * On the backend end, feature tags have a scope prefix string that is stripped out on the\n   * frontend (since feature tags are attached to a context object).\n   *\n   * Use `organizations:` or `projects:` prefix strings to specify a feature with context.\n   */\n  features: string[];\n  /**\n   * The following properties will be set by the HoCs\n   */\n  organization: Organization;\n  /**\n   * Specify the key to use for hookstore functionality.\n   *\n   * The hookName should be prefixed with `feature-disabled`.\n   *\n   * When specified, the hookstore will be checked if the feature is\n   * disabled, and the first available hook will be used as the render\n   * function.\n   */\n  hookName?: keyof FeatureDisabledHooks;\n  project?: Project;\n  /**\n   * Custom renderer function for when the feature is not enabled.\n   *\n   *  - [default] Set this to false to disable rendering anything. If the\n   *    feature is not enabled no children will be rendered.\n   *\n   *  - Set this to `true` to use the default `ComingSoon` alert component.\n   *\n   *  - Provide a custom render function to customize the rendered component.\n   *\n   * When a custom render function is used, the same object that would be\n   * passed to `children` if a func is provided there, will be used here,\n   * additionally `children` will also be passed.\n   */\n  renderDisabled?: boolean | RenderDisabledFn;\n  /**\n   * Should the component require all features or just one or more.\n   */\n  requireAll?: boolean;\n};\n\n/**\n * Common props passed to children and disabled render handlers.\n */\ntype FeatureRenderProps = {\n  features: string[];\n  hasFeature: boolean;\n  organization: Organization;\n  project?: Project;\n};\n\n/**\n * When a feature is disabled the caller of Feature may provide a `renderDisabled`\n * prop. This prop can be overridden by getsentry via hooks. Often getsentry will\n * call the original children function  but override the `renderDisabled`\n * with another function/component.\n */\ntype RenderDisabledProps = FeatureRenderProps & {\n  children: React.ReactNode | ChildrenRenderFn;\n  renderDisabled?: (props: FeatureRenderProps) => React.ReactNode;\n};\n\nexport type RenderDisabledFn = (props: RenderDisabledProps) => React.ReactNode;\n\ntype ChildRenderProps = FeatureRenderProps & {\n  renderDisabled?: undefined | boolean | RenderDisabledFn;\n};\n\nexport type ChildrenRenderFn = (props: ChildRenderProps) => React.ReactNode;\n\ntype AllFeatures = {\n  configFeatures: string[];\n  organization: string[];\n  project: string[];\n};\n\n/**\n * Component to handle feature flags.\n */\nclass Feature extends Component<Props> {\n  static defaultProps = {\n    renderDisabled: false,\n    requireAll: true,\n  };\n\n  getAllFeatures(): AllFeatures {\n    const {organization, project, config} = this.props;\n\n    return {\n      configFeatures: config.features ? Array.from(config.features) : [],\n      organization: (organization && organization.features) || [],\n      project: (project && project.features) || [],\n    };\n  }\n\n  hasFeature(feature: string, features: AllFeatures) {\n    const shouldMatchOnlyProject = feature.match(/^projects:(.+)/);\n    const shouldMatchOnlyOrg = feature.match(/^organizations:(.+)/);\n\n    // Array of feature strings\n    const {configFeatures, organization, project} = features;\n\n    // Check config store first as this overrides features scoped to org or\n    // project contexts.\n    if (configFeatures.includes(feature)) {\n      return true;\n    }\n\n    if (shouldMatchOnlyProject) {\n      return project.includes(shouldMatchOnlyProject[1]);\n    }\n\n    if (shouldMatchOnlyOrg) {\n      return organization.includes(shouldMatchOnlyOrg[1]);\n    }\n\n    // default, check all feature arrays\n    return organization.includes(feature) || project.includes(feature);\n  }\n\n  render() {\n    const {\n      children,\n      features,\n      renderDisabled,\n      hookName,\n      organization,\n      project,\n      requireAll,\n    } = this.props;\n\n    const allFeatures = this.getAllFeatures();\n    const method = requireAll ? 'every' : 'some';\n    const hasFeature =\n      !features || features[method](feat => this.hasFeature(feat, allFeatures));\n\n    // Default renderDisabled to the ComingSoon component\n    let customDisabledRender =\n      renderDisabled === false\n        ? false\n        : typeof renderDisabled === 'function'\n        ? renderDisabled\n        : () => <ComingSoon />;\n\n    // Override the renderDisabled function with a hook store function if there\n    // is one registered for the feature.\n    if (hookName) {\n      const hooks = HookStore.get(hookName);\n\n      if (hooks.length > 0) {\n        customDisabledRender = hooks[0];\n      }\n    }\n    const renderProps = {\n      organization,\n      project,\n      features,\n      hasFeature,\n    };\n\n    if (!hasFeature && customDisabledRender !== false) {\n      return customDisabledRender({children, ...renderProps});\n    }\n\n    if (isRenderFunc<ChildrenRenderFn>(children)) {\n      return children({renderDisabled, ...renderProps});\n    }\n\n    return hasFeature && children ? children : null;\n  }\n}\n\nexport default withOrganization(withProject(withConfig(Feature)));\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {Button, ButtonLabel} from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {CONFIG_DOCS_URL} from 'sentry/constants';\nimport {IconChevron, IconCopy} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {selectText} from 'sentry/utils/selectText';\n\nconst installText = (features: string[], featureName: string): string =>\n  `# ${t('Enables the %s feature', featureName)}\\n${features\n    .map(f => `SENTRY_FEATURES['${f}'] = True`)\n    .join('\\n')}`;\n\ntype Props = {\n  /**\n   * The English name of the feature. This is used in the comment that will\n   * be outputted above the example line of code to enable the feature.\n   */\n  featureName: string;\n  /**\n   * The feature flag keys that should be displayed in the code example for\n   * enabling the feature.\n   */\n  features: string[];\n  /**\n   * Render the disabled message within a warning Alert. A custom Alert\n   * component may be provided.\n   *\n   * Attaches additional styles to the FeatureDisabled component to make it\n   * look consistent within the Alert.\n   */\n  alert?: boolean | React.ElementType;\n  /**\n   * Do not show the help toggle. The description will always be rendered.\n   */\n  hideHelpToggle?: boolean;\n  /**\n   * A custom message to display. Defaults to a generic disabled message.\n   */\n  message?: string;\n};\n\n/**\n * DisabledInfo renders a component informing that a feature has been disabled.\n *\n * By default this component will render a help button which toggles more\n * information about why the feature is disabled, showing the missing feature\n * flag and linking to documentation for managing sentry server feature flags.\n */\nfunction FeatureDisabled({\n  features,\n  featureName,\n  alert,\n  hideHelpToggle,\n  message = t('This feature is not enabled on your Sentry installation.'),\n}: Props) {\n  const [showHelp, setShowHelp] = useState(false);\n\n  function renderHelp() {\n    return (\n      <Fragment>\n        <HelpText>\n          {tct(\n            `Enable this feature on your sentry installation by adding the\n              following configuration into your [configFile:sentry.conf.py].\n              See [configLink:the configuration documentation] for more\n              details.`,\n            {\n              configFile: <code />,\n              configLink: <ExternalLink href={CONFIG_DOCS_URL} />,\n            }\n          )}\n        </HelpText>\n        <Clipboard hideUnsupported value={installText(features, featureName)}>\n          <CopyButton borderless size=\"xs\" icon={<IconCopy size=\"xs\" />}>\n            {t('Copy to Clipboard')}\n          </CopyButton>\n        </Clipboard>\n        <Pre onClick={e => selectText(e.target as HTMLElement)}>\n          <code>{installText(features, featureName)}</code>\n        </Pre>\n      </Fragment>\n    );\n  }\n\n  if (!alert) {\n    const showDescription = hideHelpToggle || showHelp;\n    return (\n      <Fragment>\n        <FeatureDisabledMessage>\n          {message}\n          {!hideHelpToggle && (\n            <ToggleButton\n              priority=\"link\"\n              size=\"xs\"\n              onClick={() => setShowHelp(!showHelp)}\n            >\n              {t('Help')}\n              <IconChevron direction={showDescription ? 'up' : 'down'} />\n            </ToggleButton>\n          )}\n        </FeatureDisabledMessage>\n        {showDescription && <HelpDescription>{renderHelp()}</HelpDescription>}\n      </Fragment>\n    );\n  }\n\n  const AlertComponent = typeof alert === 'boolean' ? Alert : alert;\n  return (\n    <AlertComponent type=\"warning\" showIcon expand={renderHelp()}>\n      {message}\n    </AlertComponent>\n  );\n}\n\nconst FeatureDisabledMessage = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  line-height: ${p => p.theme.text.lineHeightBody};\n`;\n\nconst HelpDescription = styled('div')`\n  margin-top: ${space(1)};\n\n  pre,\n  code {\n    margin-bottom: 0;\n    white-space: pre;\n  }\n\n  button {\n    margin-bottom: ${space(0.5)};\n  }\n`;\n\nconst HelpText = styled('p')`\n  margin-bottom: ${space(1)};\n`;\n\nconst ToggleButton = styled(Button)`\n  color: ${p => p.theme.active};\n  height: ${p => p.theme.text.lineHeightBody}em;\n  min-height: ${p => p.theme.text.lineHeightBody}em;\n\n  &:hover {\n    color: ${p => p.theme.activeHover};\n  }\n\n  ${ButtonLabel} {\n    display: grid;\n    grid-auto-flow: column;\n    gap: ${space(1)};\n  }\n`;\n\nconst CopyButton = styled(Button)`\n  margin-left: auto;\n`;\n\nconst Pre = styled('pre')`\n  margin-bottom: 0;\n  overflow: auto;\n`;\n\nexport default FeatureDisabled;\n","import {cloneElement, isValidElement, useCallback, useEffect, useState} from 'react';\nimport {findDOMNode} from 'react-dom';\nimport copy from 'copy-text-to-clipboard';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  children: React.ReactNode;\n  /**\n   * Text to be copied on click\n   */\n  value: string;\n  /**\n   * Toast message to show on copy failures\n   */\n  errorMessage?: string;\n  /**\n   * Do not show a toast message on success\n   */\n  hideMessages?: boolean;\n  /**\n   * Hide children if browser does not support copying\n   */\n  hideUnsupported?: boolean;\n  /**\n   * Triggered if we fail to copy\n   */\n  onError?: () => void;\n  /**\n   * Trigger if we successfully copy\n   */\n  onSuccess?: () => void;\n  /**\n   * Message to show when we successfully copy\n   */\n  successMessage?: string;\n};\n\n/**\n * copy-text-to-clipboard relies on `document.execCommand('copy')`\n */\nfunction isSupported() {\n  return !!document.queryCommandSupported?.('copy');\n}\n\nfunction Clipboard({\n  hideMessages = false,\n  successMessage = t('Copied to clipboard'),\n  errorMessage = t('Error copying to clipboard'),\n  value,\n  onSuccess,\n  onError,\n  hideUnsupported,\n  children,\n}: Props) {\n  const [element, setElement] = useState<ReturnType<typeof findDOMNode>>();\n\n  const handleClick = useCallback(() => {\n    const copyWasSuccessful = copy(value);\n\n    if (!copyWasSuccessful) {\n      if (!hideMessages) {\n        addErrorMessage(errorMessage);\n      }\n      onError?.();\n      return;\n    }\n\n    if (!hideMessages) {\n      addSuccessMessage(successMessage);\n    }\n\n    onSuccess?.();\n  }, [value, onError, onSuccess, errorMessage, successMessage, hideMessages]);\n\n  useEffect(() => {\n    element?.addEventListener('click', handleClick);\n    return () => element?.removeEventListener('click', handleClick);\n  }, [handleClick, element]);\n\n  // XXX: Instead of assigning the `onClick` to the cloned child element, we\n  // attach a event listener, otherwise we would wipeout whatever click handler\n  // may be assigned on the child.\n  const handleMount = useCallback((ref: HTMLElement) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    setElement(findDOMNode(ref));\n  }, []);\n\n  // Browser doesn't support `execCommand`\n  if (hideUnsupported && !isSupported()) {\n    return null;\n  }\n\n  if (!isValidElement(children)) {\n    return null;\n  }\n\n  return cloneElement<any>(children, {ref: handleMount});\n}\n\nexport default Clipboard;\n","/**\n * Select the text of the provided HTML Element\n */\nexport function selectText(node: HTMLElement): void {\n  if (node instanceof HTMLInputElement && node.type === 'text') {\n    node.select();\n    return;\n  }\n\n  if (node instanceof Node && window.getSelection) {\n    const range = document.createRange();\n    range.selectNode(node);\n\n    const selection = window.getSelection();\n    selection?.removeAllRanges();\n    selection?.addRange(range);\n  }\n}\n","import ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Config} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedConfigProps = {\n  config: Config;\n};\n\n/**\n * Higher order component that passes the config object to the wrapped\n * component\n */\nfunction withConfig<P extends InjectedConfigProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  type Props = Omit<P, keyof InjectedConfigProps> & Partial<InjectedConfigProps>;\n\n  const Wrapper: React.FC<Props> = props => {\n    const config = useLegacyStore(ConfigStore);\n    const allProps = {config, ...props} as P;\n\n    return <WrappedComponent {...allProps} />;\n  };\n\n  Wrapper.displayName = `withConfig(${getDisplayName(WrappedComponent)})`;\n\n  return Wrapper;\n}\n\nexport default withConfig;\n"],"names":["ComingSoon","type","showIcon","t","Feature","Component","getAllFeatures","organization","project","config","this","props","configFeatures","features","Array","from","hasFeature","feature","shouldMatchOnlyProject","match","shouldMatchOnlyOrg","includes","render","children","renderDisabled","hookName","requireAll","allFeatures","feat","customDisabledRender","hooks","HookStore","length","renderProps","isRenderFunc","withOrganization","withProject","withConfig","installText","featureName","map","f","join","FeatureDisabled","alert","hideHelpToggle","message","showHelp","setShowHelp","useState","renderHelp","Fragment","HelpText","tct","configFile","configLink","href","CONFIG_DOCS_URL","hideUnsupported","value","CopyButton","borderless","size","icon","Pre","onClick","e","selectText","target","showDescription","FeatureDisabledMessage","ToggleButton","priority","direction","HelpDescription","AlertComponent","Alert","expand","p","theme","text","lineHeightBody","space","Button","active","activeHover","ButtonLabel","hideMessages","successMessage","errorMessage","onSuccess","onError","element","setElement","handleClick","useCallback","copy","addErrorMessage","addSuccessMessage","useEffect","addEventListener","removeEventListener","handleMount","ref","findDOMNode","document","queryCommandSupported","isValidElement","cloneElement","node","HTMLInputElement","select","Node","window","getSelection","range","createRange","selectNode","selection","removeAllRanges","addRange","WrappedComponent","Wrapper","allProps","useLegacyStore","ConfigStore","displayName","getDisplayName"],"sourceRoot":""}