{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/teamMembersRow.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport const RoleOverwriteIcon: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n};\n\nexport const RoleOverwritePanelAlert: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n};\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport {PanelItem} from 'sentry/components/panels';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, TeamMember, User} from 'sentry/types';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwriteIcon,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\nconst TeamMembersRow = (props: {\n  hasWriteAccess: boolean;\n  member: TeamMember;\n  organization: Organization;\n  removeMember: (member: Member) => void;\n  updateMemberRole: (member: Member, newRole: string) => void;\n  user: User;\n}) => {\n  const {organization, member, user, hasWriteAccess, removeMember, updateMemberRole} =\n    props;\n\n  return (\n    <TeamRolesPanelItem key={member.id}>\n      <div>\n        <IdBadge avatarSize={36} member={member} useLink orgId={organization.slug} />\n      </div>\n      <div>\n        <TeamRoleSelect\n          hasWriteAccess={hasWriteAccess}\n          updateMemberRole={updateMemberRole}\n          organization={organization}\n          member={member}\n        />\n      </div>\n      <div>\n        <RemoveButton\n          hasWriteAccess={hasWriteAccess}\n          onClick={() => removeMember(member)}\n          member={member}\n          user={user}\n        />\n      </div>\n    </TeamRolesPanelItem>\n  );\n};\n\nconst TeamRoleSelect = (props: {\n  hasWriteAccess: boolean;\n  member: TeamMember;\n  organization: Organization;\n  updateMemberRole: (member: TeamMember, newRole: string) => void;\n}) => {\n  const {hasWriteAccess, organization, member, updateMemberRole} = props;\n  const {orgRoleList, teamRoleList, features} = organization;\n  if (!features.includes('team-roles')) {\n    return null;\n  }\n\n  const {orgRole: orgRoleId} = member;\n  const orgRole = orgRoleList.find(r => r.id === orgRoleId);\n\n  const teamRoleId = member.teamRole || orgRole?.minimumTeamRole;\n  const teamRole = teamRoleList.find(r => r.id === teamRoleId) || teamRoleList[0];\n\n  if (\n    !hasWriteAccess ||\n    hasOrgRoleOverwrite({orgRole: orgRoleId, orgRoleList, teamRoleList})\n  ) {\n    return (\n      <RoleName>\n        {teamRole.name}\n        <IconWrapper>\n          <RoleOverwriteIcon\n            orgRole={orgRoleId}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        </IconWrapper>\n      </RoleName>\n    );\n  }\n\n  return (\n    <RoleSelectWrapper>\n      <RoleSelectControl\n        roles={teamRoleList}\n        value={teamRole.id}\n        onChange={option => updateMemberRole(member, option.value)}\n        disableUnallowed\n      />\n    </RoleSelectWrapper>\n  );\n};\n\nconst RemoveButton = (props: {\n  hasWriteAccess: boolean;\n  member: TeamMember;\n  onClick: () => void;\n  user: User;\n}) => {\n  const {member, user, hasWriteAccess, onClick} = props;\n\n  const isSelf = member.email === user.email;\n  const canRemoveMember = hasWriteAccess || isSelf;\n  if (!canRemoveMember) {\n    return null;\n  }\n\n  if (member.flags['idp:provisioned']) {\n    return (\n      <Button\n        size=\"xs\"\n        disabled\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        onClick={onClick}\n        aria-label={t('Remove')}\n        title={t(\n          \"Membership to this team is managed through your organization's identity provider.\"\n        )}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  return (\n    <Button\n      size=\"xs\"\n      disabled={!canRemoveMember}\n      icon={<IconSubtract size=\"xs\" isCircled />}\n      onClick={onClick}\n      aria-label={t('Remove')}\n    >\n      {t('Remove')}\n    </Button>\n  );\n};\n\nconst RoleName = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst IconWrapper = styled('div')`\n  height: ${space(2)};\n  margin-left: ${space(1)};\n`;\n\nconst RoleSelectWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  > div:first-child {\n    flex-grow: 1;\n  }\n`;\n\nconst TeamRolesPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(120px, 4fr) minmax(120px, 2fr) minmax(100px, 1fr);\n  gap: ${space(2)};\n  align-items: center;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n`;\n\nexport default TeamMembersRow;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'sentry/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Config, Member, Organization, Team, TeamMember} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport TeamMembersRow from './teamMembersRow';\n\ntype RouteParams = {\n  teamId: string;\n};\n\ntype Props = {\n  api: Client;\n  config: Config;\n  organization: Organization;\n  team: Team;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  dropdownBusy: boolean;\n  error: boolean;\n  loading: boolean;\n  orgMembers: Member[];\n  teamMembers: TeamMember[];\n} & AsyncView['state'];\n\nclass TeamMembers extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      loading: true,\n      error: false,\n      dropdownBusy: false,\n      teamMembers: [],\n      orgMembers: [],\n    };\n  }\n\n  componentDidMount() {\n    // Initialize \"add member\" dropdown with data\n    this.fetchMembersRequest('');\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  fetchMembersRequest = async (query: string) => {\n    const {organization, api} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/organizations/${organization.slug}/members/`,\n        {\n          query: {query},\n        }\n      );\n      this.setState({\n        orgMembers: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n\n    return [\n      [\n        'teamMembers',\n        `/teams/${organization.slug}/${params.teamId}/members/`,\n        {},\n        {paginate: true},\n      ],\n    ];\n  }\n\n  addTeamMember = (selection: Item) => {\n    const {organization, params} = this.props;\n    const {orgMembers, teamMembers} = this.state;\n\n    this.setState({loading: true});\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = orgMembers.find(member => member.id === selection.value);\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            loading: false,\n            error: false,\n            teamMembers: teamMembers.concat([orgMember as TeamMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({loading: false});\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  removeTeamMember = (member: Member) => {\n    const {organization, params} = this.props;\n    const {teamMembers} = this.state;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMembers: teamMembers.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  };\n\n  updateTeamMemberRole = (member: Member, newRole: string) => {\n    const {organization} = this.props;\n    const {teamId} = this.props.params;\n    const endpoint = `/organizations/${organization.slug}/members/${member.id}/teams/${teamId}/`;\n\n    this.props.api.request(endpoint, {\n      method: 'PUT',\n      data: {teamRole: newRole},\n      success: data => {\n        const teamMembers: any = [...this.state.teamMembers];\n        const i = teamMembers.findIndex(m => m.id === member.id);\n        teamMembers[i] = {\n          ...member,\n          teamRole: data.teamRole,\n        };\n        this.setState({teamMembers});\n        addSuccessMessage(t('Successfully changed role for team member.'));\n      },\n      error: () => {\n        addErrorMessage(\n          t('There was an error while trying to change the roles for a team member.')\n        );\n      },\n    });\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(hasWriteAccess: boolean) {\n    const {organization, params, team} = this.props;\n    const {orgMembers} = this.state;\n    const existingMembers = new Set(this.state.teamMembers.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const items = (orgMembers || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: organization.slug,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n        disabled={team.flags['idp:provisioned']}\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            isOpen={isOpen}\n            size=\"xs\"\n            data-test-id=\"add-member\"\n            disabled={team.flags['idp:provisioned']}\n          >\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {organization, config} = this.props;\n    const {teamMembersPageLinks} = this.state;\n    const {access} = organization;\n    const hasWriteAccess = access.includes('org:write') || access.includes('team:admin');\n\n    return (\n      <Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Members')}</div>\n            <div style={{textTransform: 'none'}}>\n              {this.renderDropdown(hasWriteAccess)}\n            </div>\n          </PanelHeader>\n          {this.state.teamMembers.length ? (\n            this.state.teamMembers.map(member => {\n              return (\n                <TeamMembersRow\n                  key={member.id}\n                  hasWriteAccess={hasWriteAccess}\n                  member={member}\n                  organization={organization}\n                  removeMember={this.removeTeamMember}\n                  updateMemberRole={this.updateTeamMemberRole}\n                  user={config.user}\n                />\n              );\n            })\n          ) : (\n            <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n              {t('This team has no members')}\n            </EmptyMessage>\n          )}\n        </Panel>\n        <Pagination pageLinks={teamMembersPageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"names":["RoleSelectControl","roles","disableUnallowed","props","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","desc","showDividers","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","RoleOverwriteIcon","hasOrgRoleOverwrite","getOverwriteString","size","color","RoleOverwritePanelAlert","orgRole","orgRoleList","teamRoleList","orgRoleObj","find","findIndex","minimumTeamRole","isSelf","teamRoleObj","tct","selfNoun","selfPronoun","article","includes","teamRole","TeamMembersRow","organization","member","user","hasWriteAccess","removeMember","updateMemberRole","TeamRolesPanelItem","avatarSize","useLink","orgId","slug","TeamRoleSelect","RemoveButton","onClick","features","orgRoleId","teamRoleId","RoleName","IconWrapper","RoleSelectWrapper","onChange","option","email","canRemoveMember","flags","icon","isCircled","t","space","PanelItem","TeamMembers","debounce","query","setState","dropdownBusy","fetchMembersRequest","async","api","data","requestPromise","orgMembers","_err","addErrorMessage","duration","selection","params","teamMembers","state","loading","debouncedFetchMembersRequest","joinTeam","teamId","memberId","success","orgMember","undefined","error","concat","addSuccessMessage","leaveTeam","filter","m","newRole","endpoint","request","method","i","e","target","getDefaultState","super","componentDidMount","getEndpoints","paginate","renderDropdown","team","existingMembers","Set","canAddMembers","openMembership","items","has","searchKey","StyledUserListElement","StyledAvatar","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","openInviteMembersModal","source","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","handleMemberFilterChange","busy","onClose","isOpen","onRetry","fetchData","config","teamMembersPageLinks","access","Fragment","hasButtons","style","textTransform","length","removeTeamMember","updateTeamMemberRole","pageLinks","p","theme","fontSizeSmall","overflowEllipsis","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"sourceRoot":""}