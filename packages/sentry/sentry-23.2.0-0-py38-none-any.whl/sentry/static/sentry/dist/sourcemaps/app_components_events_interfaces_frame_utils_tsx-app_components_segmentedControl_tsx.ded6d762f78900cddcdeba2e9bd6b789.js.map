{"version":3,"file":"chunks/app_components_events_interfaces_frame_utils_tsx-app_components_segmentedControl_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"giBAOO,SAASA,EAAYC,GAC1B,MAAMC,EAASD,EAAIE,MAAM,oBAAoBC,KAAKH,GAAO,KAAO,KAEhE,OADiBC,EAAOA,EAAOG,OAAS,IAAMH,EAAOA,EAAOG,OAAS,IAAMJ,GAC3DK,QAAQ,0BAA2B,GACrD,CAEO,SAASC,EAAYC,EAAmCC,GAG7D,OAAOD,GAAgBC,CACzB,CAEO,SAASC,EAAaC,GAE3B,MAAM,mBAACC,GAAsBD,EACvBE,EAAOF,EAAMG,UAAY,YAEzBC,GAAc,QAAC,KAAY,CAACC,KAAK,KAAKC,MAAO,YAC7CC,GAAY,QAAC,KAAW,CAACF,KAAK,KAAKC,MAAM,WAE/C,GAAIJ,EAAKM,MAAM,YACb,MAAO,EAACC,EAAAA,EAAAA,GAAE,mCAAoCL,GAEhD,GAAIF,EAAKM,MAAM,kBACb,MAAO,EAACC,EAAAA,EAAAA,GAAE,sCAAuCF,GAEnD,IAAKN,GAA+B,cAATC,EAEzB,MAAO,EAACO,EAAAA,EAAAA,GAAE,oDAAqDL,GAGjE,GACW,cAATF,GACU,eAATA,GAAyBD,IAAuBS,EAAAA,EAAAA,eAEjD,OAAQT,GACN,KAAKS,EAAAA,EAAAA,eACH,MAAO,EAACD,EAAAA,EAAAA,GAAE,mDAAoDL,GAChE,KAAKM,EAAAA,EAAAA,cACH,MAAO,EAACD,EAAAA,EAAAA,GAAE,uDAAwDL,GACpE,KAAKM,EAAAA,EAAAA,QACH,MAAO,EACLD,EAAAA,EAAAA,GAAE,kEACFF,GAEJ,KAAKG,EAAAA,EAAAA,UACH,MAAO,EAACD,EAAAA,EAAAA,GAAE,oDAAqDF,GAKrE,MAAa,eAATL,EACK,EAACO,EAAAA,EAAAA,GAAE,gDAAiDL,GAGtD,CAAC,KAAM,KAChB,CAEO,SAASO,EAASb,GAEvB,MAAoB,WAAbA,CACT,CAEO,SAASc,EAAiBZ,GAC/B,OAAOa,EAAAA,EAAAA,IAAQb,EAAMc,YAAcd,EAAMc,QAAQpB,MACnD,CAEO,SAASqB,EAAef,GAC7B,QAAQgB,EAAAA,EAAAA,GAAchB,EAAMiB,MAAQ,CAAC,EACvC,CAEO,SAASC,EAAoBC,GAClC,QAAQH,EAAAA,EAAAA,GAAcG,EACxB,CAEO,SAASC,EAAYpB,EAAcF,GACxC,OACEa,EAASf,EAAYI,EAAMF,SAAUA,GAAY,YAAae,EAAAA,EAAAA,IAAQb,EAAMqB,QAEhF,CAEO,SAASC,EAAa,GAY1B,IAZ0B,MAC3BtB,EAAK,UACLmB,EAAS,oBACTI,EAAmB,SACnBzB,EAAQ,YACR0B,GAOD,EACC,OACIA,GAAeD,GACjBX,EAAiBZ,IACjBe,EAAef,IACfkB,EAAoBC,IACpBC,EAAYpB,EAAOF,EAEvB,C,2DC5GO,IAAKY,E,iBAMX,SANWA,GAAAA,EAAkB,4BAAlBA,EAAkB,gCAAlBA,EAAkB,8BAAlBA,EAAkB,kBAAlBA,EAAkB,sBAM7B,CANWA,IAAAA,EAAkB,I,u1BC0C9B,MAAMe,EAAqBC,GAA+B,IAAIC,EAAAA,GAAeD,GAEtE,SAASE,EAAgB,GAQC,IARsB,MACrDC,EAAK,aACLC,EAAY,SACZC,EAAQ,KACR1B,EAAO,KAAI,SACX2B,EAAW,UAAS,SACpBC,KACGC,GAC0B,EAC7B,MAAMC,GAAMC,EAAAA,EAAAA,QAAuB,MAE7BC,GAAaC,EAAAA,EAAAA,IAAcJ,EAAOT,GAClCc,EAAiC,IAClCL,EAGHL,MAAOA,EACPC,aAAcA,EACdC,SAAUA,GAAY,CAACS,GAAOT,EAASS,IACvCC,YAAa,aACbC,WAAYT,GAGRU,GAAQC,EAAAA,EAAAA,GAAmBL,IAC3B,gBAACM,IAAmBC,EAAAA,EAAAA,GAAcP,EAAWI,GAE7CI,GAAiBC,EAAAA,EAAAA,UAAQ,IAAM,IAAIX,IAAa,CAACA,IAEvD,OACE,QAACY,EAAS,IAAKJ,EAAiBxC,KAAMA,EAAM2B,SAAUA,EAAUG,IAAKA,EAAI,UACvE,QAAC,IAAW,CAACe,GAAIL,EAAgBK,GAAG,SACjCH,EAAeI,KAAIC,IAClB,QAACC,EAAO,IACFD,EAAOlB,MACXoB,IAAKF,EAAOE,IACZC,QAASH,EAAOG,QAChBC,QAASJ,EAAOI,QAChB3B,MAAO4B,OAAOL,EAAOE,KACrBZ,WAAYU,EAAOlB,MAAMD,SACzBU,MAAOA,EACPtC,KAAMA,EACN2B,SAAUA,EACV0B,cAAeb,EAAgBK,IAE9BE,EAAOO,eAMpB,CAkBA,SAASN,EAAO,GAUQ,IAVe,MACrCV,EAAK,QACLY,EAAO,QACPC,EAAO,KACPnD,EAAI,SACJ2B,EAAQ,cACR0B,EAAa,QACbE,EAAO,eACPC,EAAiB,CAAC,KACf3B,GACiB,EACpB,MAAMC,GAAMC,EAAAA,EAAAA,QAAyB,OAE/B,WAAC0B,IAAcC,EAAAA,EAAAA,GAAS7B,EAAOS,EAAOR,GAEtC6B,GAAuBnD,EAAAA,EAAAA,IAAQ2C,IAAYb,EAAMsB,gBAAkBT,EACnEU,GAAuBrD,EAAAA,EAAAA,IAAQ0C,IAAYZ,EAAMsB,gBAAkBV,EAEnEY,EAAaxB,EAAMsB,gBAAkB/B,EAAML,MAC3CuC,GAAeD,IAAeD,GAE9B,WAACxB,GAAcR,EACfmC,GACJ,QAACC,EAAW,CACVjE,KAAMA,EACN8D,WAAYA,EACZzB,WAAYA,EACZ,eAAcR,EAAML,MAAM,WAE1B,QAAC0C,EAAY,IAAKT,EAAY3B,IAAKA,KACjCO,IACA,QAAC8B,EAA4B,CAC3BN,qBAAsBA,EACtBF,qBAAsBA,IAGzBG,IACC,QAACM,EAAyB,CACxBC,SAAUhB,EACViB,WAAY,CAACC,KAAM,QAASC,KAAM,UAAWC,SAAU,IACvD9C,SAAUA,EACV,oBAIJ,QAAC+C,EAAO,CAACC,QAASZ,EAAaa,KAAK,YAAY,oBAMhD,QAACC,EAAS,YACR,QAACC,EAAW,CAAC,iBAAW,SAAEjD,EAAMkD,YAChC,QAACC,EAAY,CAAClB,WAAYA,EAAYzB,WAAYA,EAAYV,SAAUA,EAAS,SAC9EE,EAAMkD,iBAMf,OAAIxB,GAEA,QAAC,IAAO,CACN0B,aAAW,EACXC,MAAO3B,EACF4B,MAAO,IAAKC,SAAU,YAAa5B,EAAc,SAErDQ,IAKAA,CACT,CA7IgBzC,EAAgB,+BAoDhCA,EAAiB8D,KAAOA,EAAAA,GA2FxB,MAAMzC,GAAY,OAAO,MAAK,mBAAZ,CAAa,2EAIf0C,GACG,YAAfA,EAAE3D,SAAyB2D,EAAEC,MAAMC,WAAaF,EAAEC,MAAME,oBAAkB,sBACxDH,GAAKA,EAAEC,MAAMG,QAAM,mBACtBJ,GAAKA,EAAEC,MAAMI,cAAY,iBAGxCL,GAAKA,EAAEC,MAAMK,KAAKN,EAAEtF,OAAK,KAGvBiE,GAAc,OAAO,QAAO,mBAAd,CAAe,+DAQXqB,GAAKA,EAAEC,MAAMI,cAAY,mBACrCL,GAAMA,EAAEjD,WAAa,UAAY,WAAU,iBAGnDiD,GAAKA,EAAEC,MAAMM,cAAcP,EAAEtF,OAAK,qBAGlCsF,IACCA,EAAEjD,YACF,4HAQF,KAECiD,GAAKA,EAAExB,YAAe,eAAY,KAGhCI,GAAe,OAAO,QAAO,mBAAd,CAAe,kFAQjBoB,GAAKA,EAAEC,MAAMI,cAAY,mGAetCxB,GAA+B,OAAO2B,EAAAA,EAAqB,mBAA5B,CAA6B,wGAgB9DR,GAAKA,EAAE3B,sBAAyB,eAAc2B,EAAEC,MAAMI,wBAAsB,KAC5EL,GAAKA,EAAEzB,sBAAyB,gBAAeyB,EAAEC,MAAMI,wBAAsB,KAG3EvB,GAA4B,OAAO2B,EAAAA,EAAAA,IAAU,mBAAjB,CAAkB,oDAOhDT,GACe,YAAfA,EAAE3D,SACG,qBACS2D,EAAEC,MAAMS,+BACLV,EAAEC,MAAMI,6EAECL,EAAEC,MAAMU,uKAY7B,qBACSX,EAAEC,MAAMW,gDACAZ,EAAEC,MAAMI,qIAGJL,EAAEC,MAAMY,2BAEnC,KAGGtB,GAAY,OAAO,OAAM,mBAAb,CAAc,oFAO1BC,GAAc,OAAO,OAAM,mBAAb,CAAc,yEAK9BQ,GAAKA,EAAEC,MAAMa,kBAAgB,KAGjC,SAASC,EAAa,GAUnB,IAVmB,WACpBhE,EAAU,WACVyB,EAAU,SACVnC,EAAQ,MACR4D,GAMD,EACC,OAAIlD,EACM,UAASkD,EAAMe,WAGrBxC,EACkB,YAAbnC,EACF,UAAS4D,EAAMgB,SACf,UAAShB,EAAMiB,gBAGd,UAASjB,EAAMkB,YACzB,CAEA,MAAMzB,GAAe,OAAO,OAAM,mBAAb,CAAc,sJAalBM,GAAMA,EAAExB,WAAa,IAAM,KAAI,oBAC5BwB,GAAMA,EAAExB,WAAa,WAAa,WAAU,mCAE/CwB,GAAKA,EAAEC,MAAMmB,KAAKC,gBAAc,IAC7CN,EAAY,KACZf,GAAKA,EAAEC,MAAMa,kBAAgB,KAG3B1B,GAAU,OAAO,MAAK,mBAAZ,CAAa,+GAODY,GAAKA,EAAEC,MAAMqB,aAAW,sCAMhDtB,IAAMA,EAAEX,SAAY,eAAY,I","sources":["webpack:///./app/components/events/interfaces/frame/utils.tsx","webpack:///./app/components/events/interfaces/types.tsx","webpack:///./app/components/segmentedControl.tsx"],"sourcesContent":["import {IconQuestion, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport type {Frame, PlatformType} from 'sentry/types';\nimport {defined, objectIsEmpty} from 'sentry/utils';\n\nimport {SymbolicatorStatus} from '../types';\n\nexport function trimPackage(pkg: string) {\n  const pieces = pkg.split(/^([a-z]:\\\\|\\\\\\\\)/i.test(pkg) ? '\\\\' : '/');\n  const filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;\n  return filename.replace(/\\.(dylib|so|a|dll|exe)$/, '');\n}\n\nexport function getPlatform(dataPlatform: PlatformType | null, platform: string) {\n  // prioritize the frame platform but fall back to the platform\n  // of the stack trace / exception\n  return dataPlatform || platform;\n}\n\nexport function getFrameHint(frame: Frame) {\n  // returning [hintText, hintIcon]\n  const {symbolicatorStatus} = frame;\n  const func = frame.function || '<unknown>';\n  // Custom color used to match adjacent text.\n  const warningIcon = <IconQuestion size=\"xs\" color={'#2c45a8' as any} />;\n  const errorIcon = <IconWarning size=\"xs\" color=\"red300\" />;\n\n  if (func.match(/^@objc\\s/)) {\n    return [t('Objective-C -> Swift shim frame'), warningIcon];\n  }\n  if (func.match(/^__?hidden#\\d+/)) {\n    return [t('Hidden function from bitcode build'), errorIcon];\n  }\n  if (!symbolicatorStatus && func === '<unknown>') {\n    // Only render this if the event was not symbolicated.\n    return [t('No function name was supplied by the client SDK.'), warningIcon];\n  }\n\n  if (\n    func === '<unknown>' ||\n    (func === '<redacted>' && symbolicatorStatus === SymbolicatorStatus.MISSING_SYMBOL)\n  ) {\n    switch (symbolicatorStatus) {\n      case SymbolicatorStatus.MISSING_SYMBOL:\n        return [t('The symbol was not found within the debug file.'), warningIcon];\n      case SymbolicatorStatus.UNKNOWN_IMAGE:\n        return [t('No image is specified for the address of the frame.'), warningIcon];\n      case SymbolicatorStatus.MISSING:\n        return [\n          t('The debug file could not be retrieved from any of the sources.'),\n          errorIcon,\n        ];\n      case SymbolicatorStatus.MALFORMED:\n        return [t('The retrieved debug file could not be processed.'), errorIcon];\n      default:\n    }\n  }\n\n  if (func === '<redacted>') {\n    return [t('Unknown system frame. Usually from beta SDKs'), warningIcon];\n  }\n\n  return [null, null];\n}\n\nexport function isDotnet(platform: string) {\n  // csharp platform represents .NET and can be F#, VB or any language targeting CLS (the Common Language Specification)\n  return platform === 'csharp';\n}\n\nexport function hasContextSource(frame: Frame) {\n  return defined(frame.context) && !!frame.context.length;\n}\n\nexport function hasContextVars(frame: Frame) {\n  return !objectIsEmpty(frame.vars || {});\n}\n\nexport function hasContextRegisters(registers: Record<string, string>) {\n  return !objectIsEmpty(registers);\n}\n\nexport function hasAssembly(frame: Frame, platform?: string) {\n  return (\n    isDotnet(getPlatform(frame.platform, platform ?? 'other')) && defined(frame.package)\n  );\n}\n\nexport function isExpandable({\n  frame,\n  registers,\n  emptySourceNotation,\n  platform,\n  isOnlyFrame,\n}: {\n  frame: Frame;\n  registers: Record<string, string>;\n  emptySourceNotation?: boolean;\n  isOnlyFrame?: boolean;\n  platform?: string;\n}) {\n  return (\n    (!isOnlyFrame && emptySourceNotation) ||\n    hasContextSource(frame) ||\n    hasContextVars(frame) ||\n    hasContextRegisters(registers) ||\n    hasAssembly(frame, platform)\n  );\n}\n","export enum SymbolicatorStatus {\n  SYMBOLICATED = 'symbolicated',\n  MISSING_SYMBOL = 'missing_symbol',\n  UNKNOWN_IMAGE = 'unknown_image',\n  MISSING = 'missing',\n  MALFORMED = 'malformed',\n}\n","import {useMemo, useRef} from 'react';\nimport {Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {useRadio, useRadioGroup} from '@react-aria/radio';\nimport {Item, useCollection} from '@react-stately/collections';\nimport {ListCollection} from '@react-stately/list';\nimport {RadioGroupState, useRadioGroupState} from '@react-stately/radio';\nimport {AriaRadioGroupProps, AriaRadioProps} from '@react-types/radio';\nimport {CollectionBase, ItemProps, Node} from '@react-types/shared';\nimport {LayoutGroup, motion} from 'framer-motion';\n\nimport InteractionStateLayer from 'sentry/components/interactionStateLayer';\nimport {InternalTooltipProps, Tooltip} from 'sentry/components/tooltip';\nimport {defined} from 'sentry/utils';\nimport {FormSize} from 'sentry/utils/theme';\n\nexport interface SegmentedControlItemProps<Value extends string> extends ItemProps<any> {\n  key: Value;\n  disabled?: boolean;\n  /**\n   * Optional tooltip that appears when the use hovers over the segment. Avoid using\n   * tooltips if there are other, more visible ways to display the same information.\n   */\n  tooltip?: React.ReactNode;\n  /**\n   * Additional props to be passed into <Tooltip />.\n   */\n  tooltipOptions?: Omit<InternalTooltipProps, 'children' | 'title' | 'className'>;\n}\n\ntype Priority = 'default' | 'primary';\nexport interface SegmentedControlProps<Value extends string>\n  extends Omit<AriaRadioGroupProps, 'value' | 'defaultValue' | 'onChange'>,\n    CollectionBase<any> {\n  defaultValue?: Value;\n  disabled?: AriaRadioGroupProps['isDisabled'];\n  onChange?: (value: Value) => void;\n  priority?: Priority;\n  size?: FormSize;\n  value?: Value;\n}\n\nconst collectionFactory = (nodes: Iterable<Node<any>>) => new ListCollection(nodes);\n\nexport function SegmentedControl<Value extends string>({\n  value,\n  defaultValue,\n  onChange,\n  size = 'md',\n  priority = 'default',\n  disabled,\n  ...props\n}: SegmentedControlProps<Value>) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const collection = useCollection(props, collectionFactory);\n  const ariaProps: AriaRadioGroupProps = {\n    ...props,\n    // Cast value/defaultValue as string to comply with AriaRadioGroupProps. This is safe\n    // as value and defaultValue are already strings (their type, Value, extends string)\n    value: value as string,\n    defaultValue: defaultValue as string,\n    onChange: onChange && (val => onChange(val as Value)),\n    orientation: 'horizontal',\n    isDisabled: disabled,\n  };\n\n  const state = useRadioGroupState(ariaProps);\n  const {radioGroupProps} = useRadioGroup(ariaProps, state);\n\n  const collectionList = useMemo(() => [...collection], [collection]);\n\n  return (\n    <GroupWrap {...radioGroupProps} size={size} priority={priority} ref={ref}>\n      <LayoutGroup id={radioGroupProps.id}>\n        {collectionList.map(option => (\n          <Segment\n            {...option.props}\n            key={option.key}\n            nextKey={option.nextKey}\n            prevKey={option.prevKey}\n            value={String(option.key)}\n            isDisabled={option.props.disabled}\n            state={state}\n            size={size}\n            priority={priority}\n            layoutGroupId={radioGroupProps.id}\n          >\n            {option.rendered}\n          </Segment>\n        ))}\n      </LayoutGroup>\n    </GroupWrap>\n  );\n}\n\nSegmentedControl.Item = Item as <Value extends string>(\n  props: SegmentedControlItemProps<Value>\n) => JSX.Element;\n\ninterface SegmentProps<Value extends string>\n  extends Omit<SegmentedControlItemProps<Value>, keyof ItemProps<any>>,\n    AriaRadioProps {\n  lastKey: string;\n  layoutGroupId: string;\n  priority: Priority;\n  size: FormSize;\n  state: RadioGroupState;\n  nextKey?: string;\n  prevKey?: string;\n}\n\nfunction Segment<Value extends string>({\n  state,\n  nextKey,\n  prevKey,\n  size,\n  priority,\n  layoutGroupId,\n  tooltip,\n  tooltipOptions = {},\n  ...props\n}: SegmentProps<Value>) {\n  const ref = useRef<HTMLInputElement>(null);\n\n  const {inputProps} = useRadio(props, state, ref);\n\n  const prevOptionIsSelected = defined(prevKey) && state.selectedValue === prevKey;\n  const nextOptionIsSelected = defined(nextKey) && state.selectedValue === nextKey;\n\n  const isSelected = state.selectedValue === props.value;\n  const showDivider = !isSelected && !nextOptionIsSelected;\n\n  const {isDisabled} = props;\n  const content = (\n    <SegmentWrap\n      size={size}\n      isSelected={isSelected}\n      isDisabled={isDisabled}\n      data-test-id={props.value}\n    >\n      <SegmentInput {...inputProps} ref={ref} />\n      {!isDisabled && (\n        <SegmentInteractionStateLayer\n          nextOptionIsSelected={nextOptionIsSelected}\n          prevOptionIsSelected={prevOptionIsSelected}\n        />\n      )}\n      {isSelected && (\n        <SegmentSelectionIndicator\n          layoutId={layoutGroupId}\n          transition={{type: 'tween', ease: 'easeOut', duration: 0.2}}\n          priority={priority}\n          aria-hidden\n        />\n      )}\n\n      <Divider visible={showDivider} role=\"separator\" aria-hidden />\n\n      {/* Once an item is selected, it gets a heavier font weight and becomes slightly\n      wider. To prevent layout shifts, we need a hidden container (HiddenLabel) that will\n      always have normal weight to take up constant space; and a visible, absolutely\n      positioned container (VisibleLabel) that doesn't affect the layout. */}\n      <LabelWrap>\n        <HiddenLabel aria-hidden>{props.children}</HiddenLabel>\n        <VisibleLabel isSelected={isSelected} isDisabled={isDisabled} priority={priority}>\n          {props.children}\n        </VisibleLabel>\n      </LabelWrap>\n    </SegmentWrap>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip\n        skipWrapper\n        title={tooltip}\n        {...{delay: 500, position: 'bottom', ...tooltipOptions}}\n      >\n        {content}\n      </Tooltip>\n    );\n  }\n\n  return content;\n}\n\nconst GroupWrap = styled('div')<{priority: Priority; size: FormSize}>`\n  position: relative;\n  display: inline-grid;\n  grid-auto-flow: column;\n  background: ${p =>\n    p.priority === 'primary' ? p.theme.background : p.theme.backgroundTertiary};\n  border: solid 1px ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n  min-width: 0;\n\n  ${p => p.theme.form[p.size]}\n`;\n\nconst SegmentWrap = styled('label')<{\n  isSelected: boolean;\n  size: FormSize;\n  isDisabled?: boolean;\n}>`\n  position: relative;\n  display: flex;\n  margin: 0;\n  border-radius: calc(${p => p.theme.borderRadius} - 1px);\n  cursor: ${p => (p.isDisabled ? 'default' : 'pointer')};\n  min-width: 0;\n\n  ${p => p.theme.buttonPadding[p.size]}\n  font-weight: 400;\n\n  ${p =>\n    !p.isDisabled &&\n    `\n    &:hover {\n      background-color: inherit;\n\n      [role='separator'] {\n        opacity: 0;\n      }\n    }\n  `}\n\n  ${p => p.isSelected && `z-index: 1;`}\n`;\n\nconst SegmentInput = styled('input')`\n  appearance: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n\n  border-radius: ${p => p.theme.borderRadius};\n  transition: box-shadow 0.125s ease-out;\n  z-index: -1;\n\n  /* Reset global styles */\n  && {\n    padding: 0;\n    margin: 0;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SegmentInteractionStateLayer = styled(InteractionStateLayer)<{\n  nextOptionIsSelected: boolean;\n  prevOptionIsSelected: boolean;\n}>`\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  width: auto;\n  height: auto;\n  transform: none;\n\n  /* Prevent small gaps between adjacent pairs of selected & hovered radios (due to their\n  border radius) by extending the hovered radio's interaction state layer into and\n  behind the selected radio. */\n  transition: left 0.2s, right 0.2s;\n  ${p => p.prevOptionIsSelected && `left: calc(-${p.theme.borderRadius} - 2px);`}\n  ${p => p.nextOptionIsSelected && `right: calc(-${p.theme.borderRadius} - 2px);`}\n`;\n\nconst SegmentSelectionIndicator = styled(motion.div)<{priority: Priority}>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  ${p =>\n    p.priority === 'primary'\n      ? `\n    background: ${p.theme.active};\n    border-radius: ${p.theme.borderRadius};\n    input.focus-visible ~ & {\n      box-shadow: 0 0 0 3px ${p.theme.focus};\n    }\n\n    top: -1px;\n    bottom: -1px;\n    label:first-child > & {\n      left: -1px;\n    }\n    label:last-child > & {\n      right: -1px;\n    }\n  `\n      : `\n    background: ${p.theme.backgroundElevated};\n    border-radius: calc(${p.theme.borderRadius} - 1px);\n    box-shadow: 0 0 2px rgba(43, 34, 51, 0.32);\n    input.focus-visible ~ & {\n      box-shadow: 0 0 0 2px ${p.theme.focusBorder};\n    }\n  `}\n`;\n\nconst LabelWrap = styled('span')`\n  position: relative;\n  display: flex;\n  line-height: 1;\n  min-width: 0;\n`;\n\nconst HiddenLabel = styled('span')`\n  display: inline-block;\n  margin: 0 2px;\n  visibility: hidden;\n  user-select: none;\n  ${p => p.theme.overflowEllipsis}\n`;\n\nfunction getTextColor({\n  isDisabled,\n  isSelected,\n  priority,\n  theme,\n}: {\n  isSelected: boolean;\n  priority: Priority;\n  theme: Theme;\n  isDisabled?: boolean;\n}) {\n  if (isDisabled) {\n    return `color: ${theme.subText};`;\n  }\n\n  if (isSelected) {\n    return priority === 'primary'\n      ? `color: ${theme.white};`\n      : `color: ${theme.headingColor};`;\n  }\n\n  return `color: ${theme.textColor};`;\n}\n\nconst VisibleLabel = styled('span')<{\n  isSelected: boolean;\n  priority: Priority;\n  isDisabled?: boolean;\n}>`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: max-content;\n  transform: translate(-50%, -50%);\n  transition: color 0.25s ease-out;\n\n  user-select: none;\n  font-weight: ${p => (p.isSelected ? 600 : 400)};\n  letter-spacing: ${p => (p.isSelected ? '-0.015em' : 'inherit')};\n  text-align: center;\n  line-height: ${p => p.theme.text.lineHeightBody};\n  ${getTextColor}\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst Divider = styled('div')<{visible: boolean}>`\n  position: absolute;\n  top: 50%;\n  right: 0;\n  width: 0;\n  height: 50%;\n  transform: translate(1px, -50%);\n  border-right: solid 1px ${p => p.theme.innerBorder};\n\n  label:last-child > & {\n    display: none;\n  }\n\n  ${p => !p.visible && `opacity: 0;`}\n`;\n"],"names":["trimPackage","pkg","pieces","split","test","length","replace","getPlatform","dataPlatform","platform","getFrameHint","frame","symbolicatorStatus","func","function","warningIcon","size","color","errorIcon","match","t","SymbolicatorStatus","isDotnet","hasContextSource","defined","context","hasContextVars","objectIsEmpty","vars","hasContextRegisters","registers","hasAssembly","package","isExpandable","emptySourceNotation","isOnlyFrame","collectionFactory","nodes","ListCollection","SegmentedControl","value","defaultValue","onChange","priority","disabled","props","ref","useRef","collection","useCollection","ariaProps","val","orientation","isDisabled","state","useRadioGroupState","radioGroupProps","useRadioGroup","collectionList","useMemo","GroupWrap","id","map","option","Segment","key","nextKey","prevKey","String","layoutGroupId","rendered","tooltip","tooltipOptions","inputProps","useRadio","prevOptionIsSelected","selectedValue","nextOptionIsSelected","isSelected","showDivider","content","SegmentWrap","SegmentInput","SegmentInteractionStateLayer","SegmentSelectionIndicator","layoutId","transition","type","ease","duration","Divider","visible","role","LabelWrap","HiddenLabel","children","VisibleLabel","skipWrapper","title","delay","position","Item","p","theme","background","backgroundTertiary","border","borderRadius","form","buttonPadding","InteractionStateLayer","motion","active","focus","backgroundElevated","focusBorder","overflowEllipsis","getTextColor","subText","white","headingColor","textColor","text","lineHeightBody","innerBorder"],"sourceRoot":""}