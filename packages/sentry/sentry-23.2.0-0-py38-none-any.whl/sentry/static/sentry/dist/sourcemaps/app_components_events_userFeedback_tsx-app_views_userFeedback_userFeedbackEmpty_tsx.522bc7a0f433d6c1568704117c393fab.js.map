{"version":3,"file":"chunks/app_components_events_userFeedback_tsx-app_views_userFeedback_userFeedbackEmpty_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/userFeedback.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/userFeedback/userFeedbackEmpty.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport ActivityAuthor from 'sentry/components/activity/author';\nimport ActivityItem from 'sentry/components/activity/item';\nimport Clipboard from 'sentry/components/clipboard';\nimport Link from 'sentry/components/links/link';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {UserReport} from 'sentry/types';\nimport {escape, nl2br} from 'sentry/utils';\n\ntype Props = {\n  issueId: string;\n  orgId: string;\n  report: UserReport;\n  className?: string;\n};\n\nexport function EventUserFeedback({className, report, orgId, issueId}: Props) {\n  const user = report.user || {\n    name: report.name,\n    email: report.email,\n    id: '',\n    username: '',\n    ip_address: '',\n  };\n\n  return (\n    <div className={className}>\n      <StyledActivityItem\n        date={report.dateCreated}\n        author={{type: 'user', user}}\n        header={\n          <div>\n            <ActivityAuthor>{report.name}</ActivityAuthor>\n            <Clipboard value={report.email}>\n              <Email>\n                {report.email}\n                <StyledIconCopy size=\"xs\" />\n              </Email>\n            </Clipboard>\n            {report.eventID && (\n              <ViewEventLink\n                to={`/organizations/${orgId}/issues/${issueId}/events/${report.eventID}/?referrer=user-feedback`}\n              >\n                {t('View event')}\n              </ViewEventLink>\n            )}\n          </div>\n        }\n      >\n        <p\n          dangerouslySetInnerHTML={{\n            __html: nl2br(escape(report.comments)),\n          }}\n        />\n      </StyledActivityItem>\n    </div>\n  );\n}\n\nconst StyledActivityItem = styled(ActivityItem)`\n  margin-bottom: 0;\n`;\n\nconst Email = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: normal;\n  cursor: pointer;\n  margin-left: ${space(1)};\n`;\n\nconst ViewEventLink = styled(Link)`\n  font-weight: 300;\n  margin-left: ${space(1)};\n  font-size: 0.9em;\n`;\n\nconst StyledIconCopy = styled(IconCopy)`\n  margin-left: ${space(1)};\n`;\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/feedback-empty-state.svg';\n\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\ntype Props = {\n  projectIds?: string[];\n};\n\nexport function UserFeedbackEmpty({projectIds}: Props) {\n  const {projects, initiallyLoaded} = useProjects();\n  const loadingProjects = !initiallyLoaded;\n  const organization = useOrganization();\n\n  const selectedProjects =\n    projectIds && projectIds.length\n      ? projects.filter(({id}) => projectIds.includes(id))\n      : projects;\n\n  const hasAnyFeedback = selectedProjects.some(({hasUserReports}) => hasUserReports);\n\n  useEffect(() => {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n\n    if (hasAnyFeedback === false) {\n      // send to reload only due to higher event volume\n      trackAdhocEvent({\n        eventKey: 'user_feedback.viewed',\n        org_id: parseInt(organization.id, 10),\n        projects: projectIds,\n      });\n    }\n    return () => {\n      window.sentryEmbedCallback = null;\n    };\n  }, [hasAnyFeedback, organization.id, projectIds]);\n\n  function trackAnalytics({eventKey, eventName}: {eventKey: string; eventName: string}) {\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      projects: projectIds,\n    });\n  }\n\n  // Show no user reports if waiting for projects to load or if there is no feedback\n  if (loadingProjects || hasAnyFeedback !== false) {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no user reports match your filters.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  // Show landing page after projects have loaded and it is confirmed no projects have feedback\n  return (\n    <OnboardingPanel\n      data-test-id=\"user-feedback-empty\"\n      image={<img src={emptyStateImg} />}\n    >\n      <h3>{t('What do users think?')}</h3>\n      <p>\n        {t(\n          `You can't read minds. At least we hope not. Ask users for feedback on the impact of their crashes or bugs and you shall receive.`\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button\n          external\n          priority=\"primary\"\n          onClick={() =>\n            trackAnalytics({\n              eventKey: 'user_feedback.docs_clicked',\n              eventName: 'User Feedback Docs Clicked',\n            })\n          }\n          href=\"https://docs.sentry.io/product/user-feedback/\"\n        >\n          {t('Read the docs')}\n        </Button>\n        <Button\n          onClick={() => {\n            Sentry.showReportDialog({\n              // should never make it to the Sentry API, but just in case, use throwaway id\n              eventId: '00000000000000000000000000000000',\n            });\n\n            trackAnalytics({\n              eventKey: 'user_feedback.dialog_opened',\n              eventName: 'User Feedback Dialog Opened',\n            });\n          }}\n        >\n          {t('See an example')}\n        </Button>\n      </ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n"],"names":["EventUserFeedback","className","report","orgId","issueId","user","name","email","id","username","ip_address","StyledActivityItem","date","dateCreated","author","type","header","value","Email","StyledIconCopy","size","eventID","ViewEventLink","to","t","dangerouslySetInnerHTML","__html","nl2br","escape","comments","ActivityItem","p","theme","fontSizeSmall","space","Link","IconCopy","OnboardingPanel","image","children","props","Container","IlloBox","StyledBox","centered","breakpoints","small","medium","UserFeedbackEmpty","projectIds","projects","initiallyLoaded","useProjects","loadingProjects","organization","useOrganization","hasAnyFeedback","length","filter","includes","some","hasUserReports","trackAnalytics","eventKey","eventName","trackAnalyticsEvent","organization_id","useEffect","window","sentryEmbedCallback","embed","submit","_body","this","_submitInProgress","setTimeout","onSuccess","trackAdhocEvent","org_id","parseInt","src","ButtonList","gap","external","priority","onClick","href","Sentry","eventId","ButtonBar"],"sourceRoot":""}