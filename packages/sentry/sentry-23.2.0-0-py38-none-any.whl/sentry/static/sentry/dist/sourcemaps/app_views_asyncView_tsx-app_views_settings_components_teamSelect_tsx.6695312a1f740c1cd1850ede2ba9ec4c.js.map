{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/teamSelect.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport Tooltip from 'sentry/components/tooltip';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconSubtract} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, Team} from 'sentry/types';\nimport useTeams from 'sentry/utils/useTeams';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwritePanelAlert,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\ntype Props = {\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * Used when showing Teams for a Member\n   * Prevent changes to a SCIM-provisioned member\n   */\n  enforceIdpProvisioned: boolean;\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (teamSlug: string) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n  organization: Organization;\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n  /**\n   * Used to determine whether we should show a loading state while waiting for teams\n   */\n  loadingTeams?: boolean;\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n  /**\n   * Used when showing Teams for a Member\n   */\n  onChangeTeamRole?: (teamSlug: string, teamRole: string) => void;\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedOrgRole?: Member['orgRole'];\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedTeamRoles?: Member['teamRoles'];\n  /**\n   * Used when showing Teams for a Project\n   */\n  selectedTeams?: Team[];\n};\n\nfunction TeamSelect({\n  disabled,\n  loadingTeams,\n  enforceIdpProvisioned,\n  menuHeader,\n  confirmLastTeamRemoveMessage,\n  selectedOrgRole,\n  selectedTeamRoles,\n  selectedTeams,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  onChangeTeamRole,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n  const {orgRoleList, teamRoleList} = organization;\n\n  const renderBody = () => {\n    const numTeams = selectedTeams?.length || selectedTeamRoles?.length;\n    if (numTeams === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n\n    const confirmMessage =\n      numTeams === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return (\n      <React.Fragment>\n        {organization.features.includes('team-roles') && selectedOrgRole && (\n          <RoleOverwritePanelAlert\n            orgRole={selectedOrgRole}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        )}\n\n        {selectedTeams &&\n          selectedTeams.map(team => (\n            <ProjectTeamRow\n              key={team.slug}\n              disabled={disabled}\n              confirmMessage={confirmMessage}\n              organization={organization}\n              team={team}\n              onRemoveTeam={slug => onRemoveTeam(slug)}\n            />\n          ))}\n\n        {selectedOrgRole &&\n          selectedTeamRoles &&\n          /**\n           * \"Map + Find\" operation is O(n * n), leaving it as it us because it is unlikely to cause performance issues because a Member is unlikely to be in 1000+ teams\n           */\n          selectedTeamRoles.map(r => {\n            const team = teams.find(tm => tm.slug === r.teamSlug);\n            if (!team) {\n              return (\n                <TeamPanelItem key={r.teamSlug}>\n                  {tct(`Cannot find #[slug]`, {slug: r.teamSlug})}\n                </TeamPanelItem>\n              );\n            }\n\n            return (\n              <MemberTeamRow\n                key={r.teamSlug}\n                disabled={disabled}\n                enforceIdpProvisioned={enforceIdpProvisioned}\n                confirmMessage={confirmMessage}\n                organization={organization}\n                team={team}\n                selectedOrgRole={selectedOrgRole}\n                selectedTeamRole={r.role}\n                onChangeTeamRole={onChangeTeamRole}\n                onRemoveTeam={slug => onRemoveTeam(slug)}\n              />\n            );\n          })}\n      </React.Fragment>\n    );\n  };\n\n  const slugsToFilter =\n    selectedTeams?.map(tm => tm.slug) || selectedTeamRoles?.map(tm => tm.teamSlug) || [];\n\n  // Only show options that aren't selected in the dropdown\n  const options = teams\n    .filter(team => !slugsToFilter.some(slug => slug === team.slug))\n    .map((team, index) => ({\n      index,\n      value: team.slug,\n      searchKey: team.slug,\n      label: () => {\n        if (enforceIdpProvisioned && team.flags['idp:provisioned']) {\n          return (\n            <Tooltip\n              title={t(\n                \"Membership to this team is managed through your organization's identity provider.\"\n              )}\n            >\n              <DropdownTeamBadgeDisabled avatarSize={18} team={team} />\n            </Tooltip>\n          );\n        }\n        return <DropdownTeamBadge avatarSize={18} team={team} />;\n      },\n      disabled: enforceIdpProvisioned && team.flags['idp:provisioned'],\n    }));\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n        <DropdownAutoComplete\n          items={options}\n          busyItemsStillVisible={fetching}\n          onChange={debounce<(e: React.ChangeEvent<HTMLInputElement>) => void>(\n            e => onSearch(e.target.value),\n            DEFAULT_DEBOUNCE_DURATION\n          )}\n          onSelect={(option: Item) => onAddTeam(option.value)}\n          emptyMessage={t('No teams')}\n          menuHeader={menuHeader}\n          disabled={disabled}\n          alignMenu=\"right\"\n        >\n          {({isOpen}) => (\n            <DropdownButton\n              aria-label={t('Add Team')}\n              isOpen={isOpen}\n              size=\"xs\"\n              disabled={disabled}\n            >\n              {t('Add Team')}\n            </DropdownButton>\n          )}\n        </DropdownAutoComplete>\n      </PanelHeader>\n\n      <PanelBody>{loadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\ntype TeamRowProps = {\n  confirmMessage: string | null;\n  disabled: boolean;\n  onRemoveTeam: Props['onRemoveTeam'];\n  organization: Organization;\n  team: Team;\n};\n\ntype ProjectTeamRowProps = {} & TeamRowProps;\n\nconst ProjectTeamRow = ({\n  organization,\n  team,\n  onRemoveTeam,\n  disabled,\n  confirmMessage,\n}: ProjectTeamRowProps) => (\n  <TeamPanelItem data-test-id=\"team-row-for-project\">\n    <StyledLink to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n      <TeamBadge team={team} />\n    </StyledLink>\n\n    <Confirm\n      message={confirmMessage}\n      bypass={!confirmMessage}\n      onConfirm={() => onRemoveTeam(team.slug)}\n      disabled={disabled}\n    >\n      <Button size=\"xs\" icon={<IconSubtract isCircled size=\"xs\" />} disabled={disabled}>\n        {t('Remove')}\n      </Button>\n    </Confirm>\n  </TeamPanelItem>\n);\n\ntype MemberTeamRowProps = {\n  enforceIdpProvisioned: boolean;\n  onChangeTeamRole: Props['onChangeTeamRole'];\n  selectedOrgRole: Member['orgRole'];\n  selectedTeamRole: Member['teamRoles'][0]['role'];\n} & TeamRowProps;\n\nconst MemberTeamRow = ({\n  organization,\n  team,\n  selectedOrgRole,\n  selectedTeamRole,\n  onRemoveTeam,\n  onChangeTeamRole,\n  disabled,\n  confirmMessage,\n  enforceIdpProvisioned,\n}: MemberTeamRowProps) => {\n  const {teamRoleList, orgRoleList} = organization;\n  const isRoleOverwritten = hasOrgRoleOverwrite({\n    orgRole: selectedOrgRole,\n    orgRoleList,\n    teamRoleList,\n  });\n\n  const teamRoleObj = isRoleOverwritten\n    ? teamRoleList[1] // set as team admin\n    : teamRoleList.find(r => r.id === selectedTeamRole) || teamRoleList[0];\n\n  return (\n    <TeamPanelItem data-test-id=\"team-row-for-member\">\n      <StyledLink to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n        <TeamBadge team={team} />\n      </StyledLink>\n\n      {organization.features.includes('team-roles') && onChangeTeamRole && (\n        <React.Fragment>\n          <StyledRoleSelectControl\n            disabled={disabled || isRoleOverwritten}\n            disableUnallowed={false}\n            size=\"xs\"\n            roles={teamRoleList}\n            value={teamRoleObj?.id}\n            onChange={option => onChangeTeamRole(team.slug, option.value)}\n          />\n        </React.Fragment>\n      )}\n\n      <Confirm\n        message={confirmMessage}\n        bypass={!confirmMessage}\n        onConfirm={() => onRemoveTeam(team.slug)}\n        disabled={disabled || (enforceIdpProvisioned && team.flags['idp:provisioned'])}\n      >\n        <Button\n          size=\"xs\"\n          icon={<IconSubtract isCircled size=\"xs\" />}\n          disabled={disabled || (enforceIdpProvisioned && team.flags['idp:provisioned'])}\n          title={\n            enforceIdpProvisioned && team.flags['idp:provisioned']\n              ? t(\n                  \"Membership to this team is managed through your organization's identity provider.\"\n                )\n              : undefined\n          }\n        >\n          {t('Remove')}\n        </Button>\n      </Confirm>\n    </TeamPanelItem>\n  );\n};\n\nconst DropdownTeamBadge = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n`;\n\nconst DropdownTeamBadgeDisabled = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n  filter: grayscale(1);\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst StyledLink = styled(Link)`\n  flex-grow: 1;\n`;\n\nconst StyledRoleSelectControl = styled(RoleSelectControl)`\n  min-width: 200px;\n  margin-right: ${space(2)};\n`;\n\nexport default TeamSelect;\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport const RoleOverwriteIcon: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n};\n\nexport const RoleOverwritePanelAlert: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n};\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n"],"names":["RoleSelectControl","roles","disableUnallowed","props","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","desc","showDividers","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","TeamSelect","loadingTeams","enforceIdpProvisioned","menuHeader","confirmLastTeamRemoveMessage","selectedOrgRole","selectedTeamRoles","selectedTeams","organization","onAddTeam","onRemoveTeam","onChangeTeamRole","teams","onSearch","fetching","useTeams","orgRoleList","teamRoleList","slugsToFilter","tm","slug","teamSlug","filter","team","some","index","searchKey","flags","t","DropdownTeamBadgeDisabled","avatarSize","DropdownTeamBadge","hasButtons","items","busyItemsStillVisible","onChange","debounce","e","target","DEFAULT_DEBOUNCE_DURATION","onSelect","option","emptyMessage","alignMenu","isOpen","size","numTeams","length","confirmMessage","features","includes","orgRole","ProjectTeamRow","find","MemberTeamRow","selectedTeamRole","role","TeamPanelItem","tct","renderBody","StyledLink","to","message","bypass","onConfirm","icon","isCircled","isRoleOverwritten","hasOrgRoleOverwrite","teamRoleObj","StyledRoleSelectControl","undefined","TeamBadge","p","theme","fontSizeMedium","PanelItem","space","Link","RoleOverwriteIcon","getOverwriteString","color","RoleOverwritePanelAlert","orgRoleObj","findIndex","minimumTeamRole","isSelf","selfNoun","selfPronoun","article","teamRole"],"sourceRoot":""}