{"version":3,"file":"chunks/app_views_settings_project_projectServiceHooks_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport Switch from 'sentry/components/switchButton';\nimport Truncate from 'sentry/components/truncate';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  hook: ServiceHook;\n  onToggleActive: () => void;\n  orgId: string;\n  projectId: string;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <FieldGroup\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </FieldGroup>\n  );\n}\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & AsyncView['state'];\n\nclass ProjectServiceHooks extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    const projectId = params.projectId;\n    return [['hookList', `/projects/${organization.slug}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {organization, params} = this.props;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(\n      `/projects/${organization.slug}/${params.projectId}/hooks/${hook.id}/`,\n      {\n        method: 'PUT',\n        data: {\n          isActive: hook.status !== 'active',\n        },\n        success: data => {\n          clearIndicators();\n          this.setState({\n            hookList: hookList.map(h => {\n              if (h.id === data.id) {\n                return {\n                  ...h,\n                  ...data,\n                };\n              }\n              return h;\n            }),\n          });\n        },\n        error: () => {\n          addErrorMessage(t('Unable to remove application. Please try again.'));\n        },\n      }\n    );\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {organization, params} = this.props;\n\n    return (\n      <Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" showIcon>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={organization.slug}\n              projectId={params.projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {organization, params} = this.props;\n    const access = new Set(organization.access);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${organization.slug}/projects/${params.projectId}/hooks/new/`}\n                size=\"sm\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(ProjectServiceHooks);\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ServiceHookRow","orgId","projectId","hook","onToggleActive","label","to","id","value","url","help","events","length","join","t","isActive","status","size","toggle","ProjectServiceHooks","organization","params","props","hookList","state","addLoadingMessage","api","request","slug","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","getEndpoints","renderEmpty","renderResults","Fragment","type","showIcon","bind","renderBody","body","access","Set","action","has","priority","icon","isCircled","withOrganization"],"sourceRoot":""}