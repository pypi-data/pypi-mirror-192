{"version":3,"file":"chunks/app_views_settings_project_projectSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/projects/appStoreConnectContext.tsx","webpack:///./app/utils/appStoreValidationErrorMessage.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"sourcesContent":["import {createContext, useEffect, useMemo, useState} from 'react';\n\nimport {Organization, Project} from 'sentry/types';\nimport {\n  AppStoreConnectCredentialsStatus,\n  AppStoreConnectStatusData,\n} from 'sentry/types/debugFiles';\nimport {getAppStoreValidationErrorMessage} from 'sentry/utils/appStoreValidationErrorMessage';\nimport useApi from 'sentry/utils/useApi';\n\nexport type AppStoreConnectContextProps =\n  | Record<string, AppStoreConnectStatusData>\n  | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  project?: Project;\n};\n\nconst Provider = ({children, project, organization}: ProviderProps) => {\n  const api = useApi();\n\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectStatusData, setAppStoreConnectStatusData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const appStoreConnectSymbolSources = useMemo(() => {\n    return (\n      projectDetails?.symbolSources ? JSON.parse(projectDetails.symbolSources) : []\n    ).reduce((acc, {type, id, ...symbolSource}) => {\n      if (type.toLowerCase() === 'appstoreconnect') {\n        acc[id] = {type, ...symbolSource};\n      }\n      return acc;\n    }, {});\n  }, [projectDetails?.symbolSources]);\n\n  useEffect(() => {\n    if (!project || projectDetails) {\n      return undefined;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(`/projects/${organization.slug}/${project.slug}/`)\n      .then(responseProjectDetails => {\n        if (unmounted) {\n          return;\n        }\n\n        setProjectDetails(responseProjectDetails);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [project, organization, api]);\n\n  useEffect(() => {\n    if (!projectDetails) {\n      return undefined;\n    }\n\n    if (!Object.keys(appStoreConnectSymbolSources).length) {\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(\n        `/projects/${organization.slug}/${projectDetails.slug}/appstoreconnect/status/`\n      )\n      .then(appStoreConnectStatus => {\n        if (unmounted) {\n          return;\n        }\n        setAppStoreConnectStatusData(appStoreConnectStatus);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [projectDetails, organization, appStoreConnectSymbolSources, api]);\n\n  function getUpdateAlertMessage(\n    respository: NonNullable<Parameters<typeof getAppStoreValidationErrorMessage>[1]>,\n    credentials: AppStoreConnectCredentialsStatus\n  ) {\n    if (credentials?.status === 'valid') {\n      return undefined;\n    }\n\n    return getAppStoreValidationErrorMessage(credentials, respository);\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectStatusData && project\n          ? Object.keys(appStoreConnectStatusData).reduce((acc, key) => {\n              const appStoreConnect = appStoreConnectStatusData[key];\n              return {\n                ...acc,\n                [key]: {\n                  ...appStoreConnect,\n                  updateAlertMessage: getUpdateAlertMessage(\n                    {\n                      name: appStoreConnectSymbolSources[key].name,\n                      link: `/settings/${organization.slug}/projects/${project.slug}/debug-symbols/?customRepository=${key}`,\n                    },\n                    appStoreConnect.credentials\n                  ),\n                },\n              };\n            }, {})\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n};\n\nexport {Provider};\n\nexport default AppStoreConnectContext;\n","import * as Sentry from '@sentry/react';\n\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {AppStoreConnectValidationError} from 'sentry/types/debugFiles';\n\nexport const unexpectedErrorMessage = t(\n  'An unexpected error occurred while configuring the App Store Connect integration'\n);\n\nexport function getAppStoreValidationErrorMessage(\n  error: AppStoreConnectValidationError,\n  repo?: {link: string; name: string}\n) {\n  switch (error.code) {\n    case 'app-connect-authentication-error':\n      return repo\n        ? tct(\n            'App Store Connect credentials are invalid or missing. [linkToCustomRepository]',\n            {\n              linkToCustomRepository: (\n                <Link to={repo.link}>\n                  {tct(\n                    \"Make sure the credentials of the '[customRepositoryName]' repository are correct and exist.\",\n                    {\n                      customRepositoryName: repo.name,\n                    }\n                  )}\n                </Link>\n              ),\n            }\n          )\n        : t('The supplied App Store Connect credentials are invalid or missing.');\n    case 'app-connect-forbidden-error':\n      return t('The supplied API key does not have sufficient permissions.');\n    case 'app-connect-multiple-sources-error':\n      return t('Only one App Store Connect application is allowed in this project.');\n    default: {\n      // this shall not happen\n      Sentry.captureException(new Error('Unknown app store connect error.'));\n      return unexpectedErrorMessage;\n    }\n  }\n}\n","import {Component, createRef} from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {setActiveProject} from 'sentry/actionCreators/projects';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport MissingProjectMembership from 'sentry/components/projects/missingProjectMembership';\nimport {t} from 'sentry/locale';\nimport SentryTypes from 'sentry/sentryTypes';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project, User} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype ChildFuncProps = {\n  project: Project;\n};\n\ntype Props = {\n  api: Client;\n  children: ((props: ChildFuncProps) => React.ReactNode) | React.ReactNode;\n  loadingProjects: boolean;\n  orgId: string;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n};\n\ntype State = {\n  error: boolean;\n  errorType: ErrorTypes | null;\n  loading: boolean;\n  memberList: User[];\n  project: Project | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nclass ProjectContext extends Component<Props, State> {\n  static childContextTypes = {\n    project: SentryTypes.Project,\n  };\n\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  }\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  }\n\n  componentDidMount() {\n    // Wait for withProjects to fetch projects before making request\n    // Once loaded we can fetchData in componentDidUpdate\n    const {loadingProjects} = this.props;\n    if (!loadingProjects) {\n      this.fetchData();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      const docTitle = this.docTitleRef.current;\n      if (!docTitle) {\n        return;\n      }\n      docTitle.forceUpdate();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeMembers();\n    this.unsubscribeProjects();\n  }\n\n  docTitleRef = createRef<DocumentTitle>();\n\n  unsubscribeProjects = ProjectsStore.listen(\n    (projectIds: Set<string>) => this.onProjectChange(projectIds),\n    undefined\n  );\n\n  unsubscribeMembers = MemberListStore.listen(\n    (memberList: (typeof MemberListStore)['state']) => this.setState({memberList}),\n    undefined\n  );\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  }\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  }\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)} as Project,\n    });\n  }\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  }\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, [activeProject.id]);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  }\n\n  renderBody() {\n    const {children, organization} = this.props;\n    const {error, errorType, loading, project} = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!error && project) {\n      return typeof children === 'function' ? children({project}) : children;\n    }\n\n    switch (errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <Layout.Page withPadding>\n            <Alert type=\"warning\">\n              {t('The project you were looking for was not found.')}\n            </Alert>\n          </Layout.Page>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership organization={organization} project={project} />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  render() {\n    return (\n      <DocumentTitle ref={this.docTitleRef} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {useContext} from 'react';\n\nimport AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\nimport withProject from 'sentry/utils/withProject';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\nimport getConfiguration from 'sentry/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = appStoreConnectContext\n    ? Object.keys(appStoreConnectContext).some(\n        key => appStoreConnectContext[key].credentials.status === 'invalid'\n      )\n    : false;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n};\n\nexport default withProject(ProjectSettingsNavigation);\n","import {cloneElement, isValidElement} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\nimport useRouteAnalyticsParams from 'sentry/utils/routeAnalytics/useRouteAnalyticsParams';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ProjectContext from 'sentry/views/projects/projectContext';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'sentry/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  children: React.ReactNode;\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype InnerProps = Props & {project: Project};\n\nfunction InnerProjectSettingsLayout({\n  params,\n  routes,\n  project,\n  organization,\n  children,\n  ...props\n}: InnerProps) {\n  // set analytics params for route based analytics\n  useRouteAnalyticsParams({\n    project_id: project.id,\n    project_platform: project.platform,\n  });\n  return (\n    <AppStoreConnectContext.Provider project={project} organization={organization}>\n      <SettingsLayout\n        params={params}\n        routes={routes}\n        {...props}\n        renderNavigation={() => <ProjectSettingsNavigation organization={organization} />}\n      >\n        {children && isValidElement(children)\n          ? cloneElement<any>(children, {organization, project})\n          : children}\n      </SettingsLayout>\n    </AppStoreConnectContext.Provider>\n  );\n}\n\nfunction ProjectSettingsLayout({organization, params, ...props}: Props) {\n  return (\n    <ProjectContext orgId={organization.slug} projectId={params.projectId}>\n      {({project}) => (\n        <InnerProjectSettingsLayout {...{params, project, organization, ...props}} />\n      )}\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"names":["AppStoreConnectContext","createContext","undefined","Provider","children","project","organization","api","useApi","projectDetails","setProjectDetails","useState","appStoreConnectStatusData","setAppStoreConnectStatusData","appStoreConnectSymbolSources","useMemo","symbolSources","JSON","parse","reduce","acc","type","id","symbolSource","toLowerCase","getUpdateAlertMessage","respository","credentials","status","getAppStoreValidationErrorMessage","useEffect","unmounted","requestPromise","slug","then","responseProjectDetails","catch","Object","keys","length","appStoreConnectStatus","value","key","appStoreConnect","updateAlertMessage","name","link","unexpectedErrorMessage","t","error","repo","code","tct","linkToCustomRepository","to","customRepositoryName","Sentry","Error","ErrorTypes","ProjectContext","Component","this","getInitialState","createRef","ProjectsStore","projectIds","onProjectChange","MemberListStore","memberList","setState","loading","errorType","getChildContext","state","componentDidMount","loadingProjects","props","fetchData","componentWillReceiveProps","nextProps","projectId","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","projects","docTitle","docTitleRef","current","forceUpdate","componentWillUnmount","unsubscribeMembers","unsubscribeProjects","getTitle","has","identifyProject","projectSlug","find","async","orgId","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","PROJECT_NOT_FOUND","MISSING_MEMBERSHIP","renderBody","className","withPadding","ErrorWrapper","onRetry","render","ref","title","SentryTypes","withApi","withOrganization","withProjects","space","ProjectSettingsNavigation","appStoreConnectContext","useContext","debugFilesNeedsReview","some","navigationObjects","getConfiguration","access","Set","features","withProject","InnerProjectSettingsLayout","params","routes","useRouteAnalyticsParams","project_id","project_platform","platform","renderNavigation","isValidElement","cloneElement","ProjectSettingsLayout"],"sourceRoot":""}