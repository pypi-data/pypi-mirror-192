{"version":3,"file":"chunks/app_views_settings_organizationRepositories_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4LAYA,QAZA,SACEA,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,m4BCSA,SAASC,EAAyB,GAAqD,IAArD,SAACC,EAAQ,mBAAEC,EAAkB,aAAEC,GAAoB,EACnF,MAAMC,GAAMC,EAAAA,EAAAA,KAENC,EAAcL,GAAYA,EAASM,OAAS,EAElD,OACE,0BACE,QAAC,IAAkB,CAACC,OAAOC,EAAAA,EAAAA,GAAE,mBAC7B,QAAC,IAAS,CAACC,GAAK,aAAYP,EAAaQ,qBAAqB,UAC3DF,EAAAA,EAAAA,GACC,sHAGFH,IACA,eAAKM,UAAU,QAAO,UACpB,QAAC,IAAS,YACPH,EAAAA,EAAAA,GACC,+PACA,KAEDI,EAAAA,EAAAA,IAAI,iDAAkD,CACrDC,MAAM,QAAC,IAAY,CAACC,KAAK,kDAMhCT,GACC,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEG,EAAAA,EAAAA,GAAE,yBAChB,QAAC,IAAS,WACR,wBACGR,EAASe,KAAIC,IACZ,QAAC,IAAa,CACZb,IAAKA,EAELc,WAAYD,EACZE,cAAY,EACZC,MAAOjB,EAAaQ,KACpBT,mBAAoBA,GAJfe,EAAKI,cAWpB,QAAC,KAAK,WACJ,QAAC,IAAY,CACXC,MAAM,QAAC,KAAU,CAACC,KAAK,OACvBf,OAAOC,EAAAA,EAAAA,GAAE,qCACTe,aAAaf,EAAAA,EAAAA,GACX,2HAEFgB,QACE,QAAC,KAAM,CAACC,UAAQ,EAACX,KAAK,yCAAwC,UAC3DN,EAAAA,EAAAA,GAAE,sBAQnB,CA/DST,EAAwB,uCAiEjC,UChEA,MAAM2B,UAA0CC,EAAAA,EAAwB,qEAShDC,IACpB,MAAM5B,EAAW6B,KAAKC,MAAM9B,SAC5BA,GAAU+B,SAAQC,IACZA,EAAKZ,KAAOQ,EAAKR,KACnBY,EAAKC,OAASL,EAAKK,OACrB,IAEFJ,KAAKK,SAAS,CAAClC,YAAU,GAC1B,CAhBDmC,eACE,MAAM,aAACjC,GAAgB2B,KAAKO,MAC5B,MAAO,CACL,CAAC,WAAa,kBAAiBlC,EAAaQ,cAAe,CAAC2B,MAAO,CAACJ,OAAQ,MAEhF,CAaAK,WACE,MAAM,aAACpC,GAAgB2B,KAAKO,MAC5B,OAAOG,EAAAA,EAAAA,IAAc/B,EAAAA,EAAAA,GAAE,gBAAiBN,EAAaQ,MAAM,EAC7D,CAEA8B,aACE,MAAM,SAACxC,EAAQ,kBAAEyC,GAAqBZ,KAAKC,MAE3C,OACE,QAAC,EAAAY,SAAQ,YACP,QAAC,EAAwB,IACnBb,KAAKO,MACTpC,SAAUA,EACVC,mBAAoB4B,KAAK5B,qBAE1BwC,IACC,QAAC,IAAU,CAACE,UAAWF,KAAuBZ,KAAKO,UAI3D,EAGF,SAAeQ,EAAAA,EAAAA,GAAiBlB,E","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/organizationRepositories/organizationRepositories.tsx","webpack:///./app/views/settings/organizationRepositories/index.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AlertLink from 'sentry/components/alertLink';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport RepositoryRow from 'sentry/components/repositoryRow';\nimport {IconCommit} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Repository, RepositoryStatus} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = {\n  itemList: Repository[];\n  onRepositoryChange: (data: {id: string; status: RepositoryStatus}) => void;\n  organization: Organization;\n};\n\nfunction OrganizationRepositories({itemList, onRepositoryChange, organization}: Props) {\n  const api = useApi();\n\n  const hasItemList = itemList && itemList.length > 0;\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Repositories')} />\n      <AlertLink to={`/settings/${organization.slug}/integrations/`}>\n        {t(\n          'Want to add a repository to start tracking commits? Install or configure your version control integration here.'\n        )}\n      </AlertLink>\n      {!hasItemList && (\n        <div className=\"m-b-2\">\n          <TextBlock>\n            {t(\n              \"Connecting a repository allows Sentry to capture commit data via webhooks. This enables features like suggested assignees and resolving issues via commit message. Once you've connected a repository, you can associate commits with releases via the API.\"\n            )}\n            &nbsp;\n            {tct('See our [link:documentation] for more details.', {\n              link: <ExternalLink href=\"https://docs.sentry.io/learn/releases/\" />,\n            })}\n          </TextBlock>\n        </div>\n      )}\n\n      {hasItemList ? (\n        <Panel>\n          <PanelHeader>{t('Added Repositories')}</PanelHeader>\n          <PanelBody>\n            <div>\n              {itemList.map(repo => (\n                <RepositoryRow\n                  api={api}\n                  key={repo.id}\n                  repository={repo}\n                  showProvider\n                  orgId={organization.slug}\n                  onRepositoryChange={onRepositoryChange}\n                />\n              ))}\n            </div>\n          </PanelBody>\n        </Panel>\n      ) : (\n        <Panel>\n          <EmptyMessage\n            icon={<IconCommit size=\"xl\" />}\n            title={t('Sentry is better with commit data')}\n            description={t(\n              'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'\n            )}\n            action={\n              <Button external href=\"https://docs.sentry.io/learn/releases/\">\n                {t('Learn more')}\n              </Button>\n            }\n          />\n        </Panel>\n      )}\n    </div>\n  );\n}\n\nexport default OrganizationRepositories;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport {Organization, Repository} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport OrganizationRepositories from './organizationRepositories';\n\ntype Props = RouteComponentProps<{}, {}> & {\n  organization: Organization;\n} & AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  itemList: Repository[] | null;\n};\n\nclass OrganizationRepositoriesContainer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    return [\n      ['itemList', `/organizations/${organization.slug}/repos/`, {query: {status: ''}}],\n    ];\n  }\n\n  // Callback used by child component to signal state change\n  onRepositoryChange = (data: Pick<Repository, 'id' | 'status'>) => {\n    const itemList = this.state.itemList;\n    itemList?.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n      }\n    });\n    this.setState({itemList});\n  };\n\n  getTitle() {\n    const {organization} = this.props;\n    return routeTitleGen(t('Repositories'), organization.slug, false);\n  }\n\n  renderBody() {\n    const {itemList, itemListPageLinks} = this.state;\n\n    return (\n      <Fragment>\n        <OrganizationRepositories\n          {...this.props}\n          itemList={itemList!}\n          onRepositoryChange={this.onRepositoryChange}\n        />\n        {itemListPageLinks && (\n          <Pagination pageLinks={itemListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationRepositoriesContainer);\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","OrganizationRepositories","itemList","onRepositoryChange","organization","api","useApi","hasItemList","length","title","t","to","slug","className","tct","link","href","map","repo","repository","showProvider","orgId","id","icon","size","description","action","external","OrganizationRepositoriesContainer","AsyncView","data","this","state","forEach","item","status","setState","getEndpoints","props","query","getTitle","routeTitleGen","renderBody","itemListPageLinks","Fragment","pageLinks","withOrganization"],"sourceRoot":""}