{"version":3,"file":"chunks/app_utils_discover_charts_tsx-app_views_profiling_profileSummary_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/profiling/profilingBreadcrumbs.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/profiling/hooks/useCurrentProjectFromRouteParam.tsx","webpack:///./app/utils/profiling/routes.tsx","webpack:///./app/views/profiling/profileSummary/index.tsx"],"sourcesContent":["import {useMemo} from 'react';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport _Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {\n  generateProfileDetailsRouteWithQuery,\n  generateProfileFlamechartRouteWithQuery,\n  generateProfileSummaryRouteWithQuery,\n  generateProfilingRouteWithQuery,\n} from 'sentry/utils/profiling/routes';\n\nexport interface ProfilingBreadcrumbsProps {\n  organization: Organization;\n  trails: Trail[];\n}\n\nfunction ProfilingBreadcrumbs({organization, trails}: ProfilingBreadcrumbsProps) {\n  const crumbs = useMemo(\n    () => trails.map(trail => trailToCrumb(trail, {organization})),\n    [organization, trails]\n  );\n  return <_Breadcrumbs crumbs={crumbs} />;\n}\n\nfunction trailToCrumb(\n  trail: Trail,\n  {\n    organization,\n  }: {\n    organization: Organization;\n  }\n): Crumb {\n  switch (trail.type) {\n    case 'landing': {\n      return {\n        to: generateProfilingRouteWithQuery({\n          // cursor and query are not used in the landing page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n        }),\n        label: t('Profiling'),\n        preservePageFilters: true,\n      };\n    }\n    case 'profile summary': {\n      return {\n        to: generateProfileSummaryRouteWithQuery({\n          // cursor and query are not used in the summary page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          transaction: trail.payload.transaction,\n        }),\n        label: t('Profile Summary'),\n        preservePageFilters: true,\n      };\n    }\n    case 'flamechart': {\n      const generateRouteWithQuery =\n        trail.payload.tab === 'flamechart'\n          ? generateProfileFlamechartRouteWithQuery\n          : generateProfileDetailsRouteWithQuery;\n      return {\n        to: generateRouteWithQuery({\n          query: trail.payload.query,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          profileId: trail.payload.profileId,\n        }),\n        label: trail.payload.transaction,\n        preservePageFilters: true,\n      };\n    }\n    default:\n      throw new Error(`Unknown breadcrumb type: ${JSON.stringify(trail)}`);\n  }\n}\n\ntype ProfilingTrail = {\n  payload: {\n    query: Location['query'];\n  };\n  type: 'landing';\n};\n\ntype ProfileSummaryTrail = {\n  payload: {\n    projectSlug: Project['slug'];\n    query: Location['query'];\n    transaction: string;\n  };\n  type: 'profile summary';\n};\n\ntype FlamegraphTrail = {\n  payload: {\n    profileId: string;\n    projectSlug: string;\n    query: Location['query'];\n    tab: 'flamechart' | 'details';\n    transaction: string;\n  };\n  type: 'flamechart';\n};\n\ntype Trail = ProfilingTrail | ProfileSummaryTrail | FlamegraphTrail;\n\nexport {ProfilingBreadcrumbs};\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import {Project} from 'sentry/types';\nimport {useParams} from 'sentry/utils/useParams';\nimport useProjects from 'sentry/utils/useProjects';\n\nexport function useCurrentProjectFromRouteParam(): Project | null {\n  const params = useParams();\n  const projects = useProjects({limit: 1, slugs: [params?.projectId]});\n  return projects.projects?.[0] ?? null;\n}\n","import {Location, LocationDescriptor, Path} from 'history';\n\nimport {Organization, Project} from 'sentry/types';\nimport {Trace} from 'sentry/types/profiling/core';\n\nexport function generateProfilingRoute({orgSlug}: {orgSlug: Organization['slug']}): Path {\n  return `/organizations/${orgSlug}/profiling/`;\n}\n\nexport function generateProfileSummaryRoute({\n  orgSlug,\n  projectSlug,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n}): Path {\n  return `/organizations/${orgSlug}/profiling/summary/${projectSlug}/`;\n}\n\nexport function generateProfileFlamechartRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/flamechart/`;\n}\n\nexport function generateProfileDetailsRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/details/`;\n}\n\nexport function generateProfilingRouteWithQuery({\n  orgSlug,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfilingRoute({orgSlug});\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileSummaryRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  transaction,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n  transaction: string;\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileSummaryRoute({orgSlug, projectSlug});\n  return {\n    pathname,\n    query: {\n      ...query,\n      transaction,\n    },\n  };\n}\n\nexport function generateProfileFlamechartRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileFlamechartRoute({\n    orgSlug,\n    projectSlug,\n    profileId,\n  });\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileFlamechartRouteWithHighlightFrame({\n  orgSlug,\n  projectSlug,\n  profileId,\n  frameName,\n  framePackage,\n  query,\n}: {\n  frameName: string;\n  framePackage: string;\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  return generateProfileFlamechartRouteWithQuery({\n    orgSlug,\n    projectSlug,\n    profileId,\n    query: {\n      ...query,\n      frameName,\n      framePackage,\n    },\n  });\n}\n\nexport function generateProfileDetailsRouteWithQuery({\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileDetailsRoute({orgSlug, projectSlug, profileId});\n  return {\n    pathname,\n    query: {\n      ...query,\n    },\n  };\n}\n","import {Fragment, useCallback, useEffect, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {\n  ProfilingBreadcrumbs,\n  ProfilingBreadcrumbsProps,\n} from 'sentry/components/profiling/profilingBreadcrumbs';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport SmartSearchBar, {SmartSearchBarProps} from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {PageFilters, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {useCurrentProjectFromRouteParam} from 'sentry/utils/profiling/hooks/useCurrentProjectFromRouteParam';\nimport {useProfileFilters} from 'sentry/utils/profiling/hooks/useProfileFilters';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {ProfileSummaryContent} from './content';\n\ninterface ProfileSummaryPageProps {\n  location: Location;\n  params: {\n    projectId?: Project['slug'];\n  };\n  selection: PageFilters;\n}\n\nfunction ProfileSummaryPage(props: ProfileSummaryPageProps) {\n  const organization = useOrganization();\n  const project = useCurrentProjectFromRouteParam();\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('profiling_views.profile_summary', {\n      organization,\n      project_platform: project?.platform,\n      project_id: project?.id,\n    });\n    // ignore  currentProject so we don't block the analytics event\n    // or fire more than once unnecessarily\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organization]);\n\n  const transaction = decodeScalar(props.location.query.transaction);\n\n  const rawQuery = useMemo(\n    () => decodeScalar(props.location.query.query, ''),\n    [props.location.query.query]\n  );\n\n  const query = useMemo(() => {\n    const search = new MutableSearch(rawQuery);\n\n    if (defined(transaction)) {\n      search.setFilterValues('transaction', [transaction]);\n    }\n\n    // there are no aggregations happening on this page,\n    // so remove any aggregate filters\n    Object.keys(search.filters).forEach(field => {\n      if (isAggregateField(field)) {\n        search.removeFilter(field);\n      }\n    });\n\n    return search.formatString();\n  }, [rawQuery, transaction]);\n\n  const filtersQuery = useMemo(() => {\n    // To avoid querying for the filters each time the query changes,\n    // do not pass the user query to get the filters.\n    const search = new MutableSearch('');\n\n    if (defined(transaction)) {\n      search.setFilterValues('transaction_name', [transaction]);\n    }\n\n    return search.formatString();\n  }, [transaction]);\n\n  const profileFilters = useProfileFilters({\n    query: filtersQuery,\n    selection: props.selection,\n  });\n\n  const handleSearch: SmartSearchBarProps['onSearch'] = useCallback(\n    (searchQuery: string) => {\n      browserHistory.push({\n        ...props.location,\n        query: {\n          ...props.location.query,\n          query: searchQuery || undefined,\n          cursor: undefined,\n        },\n      });\n    },\n    [props.location]\n  );\n\n  const breadcrumbTrails: ProfilingBreadcrumbsProps['trails'] = useMemo(() => {\n    return [\n      {\n        type: 'landing',\n        payload: {\n          query: props.location.query,\n        },\n      },\n      {\n        type: 'profile summary',\n        payload: {\n          projectSlug: project?.slug ?? '',\n          query: props.location.query,\n          transaction: transaction ?? '',\n        },\n      },\n    ];\n  }, [props.location.query, project?.slug, transaction]);\n\n  return (\n    <SentryDocumentTitle\n      title={t('Profiling \\u2014 Profile Summary')}\n      orgSlug={organization.slug}\n    >\n      <PageFiltersContainer\n        shouldForceProject={defined(project)}\n        forceProject={project}\n        specificProjectSlugs={defined(project) ? [project.slug] : []}\n      >\n        <Layout.Page>\n          {project && transaction && (\n            <Fragment>\n              <Layout.Header>\n                <Layout.HeaderContent>\n                  <ProfilingBreadcrumbs\n                    organization={organization}\n                    trails={breadcrumbTrails}\n                  />\n                  <Layout.Title>\n                    {project ? (\n                      <IdBadge\n                        project={project}\n                        avatarSize={28}\n                        hideName\n                        avatarProps={{hasTooltip: true, tooltip: project.slug}}\n                      />\n                    ) : null}\n                    {transaction}\n                  </Layout.Title>\n                </Layout.HeaderContent>\n              </Layout.Header>\n              <Layout.Body>\n                <Layout.Main fullWidth>\n                  <ActionBar>\n                    <PageFilterBar condensed>\n                      <EnvironmentPageFilter />\n                      <DatePageFilter alignDropdown=\"left\" />\n                    </PageFilterBar>\n                    <SmartSearchBar\n                      organization={organization}\n                      hasRecentSearches\n                      searchSource=\"profile_summary\"\n                      supportedTags={profileFilters}\n                      query={rawQuery}\n                      onSearch={handleSearch}\n                      maxQueryLength={MAX_QUERY_LENGTH}\n                    />\n                  </ActionBar>\n                  <ProfileSummaryContent\n                    location={props.location}\n                    project={project}\n                    selection={props.selection}\n                    transaction={transaction}\n                    query={query}\n                  />\n                </Layout.Main>\n              </Layout.Body>\n            </Fragment>\n          )}\n        </Layout.Page>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nconst ActionBar = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  grid-template-columns: min-content auto;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withPageFilters(ProfileSummaryPage);\n"],"names":["ProfilingBreadcrumbs","organization","trails","crumbs","useMemo","map","trail","type","to","generateProfilingRouteWithQuery","query","omit","payload","orgSlug","slug","label","t","preservePageFilters","generateProfileSummaryRouteWithQuery","projectSlug","transaction","tab","generateProfileFlamechartRouteWithQuery","generateProfileDetailsRouteWithQuery","profileId","Error","JSON","stringify","trailToCrumb","tooltipFormatter","value","outputType","defined","tooltipFormatterUsingAggregateOutputType","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","formatAbbreviatedNumber","axisDuration","categorizeDuration","WEEK","toFixed","DAY","HOUR","MINUTE","SECOND","getDurationUnit","series","legend","range","data","maxSeries","minSeries","forEach","idx","seriesName","selected","length","max","Math","filter","min","findRangeOfMultiSeries","avg","useCurrentProjectFromRouteParam","params","useParams","useProjects","limit","slugs","projectId","projects","generateProfileFlamechartRoute","pathname","generateProfilingRoute","generateProfileSummaryRoute","generateProfileFlamechartRouteWithHighlightFrame","frameName","framePackage","generateProfileDetailsRoute","ProfileSummaryPage","props","useOrganization","project","useEffect","trackAdvancedAnalyticsEvent","project_platform","platform","project_id","id","decodeScalar","location","rawQuery","search","MutableSearch","setFilterValues","Object","keys","filters","field","isAggregateField","removeFilter","formatString","filtersQuery","profileFilters","useProfileFilters","selection","handleSearch","useCallback","searchQuery","browserHistory","undefined","cursor","breadcrumbTrails","title","shouldForceProject","forceProject","specificProjectSlugs","Fragment","avatarSize","hideName","avatarProps","hasTooltip","tooltip","fullWidth","ActionBar","condensed","alignDropdown","hasRecentSearches","searchSource","supportedTags","onSearch","maxQueryLength","MAX_QUERY_LENGTH","space","withPageFilters"],"sourceRoot":""}