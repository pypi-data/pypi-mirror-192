{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_expectCt_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"oWAOA,MAAMA,EAAiB,QAAC,KAACC,EAAO,QAAc,SAC5C,QAAC,KAAK,CAACA,KAAMA,EAAMC,UAAQ,YACxBC,EAAAA,EAAAA,GACC,+FAEI,EALJH,EAAc,6BAQpB,S,0DCHA,QAZA,SACEI,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,wPCJe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,8kBCiB9B,MAAMO,UAA+BP,EAAAA,EACnCQ,eACE,MAAM,aAACC,GAAgBJ,KAAKK,OACtB,UAACC,GAAaN,KAAKK,MAAME,OAC/B,MAAO,CAAC,CAAC,UAAY,aAAYH,EAAaI,QAAQF,WACxD,CAEAT,WACE,MAAM,UAACS,GAAaN,KAAKK,MAAME,OAC/B,OAAOE,EAAAA,EAAAA,IAAcrB,EAAAA,EAAAA,GAAE,wCAAyCkB,GAAW,EAC7E,CAEAI,gBAAgBC,GACd,MAAQ,2BAAyBC,EAAAA,EAAAA,GAAeD,KAClD,CAEAE,aACE,MAAM,aAACT,EAAY,OAAEG,GAAUP,KAAKK,OAC9B,QAACM,GAAWX,KAAKc,MACvB,OAAKH,GAKH,0BACE,QAAC,IAAkB,CAACZ,OAAOX,EAAAA,EAAAA,GAAE,+BAE7B,QAAC,IAAc,KAEf,QAAC,IAAS,CACRuB,QAASA,EACTI,MAAOX,EAAaI,KACpBF,UAAWC,EAAOD,aAGpB,QAAC,KAAK,YACJ,QAAC,KAAW,WAAElB,EAAAA,EAAAA,GAAE,YAChB,QAAC,IAAS,CAAC4B,aAAW,aACpB,uBACGC,EAAAA,EAAAA,IACE,mLAED,CACEC,MACE,QAAC,IAAY,CAACC,KAAK,gEAK3B,uBACGF,EAAAA,EAAAA,IACC,mGACA,CACEG,QAAQ,yBAAM,mBAKpB,wBAAMpB,KAAKU,gBAAgBC,MAE3B,uBACGM,EAAAA,EAAAA,IAAI,uDAAwD,CAC3DC,MACE,QAAC,IAAY,CAACC,KAAK,qFA3CxB,IAmDX,EAGF,SAAeE,EAAAA,EAAAA,GAAiBnB,E,gbCzFhC,MAAMoB,EAAmB,kDAElB,SAASV,EAAeD,GAC7B,MAAMY,EAAWZ,EAAQa,OAASb,EAAQ,GAAGc,IAAIC,SAAWJ,EAC5D,OAAOK,EAAAA,EAAAA,GAAe,CACpBC,MAAOL,EACPM,MAAOP,GAEX,CAQe,SAASQ,EAAU,GAAoC,IAApC,QAACnB,EAAO,MAAEI,EAAK,UAAET,GAAiB,EAClE,OACE,QAAC,KAAK,YACJ,QAAC,KAAW,WAAElB,EAAAA,EAAAA,GAAE,iBAChB,QAAC,IAAS,YACR,QAAC,KAAU,CAACF,KAAK,OAAM,UACpB+B,EAAAA,EAAAA,IACC,sFACA,CACEC,MAAM,QAAC,IAAI,CAACa,GAAK,aAAYhB,cAAkBT,iBAIrD,QAAC,IAAU,CAAC0B,QAAQ,EAAOC,0BAAwB,YACjD,QAAC,IAAa,UAAErB,EAAeD,YAKzC,CAnBwBmB,EAAS,uB","sources":["webpack:///./app/components/previewFeature.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/expectCt.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  type?: React.ComponentProps<typeof Alert>['type'];\n};\n\nconst PreviewFeature = ({type = 'info'}: Props) => (\n  <Alert type={type} showIcon>\n    {t(\n      'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n    )}\n  </Alert>\n);\n\nexport default PreviewFeature;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport PreviewFeature from 'sentry/components/previewFeature';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, ProjectKey} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ReportUri, {\n  getSecurityDsn,\n} from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectExpectCtReports extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    return [['keyList', `/projects/${organization.slug}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Certificate Transparency (Expect-CT)'), projectId, false);\n  }\n\n  getInstructions(keyList: ProjectKey[]) {\n    return `Expect-CT: report-uri=\"${getSecurityDsn(keyList)}\"`;\n  }\n\n  renderBody() {\n    const {organization, params} = this.props;\n    const {keyList} = this.state;\n    if (!keyList) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Certificate Transparency')} />\n\n        <PreviewFeature />\n\n        <ReportUri\n          keyList={keyList}\n          orgId={organization.slug}\n          projectId={params.projectId}\n        />\n\n        <Panel>\n          <PanelHeader>{t('About')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                `[link:Certificate Transparency]\n      (CT) is a security standard which helps track and identify valid certificates, allowing identification of maliciously issued certificates`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://en.wikipedia.org/wiki/Certificate_Transparency\" />\n                  ),\n                }\n              )}\n            </p>\n            <p>\n              {tct(\n                \"To configure reports in Sentry, you'll need to configure the [header] a header from your server:\",\n                {\n                  header: <code>Expect-CT</code>,\n                }\n              )}\n            </p>\n\n            <pre>{this.getInstructions(keyList)}</pre>\n\n            <p>\n              {tct('For more information, see [link:the article on MDN].', {\n                link: (\n                  <ExternalLink href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\" />\n                ),\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectExpectCtReports);\n","import FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <FieldGroup inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["PreviewFeature","type","showIcon","t","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ProjectExpectCtReports","getEndpoints","organization","props","projectId","params","slug","routeTitleGen","getInstructions","keyList","getSecurityDsn","renderBody","state","orgId","withPadding","tct","link","href","header","withOrganization","DEFAULT_ENDPOINT","endpoint","length","dsn","security","getDynamicText","value","fixed","ReportUri","to","inline","flexibleControlStateSize"],"sourceRoot":""}