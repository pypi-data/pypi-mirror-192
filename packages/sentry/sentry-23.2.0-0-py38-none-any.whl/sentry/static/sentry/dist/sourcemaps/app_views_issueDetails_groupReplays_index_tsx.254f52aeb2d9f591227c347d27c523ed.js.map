{"version":3,"file":"chunks/app_views_issueDetails_groupReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/issueDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/issueDetails/groupReplays/useReplaysFromIssue.tsx","webpack:///./app/views/issueDetails/groupReplays/index.tsx"],"sourcesContent":["import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useMemo} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport type {Group, Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useReplaysFromIssue from 'sentry/views/issueDetails/groupReplays/useReplaysFromIssue';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Props = {\n  group: Group;\n};\n\nfunction GroupReplays({group}: Props) {\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n  const organization = useOrganization();\n  const location = useLocation<ReplayListLocationQuery>();\n\n  const {eventView, fetchError, pageLinks} = useReplaysFromIssue({\n    group,\n    location,\n    organization,\n  });\n\n  if (!eventView) {\n    return (\n      <StyledLayoutPage withPadding>\n        <ReplayTable\n          fetchError={fetchError}\n          isFetching\n          replays={[]}\n          sort={undefined}\n          visibleColumns={[\n            ReplayColumns.session,\n            ...(hasRoomForColumns ? [ReplayColumns.startedAt] : []),\n            ReplayColumns.duration,\n            ReplayColumns.countErrors,\n            ReplayColumns.activity,\n          ]}\n        />\n      </StyledLayoutPage>\n    );\n  }\n  return (\n    <GroupReplaysTable\n      eventView={eventView}\n      organization={organization}\n      pageLinks={pageLinks}\n    />\n  );\n}\n\nconst GroupReplaysTable = ({\n  eventView,\n  organization,\n}: {\n  eventView: EventView;\n  organization: Organization;\n  pageLinks: string | null;\n}) => {\n  const location = useMemo(() => ({query: {}} as Location<ReplayListLocationQuery>), []);\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const {replays, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  return (\n    <StyledLayoutPage withPadding>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replays}\n        sort={undefined}\n        visibleColumns={[\n          ReplayColumns.session,\n          ...(hasRoomForColumns ? [ReplayColumns.startedAt] : []),\n          ReplayColumns.duration,\n          ReplayColumns.countErrors,\n          ReplayColumns.activity,\n        ]}\n      />\n    </StyledLayoutPage>\n  );\n};\n\nconst StyledLayoutPage = styled(Layout.Page)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nexport default GroupReplays;\n","import {useCallback, useEffect, useMemo, useState} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport type {Group, Organization} from 'sentry/types';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT, REPLAY_LIST_FIELDS} from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport useCleanQueryParamsOnRouteLeave from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nfunction useReplayFromIssue({\n  group,\n  location,\n  organization,\n}: {\n  group: Group;\n  location: Location;\n  organization: Organization;\n}) {\n  const api = useApi();\n\n  const [response, setResponse] = useState<{\n    pageLinks: null | string;\n    replayIds: undefined | string[];\n  }>({pageLinks: null, replayIds: undefined});\n\n  const [fetchError, setFetchError] = useState();\n\n  const {cursor} = location.query;\n  const fetchReplayIds = useCallback(async () => {\n    const eventView = EventView.fromSavedQuery({\n      id: '',\n      name: `Errors within replay`,\n      version: 2,\n      fields: ['replayId', 'count()'],\n      query: `issue.id:${group.id} !replayId:\"\"`,\n      projects: [Number(group.project.id)],\n    });\n\n    try {\n      const [{data}, _textStatus, resp] = await doDiscoverQuery<TableData>(\n        api,\n        `/organizations/${organization.slug}/events/`,\n        eventView.getEventsAPIPayload({\n          query: {cursor},\n        } as Location<ReplayListLocationQuery>)\n      );\n\n      setResponse({\n        pageLinks: resp?.getResponseHeader('Link') ?? '',\n        replayIds: data.map(record => String(record.replayId)),\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n      setFetchError(err);\n    }\n  }, [api, cursor, organization.slug, group.id, group.project.id]);\n\n  const eventView = useMemo(() => {\n    if (!response.replayIds) {\n      return null;\n    }\n    return EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields: REPLAY_LIST_FIELDS,\n      projects: [Number(group.project.id)],\n      query: `id:[${String(response.replayIds)}]`,\n      orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n    });\n  }, [location.query.sort, group.project.id, response.replayIds]);\n\n  useCleanQueryParamsOnRouteLeave({fieldsToClean: ['cursor']});\n  useEffect(() => {\n    fetchReplayIds();\n  }, [fetchReplayIds]);\n\n  return {\n    eventView,\n    fetchError,\n    pageLinks: response.pageLinks,\n  };\n}\n\nexport default useReplayFromIssue;\n","import {ComponentProps} from 'react';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\ntype Props = ComponentProps<typeof GroupReplays>;\n\nfunction renderNoAccess() {\n  return (\n    <Layout.Page withPadding>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </Layout.Page>\n  );\n}\n\nconst GroupReplaysContainer = (props: Props) => {\n  const organization = useOrganization();\n\n  return (\n    <Feature\n      features={['session-replay-ui']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays {...props} />\n    </Feature>\n  );\n};\n\nexport default GroupReplaysContainer;\n"],"names":["handleRouteLeave","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","undefined","query","pathname","reduce","newQuery","browserHistory","location","useLocation","onRouteLeave","useCallback","useEffect","GroupReplays","group","theme","useTheme","hasRoomForColumns","useMedia","breakpoints","small","organization","useOrganization","eventView","fetchError","pageLinks","api","useApi","response","setResponse","useState","replayIds","setFetchError","cursor","fetchReplayIds","async","EventView","id","name","version","fields","projects","Number","project","data","_textStatus","resp","doDiscoverQuery","slug","getEventsAPIPayload","getResponseHeader","map","record","String","replayId","err","Sentry","useMemo","REPLAY_LIST_FIELDS","orderby","decodeScalar","sort","DEFAULT_SORT","useCleanQueryParamsOnRouteLeave","useReplaysFromIssue","GroupReplaysTable","StyledLayoutPage","withPadding","isFetching","replays","visibleColumns","ReplayColumns","useReplayList","Layout","p","gray200","background","renderNoAccess","type","t","GroupReplaysContainer","props","features","renderDisabled"],"sourceRoot":""}