{"version":3,"file":"chunks/app_views_settings_account_accountIdentities_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qXAMe,MAAMA,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,mpDCgBvB,MAAMO,EAAeC,EAEfC,EAAqC,CAChDC,SAAUH,EAEV,mBAAoBI,EACpBC,MAAK,EACLC,M,6ZACAC,UAAS,EACTC,iBAAkBC,EAClBC,OAAM,EACNC,kBAAmBC,EACnBC,OAAM,EACNC,OAAM,EACNC,YAAaC,EACbC,UAAS,EACTC,QAAO,EACPC,K,ySACAC,S,yaACAC,S,ymBACAC,M,irCACAC,MAAK,EACLC,aAAY,EACZpB,KAAIA,GAQAqB,GAAe,OAAO,MAAK,oBAAZ,CAAa,6BAEtBC,GAAKA,EAAEC,MAAI,aACZD,GAAKA,EAAEC,MAAI,kKAOID,QACJE,IAAjBF,EAAEG,YAA4B3B,EAAWwB,EAAEG,aAAgB7B,GAAY,MAG5EyB,EAAaK,aAAe,CAC1BD,WAAY,WACZF,KAAM,IAGR,U,4NC3CA,MAAMI,UAA0BtC,EAAAA,EAAwB,6DAgBxCuC,IAEV,QAACC,EAAiB,YAChB,QAACC,EAAiB,YAChB,QAAC,EAAY,CAACL,WAAYG,EAASG,SAASC,OAC5C,QAACC,EAAY,CAACC,cAAeN,EAASO,UAAU,WAC9C,QAACC,EAAY,UAAER,EAASG,SAASM,OAChCT,EAASO,YAAa,QAACG,EAAgB,CAACC,KAAMC,IAAOZ,EAASO,oBAGnE,QAACL,EAAiB,YAChB,QAACW,EAAU,WACRb,EAASc,WAAaC,EAAAA,GAAAA,kBACrB,QAAC,IAAG,CAACC,KAAK,UAAS,UAAEC,EAAAA,EAAAA,GAAE,YAExBjB,EAASc,WAAaC,EAAAA,GAAAA,eACrB,QAAC,IAAG,CAACC,KAAK,UAAS,SAChBhB,EAASkB,SAAUD,EAAAA,EAAAA,GAAE,YAAaA,EAAAA,EAAAA,GAAE,iBAGxCjB,EAASmB,eACR,QAAC,IAAG,CAACH,KAAK,YAAW,SAAEhB,EAASmB,aAAaC,UAIhDtD,KAAKuD,aAAarB,QAvBE,GAAEA,EAASc,YAAYd,EAASsB,SA2B5D,gCA8CmBtB,KAClBuB,EAAAA,EAAAA,IAAmBvB,GAAU,IAAMlC,KAAK0D,cAAa,KACtD,yBAEW,CAACC,EAAuBC,KAClC,SAASC,EAAaC,GACpB,MAAO,CACLb,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,cACAc,QAAQD,EAAEd,SACd,CAEA,OAAIW,EAAEtB,SAASM,OAASiB,EAAEvB,SAASM,KAC1BgB,EAAEtB,SAASM,KAAOiB,EAAEvB,SAASM,MAAQ,EAAI,EAE9CgB,EAAEX,WAAaY,EAAEZ,SACZa,EAAaF,GAAKE,EAAaD,IAEnCD,EAAEN,cAAcV,MAAQ,OAASiB,EAAEP,cAAcV,MAAQ,KACpDgB,EAAEN,cAAcV,MAAQ,KAAOiB,EAAEP,cAAcV,MAAQ,KAAO,EAAI,EAErE,CAAC,GACT,CAjHDqB,kBACE,MAAO,IACFC,MAAMD,kBACTE,WAAY,GAEhB,CAEAC,eACE,MAAO,CAAC,CAAC,aAjBI,8BAkBf,CAEAtE,WACE,OAAOsD,EAAAA,EAAAA,GAAE,aACX,CAiCAI,aAAarB,GACX,OAAOA,EAASkC,SAAWC,EAAAA,GAAAA,gBACzB,QAAC,IAAO,CACNC,UAAW,IAAMtE,KAAKuE,iBAAiBrC,GACvCsC,SAAS,SACTC,aAAatB,EAAAA,EAAAA,GAAE,cACfuB,SACE,QAAC,EAAAC,SAAQ,YACP,QAAC,KAAK,CAACzB,KAAK,QAAQ0B,UAAQ,YACzBC,EAAAA,EAAAA,IAAI,uCAAwC,CAC3CxC,SAAUH,EAASG,SAASM,UAGhC,QAAC,IAAS,UACPT,EAASkB,SACND,EAAAA,EAAAA,GACE,yFAEFA,EAAAA,EAAAA,GAAE,qCAGX,UAED,QAAC,KAAM,CAACtB,KAAK,KAAI,UAAEsB,EAAAA,EAAAA,GAAE,mBAGvB,QAAC,KAAM,CACLtB,KAAK,KACLiD,UAAQ,EACR/E,MACEmC,EAASkC,SAAWC,EAAAA,GAAAA,wBAChBlB,EAAAA,EAAAA,GACE,yGAEFjB,EAASkC,SAAWC,EAAAA,GAAAA,qBACpBlB,EAAAA,EAAAA,GAAE,uDACF,KACL,UAEAA,EAAAA,EAAAA,GAAE,eAGT,CA2BA4B,aACE,MAAMC,EAAgBhF,KAAKiF,MAAMf,YAC7BgB,QAAOhD,GAAYA,EAASc,WAAaC,EAAAA,GAAAA,eAC1CkC,KAAKnF,KAAKoF,WACPC,EAAgBrF,KAAKiF,MAAMf,YAC7BgB,QAAOhD,GAAYA,EAASc,WAAaC,EAAAA,GAAAA,eAC1CkC,KAAKnF,KAAKoF,WAEb,OACE,QAAC,EAAAT,SAAQ,YACP,QAAC,IAAkB,CAAC5E,MAAM,gBAE1B,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEoD,EAAAA,EAAAA,GAAE,6BAChB,QAAC,IAAS,UACN6B,GAAeM,OAOfN,EAAcO,IAAIvF,KAAKwF,aANvB,QAAC,IAAY,WACVrC,EAAAA,EAAAA,GACC,mFASV,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEA,EAAAA,EAAAA,GAAE,8BAChB,QAAC,IAAS,UACNkC,GAAeC,OAOfD,EAAcE,IAAIvF,KAAKwF,aANvB,QAAC,IAAY,WACVrC,EAAAA,EAAAA,GACC,qFAUhB,EAGF,MAAMhB,GAAoB,OAAOsD,EAAAA,GAAS,oBAAhB,CAAiB,4EAKrCrD,GAAoB,OAAO,MAAK,oBAAZ,CAAa,iFAMjCG,GAAe,OAAO,MAAK,oBAAZ,CAAa,mEAIbX,GAAMA,EAAEY,aAAe,SAAW,iBAAgB,iBACtDkD,EAAAA,EAAAA,GAAM,KAAI,KAErBhD,GAAe,OAAO,MAAK,oBAAZ,CAAa,4CAG5BE,GAAmB,OAAO+C,EAAAA,EAAQ,oBAAf,CAAgB,cAC1B/D,GAAKA,EAAEgE,MAAMC,uBAAqB,WACtCjE,GAAKA,EAAEgE,MAAME,SAAO,KAGzB/C,GAAa,OAAO,MAAK,oBAAZ,CAAa,wFAKd2C,EAAAA,EAAAA,GAAM,GAAE,KAG1B,G","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/identityIcon.tsx","webpack:///./app/views/settings/account/accountIdentities.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\nimport asana from 'sentry-logos/logo-asana.svg';\nimport auth0 from 'sentry-logos/logo-auth0.svg';\nimport vsts from 'sentry-logos/logo-azure.svg';\nimport bitbucket from 'sentry-logos/logo-bitbucket.svg';\nimport bitbucketserver from 'sentry-logos/logo-bitbucket-server.svg';\nimport placeholder from 'sentry-logos/logo-default.svg';\nimport github from 'sentry-logos/logo-github.svg';\nimport githubEnterprise from 'sentry-logos/logo-github-enterprise.svg';\nimport gitlab from 'sentry-logos/logo-gitlab.svg';\nimport google from 'sentry-logos/logo-google.svg';\nimport jiraserver from 'sentry-logos/logo-jira-server.svg';\nimport jumpcloud from 'sentry-logos/logo-jumpcloud.svg';\nimport msteams from 'sentry-logos/logo-msteams.svg';\nimport okta from 'sentry-logos/logo-okta.svg';\nimport onelogin from 'sentry-logos/logo-onelogin.svg';\nimport rippling from 'sentry-logos/logo-rippling.svg';\nimport saml2 from 'sentry-logos/logo-saml2.svg';\nimport slack from 'sentry-logos/logo-slack.svg';\nimport visualstudio from 'sentry-logos/logo-visualstudio.svg';\n\n// Map of plugin id -> logo filename\nexport const DEFAULT_ICON = placeholder;\n\nexport const ICON_PATHS: Record<string, string> = {\n  _default: DEFAULT_ICON,\n\n  'active-directory': vsts,\n  asana,\n  auth0,\n  bitbucket,\n  bitbucket_server: bitbucketserver,\n  github,\n  github_enterprise: githubEnterprise,\n  gitlab,\n  google,\n  jira_server: jiraserver,\n  jumpcloud,\n  msteams,\n  okta,\n  onelogin,\n  rippling,\n  saml2,\n  slack,\n  visualstudio,\n  vsts,\n};\n\ntype Props = {\n  providerId?: string;\n  size?: number;\n};\n\nconst IdentityIcon = styled('div')<Props>`\n  position: relative;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n  border-radius: 2px;\n  border: 0;\n  display: inline-block;\n  background-size: contain;\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-image: url(${p =>\n    (p.providerId !== undefined && ICON_PATHS[p.providerId]) || DEFAULT_ICON});\n`;\n\nIdentityIcon.defaultProps = {\n  providerId: '_default',\n  size: 36,\n};\n\nexport default IdentityIcon;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport {disconnectIdentity} from 'sentry/actionCreators/account';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DateTime from 'sentry/components/dateTime';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {UserIdentityCategory, UserIdentityConfig, UserIdentityStatus} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\nimport IdentityIcon from 'sentry/views/settings/components/identityIcon';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/user-identities/';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  identities: UserIdentityConfig[] | null;\n} & AsyncView['state'];\n\nclass AccountIdentities extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      identities: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['identities', ENDPOINT]];\n  }\n\n  getTitle() {\n    return t('Identities');\n  }\n\n  renderItem = (identity: UserIdentityConfig) => {\n    return (\n      <IdentityPanelItem key={`${identity.category}:${identity.id}`}>\n        <InternalContainer>\n          <IdentityIcon providerId={identity.provider.key} />\n          <IdentityText isSingleLine={!identity.dateAdded}>\n            <IdentityName>{identity.provider.name}</IdentityName>\n            {identity.dateAdded && <IdentityDateTime date={moment(identity.dateAdded)} />}\n          </IdentityText>\n        </InternalContainer>\n        <InternalContainer>\n          <TagWrapper>\n            {identity.category === UserIdentityCategory.SOCIAL_IDENTITY && (\n              <Tag type=\"default\">{t('Legacy')}</Tag>\n            )}\n            {identity.category !== UserIdentityCategory.ORG_IDENTITY && (\n              <Tag type=\"default\">\n                {identity.isLogin ? t('Sign In') : t('Integration')}\n              </Tag>\n            )}\n            {identity.organization && (\n              <Tag type=\"highlight\">{identity.organization.slug}</Tag>\n            )}\n          </TagWrapper>\n\n          {this.renderButton(identity)}\n        </InternalContainer>\n      </IdentityPanelItem>\n    );\n  };\n\n  renderButton(identity: UserIdentityConfig) {\n    return identity.status === UserIdentityStatus.CAN_DISCONNECT ? (\n      <Confirm\n        onConfirm={() => this.handleDisconnect(identity)}\n        priority=\"danger\"\n        confirmText={t('Disconnect')}\n        message={\n          <Fragment>\n            <Alert type=\"error\" showIcon>\n              {tct('Disconnect Your [provider] Identity?', {\n                provider: identity.provider.name,\n              })}\n            </Alert>\n            <TextBlock>\n              {identity.isLogin\n                ? t(\n                    'After disconnecting, you will need to use a password or another identity to sign in.'\n                  )\n                : t(\"This action can't be undone.\")}\n            </TextBlock>\n          </Fragment>\n        }\n      >\n        <Button size=\"sm\">{t('Disconnect')}</Button>\n      </Confirm>\n    ) : (\n      <Button\n        size=\"sm\"\n        disabled\n        title={\n          identity.status === UserIdentityStatus.NEEDED_FOR_GLOBAL_AUTH\n            ? t(\n                'You need this identity to sign into your account. If you want to disconnect it, set a password first.'\n              )\n            : identity.status === UserIdentityStatus.NEEDED_FOR_ORG_AUTH\n            ? t('You need this identity to access your organization.')\n            : null\n        }\n      >\n        {t('Disconnect')}\n      </Button>\n    );\n  }\n\n  handleDisconnect = (identity: UserIdentityConfig) => {\n    disconnectIdentity(identity, () => this.reloadData());\n  };\n\n  itemOrder = (a: UserIdentityConfig, b: UserIdentityConfig) => {\n    function categoryRank(c: UserIdentityConfig) {\n      return [\n        UserIdentityCategory.GLOBAL_IDENTITY,\n        UserIdentityCategory.SOCIAL_IDENTITY,\n        UserIdentityCategory.ORG_IDENTITY,\n      ].indexOf(c.category);\n    }\n\n    if (a.provider.name !== b.provider.name) {\n      return a.provider.name < b.provider.name ? -1 : 1;\n    }\n    if (a.category !== b.category) {\n      return categoryRank(a) - categoryRank(b);\n    }\n    if ((a.organization?.name ?? '') !== (b.organization?.name ?? '')) {\n      return (a.organization?.name ?? '') < (b.organization?.name ?? '') ? -1 : 1;\n    }\n    return 0;\n  };\n\n  renderBody() {\n    const appIdentities = this.state.identities\n      ?.filter(identity => identity.category !== UserIdentityCategory.ORG_IDENTITY)\n      .sort(this.itemOrder);\n    const orgIdentities = this.state.identities\n      ?.filter(identity => identity.category === UserIdentityCategory.ORG_IDENTITY)\n      .sort(this.itemOrder);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Identities\" />\n\n        <Panel>\n          <PanelHeader>{t('Application Identities')}</PanelHeader>\n          <PanelBody>\n            {!appIdentities?.length ? (\n              <EmptyMessage>\n                {t(\n                  'There are no application identities associated with your Sentry account'\n                )}\n              </EmptyMessage>\n            ) : (\n              appIdentities.map(this.renderItem)\n            )}\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Organization Identities')}</PanelHeader>\n          <PanelBody>\n            {!orgIdentities?.length ? (\n              <EmptyMessage>\n                {t(\n                  'There are no organization identities associated with your Sentry account'\n                )}\n              </EmptyMessage>\n            ) : (\n              orgIdentities.map(this.renderItem)\n            )}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nconst IdentityPanelItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst InternalContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst IdentityText = styled('div')<{isSingleLine?: boolean}>`\n  height: 36px;\n  display: flex;\n  flex-direction: column;\n  justify-content: ${p => (p.isSingleLine ? 'center' : 'space-between')};\n  margin-left: ${space(1.5)};\n`;\nconst IdentityName = styled('div')`\n  font-weight: bold;\n`;\nconst IdentityDateTime = styled(DateTime)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  color: ${p => p.theme.subText};\n`;\n\nconst TagWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  flex-grow: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default AccountIdentities;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","DEFAULT_ICON","placeholder","ICON_PATHS","_default","vsts","asana","auth0","bitbucket","bitbucket_server","bitbucketserver","github","github_enterprise","githubEnterprise","gitlab","google","jira_server","jiraserver","jumpcloud","msteams","okta","onelogin","rippling","saml2","slack","visualstudio","IdentityIcon","p","size","undefined","providerId","defaultProps","AccountIdentities","identity","IdentityPanelItem","InternalContainer","provider","key","IdentityText","isSingleLine","dateAdded","IdentityName","name","IdentityDateTime","date","moment","TagWrapper","category","UserIdentityCategory","type","t","isLogin","organization","slug","renderButton","id","disconnectIdentity","reloadData","a","b","categoryRank","c","indexOf","getDefaultState","super","identities","getEndpoints","status","UserIdentityStatus","onConfirm","handleDisconnect","priority","confirmText","message","Fragment","showIcon","tct","disabled","renderBody","appIdentities","state","filter","sort","itemOrder","orgIdentities","length","map","renderItem","PanelItem","space","DateTime","theme","fontSizeRelativeSmall","subText"],"sourceRoot":""}