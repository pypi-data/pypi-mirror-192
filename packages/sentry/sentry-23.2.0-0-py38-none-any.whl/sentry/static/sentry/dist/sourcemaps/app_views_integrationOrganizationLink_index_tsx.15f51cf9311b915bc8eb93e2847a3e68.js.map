{"version":3,"file":"chunks/app_views_integrationOrganizationLink_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/narrowLayout.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/integrationOrganizationLink/index.tsx","webpack:///./app/views/settings/organizationIntegrations/addIntegration.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport styled from '@emotion/styled';\n\nimport {logout} from 'sentry/actionCreators/account';\nimport {IconSentry} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = {\n  children: React.ReactNode;\n  maxWidth?: string;\n  showLogout?: boolean;\n};\n\nfunction NarrowLayout({maxWidth, showLogout, children}: Props) {\n  const api = useApi();\n\n  useEffect(() => {\n    document.body.classList.add('narrow');\n\n    return () => document.body.classList.remove('narrow');\n  }, []);\n\n  async function handleLogout() {\n    await logout(api);\n    window.location.assign('/auth/login');\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"pattern-bg\" />\n      <div className=\"container\" style={{maxWidth}}>\n        <div className=\"box box-modal\">\n          <div className=\"box-header\">\n            <a href=\"/\">\n              <IconSentry size=\"lg\" />\n            </a>\n            {showLogout && (\n              <a className=\"logout pull-right\" onClick={handleLogout}>\n                <Logout>{t('Sign out')}</Logout>\n              </a>\n            )}\n          </div>\n          <div className=\"box-content with-padding\">{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Logout = styled('span')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default NarrowLayout;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport IdBadge from 'sentry/components/idBadge';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NarrowLayout from 'sentry/components/narrowLayout';\nimport {t, tct} from 'sentry/locale';\nimport {Integration, IntegrationProvider, Organization} from 'sentry/types';\nimport {IntegrationAnalyticsKey} from 'sentry/utils/analytics/integrations';\nimport {\n  getIntegrationFeatureGate,\n  trackIntegrationAnalytics,\n} from 'sentry/utils/integrationUtil';\nimport {singleLineRenderer} from 'sentry/utils/marked';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport AsyncView from 'sentry/views/asyncView';\nimport AddIntegration from 'sentry/views/settings/organizationIntegrations/addIntegration';\n\n// installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  organization?: Organization;\n  provider?: IntegrationProvider;\n  selectedOrgSlug?: string;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  disableErrorReport = false;\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationAnalytics = (\n    eventName: IntegrationAnalyticsKey,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    // should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationAnalytics(\n      eventName,\n      {\n        integration_type: 'first_party',\n        integration: provider.key,\n        // We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n        organization,\n      },\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationAnalytics('integrations.integration_viewed', true);\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationAnalytics('integrations.installation_start');\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    // auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  // used with Github to redirect to the the integration detail\n  onInstallWithInstallationId = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    this.props.router.push(\n      normalizeUrl(`/settings/${orgId}/integrations/${data.provider.key}/${data.id}/`)\n    );\n  };\n\n  // non-Github redirects to the extension view where the backend will finish the installation\n  finishInstallation = () => {\n    // add the selected org to the query parameters and then redirect back to configure\n    const {selectedOrgSlug} = this.state;\n    const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n    this.trackInstallationStart();\n    window.location.assign(\n      `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n    );\n  };\n\n  renderAddButton() {\n    const {installationId} = this.props.params;\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationFeatures} = getIntegrationFeatureGate();\n\n    // Github uses a different installation flow with the installationId as a parameter\n    // We have to wrap our installation button with AddIntegration so we can get the\n    // addIntegrationWithInstallationId callback.\n    // if we don't hve an installationId, we need to use the finishInstallation callback.\n    return (\n      <IntegrationFeatures organization={organization} features={featuresComponents}>\n        {({disabled}) => (\n          <AddIntegration\n            provider={provider}\n            onInstall={this.onInstallWithInstallationId}\n            organization={organization}\n          >\n            {addIntegrationWithInstallationId => (\n              <ButtonWrapper>\n                <Button\n                  priority=\"primary\"\n                  disabled={!this.hasAccess() || disabled}\n                  onClick={() =>\n                    installationId\n                      ? addIntegrationWithInstallationId({\n                          installation_id: installationId,\n                        })\n                      : this.finishInstallation()\n                  }\n                >\n                  {t('Install %s', provider.name)}\n                </Button>\n              </ButtonWrapper>\n            )}\n          </AddIntegration>\n        )}\n      </IntegrationFeatures>\n    );\n  }\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" showIcon>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: (\n        <IdBadge\n          organization={org}\n          avatarSize={20}\n          displayName={org.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      ),\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <FieldGroup label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n          />\n        </FieldGroup>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import {Component} from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {NODE_ENV} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog?.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    // TODO: Would be better if we could mock document.location.origin to '' in\n    // the tests. jsdom's window.postMessage doesn't set an origin\n    if (message.origin !== document.location.origin && NODE_ENV === 'production') {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n"],"names":["NarrowLayout","maxWidth","showLogout","children","api","useApi","useEffect","document","body","classList","add","remove","className","style","href","size","onClick","async","logout","window","location","assign","Logout","t","p","theme","fontSizeLarge","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","IntegrationOrganizationLink","eventName","startSession","organization","provider","state","trackIntegrationAnalytics","integration_type","integration","key","already_installed","view","orgSlug","organizations","find","org","slug","value","setState","selectedOrgSlug","reloading","undefined","providers","Promise","all","requestPromise","integrationSlug","length","Error","trackOpened","_err","addErrorMessage","access","includes","data","orgId","props","router","push","normalizeUrl","id","query","queryParams","trackInstallationStart","urlEncode","getEndpoints","params","onLoadAllEndpointsSuccess","onSelectOrg","renderAddButton","installationId","features","metadata","featuresComponents","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","IntegrationFeatures","getIntegrationFeatureGate","disabled","onInstall","onInstallWithInstallationId","addIntegrationWithInstallationId","ButtonWrapper","priority","hasAccess","installation_id","finishInstallation","name","renderBottom","FeatureList","Fragment","type","showIcon","tct","InstallLink","renderBody","options","label","avatarSize","displayName","avatarProps","consistentWidth","integation","inline","stacked","required","onChange","placeholder","AddIntegration","Component","urlParams","account","analyticsParams","modalParams","url","width","height","setupDialog","left","top","computeCenteredWindow","installUrl","qs","opts","dialog","open","focus","message","origin","NODE_ENV","source","success","addSuccessMessage","error","componentDidMount","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","openDialog"],"sourceRoot":""}