{"version":3,"file":"chunks/app_views_settings_account_notifications_fields2_tsx-app_views_settings_account_notifications-253a7e.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/account/notifications/constants.tsx","webpack:///./app/views/settings/account/notifications/fields2.tsx","webpack:///./app/views/settings/account/notifications/parentLabel.tsx","webpack:///./app/views/settings/account/notifications/utils.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\n\nexport const ALL_PROVIDERS = {\n  email: 'default',\n  slack: 'never',\n  msteams: 'never',\n};\nexport const ALL_PROVIDER_NAMES = Object.keys(ALL_PROVIDERS);\n\n/**\n * These values are stolen from the DB.\n */\nexport const VALUE_MAPPING = {\n  default: 0,\n  never: 10,\n  always: 20,\n  subscribe_only: 30,\n  committed_only: 40,\n};\n\nexport const MIN_PROJECTS_FOR_CONFIRMATION = 3;\nexport const MIN_PROJECTS_FOR_SEARCH = 3;\nexport const MIN_PROJECTS_FOR_PAGINATION = 100;\n\nexport type NotificationSettingsByProviderObject = {[key: string]: string};\nexport type NotificationSettingsObject = {\n  [key: string]: {[key: string]: {[key: string]: NotificationSettingsByProviderObject}};\n};\n\nexport const NOTIFICATION_SETTINGS_TYPES = [\n  'alerts',\n  'workflow',\n  'deploy',\n  'approval',\n  'quota',\n  'reports',\n  'email',\n  'spikeProtection',\n] as const;\n\nexport const SELF_NOTIFICATION_SETTINGS_TYPES = [\n  'personalActivityNotifications',\n  'selfAssignOnResolve',\n];\n\n// 'alerts' | 'workflow' ...\nexport type NotificationSettingsType = (typeof NOTIFICATION_SETTINGS_TYPES)[number];\n\nexport const NOTIFICATION_SETTINGS_PATHNAMES: Record<NotificationSettingsType, string> = {\n  alerts: 'alerts',\n  workflow: 'workflow',\n  deploy: 'deploy',\n  approval: 'approval',\n  quota: 'quota',\n  reports: 'reports',\n  email: 'email',\n  spikeProtection: 'spike-protection',\n};\n\nexport const CONFIRMATION_MESSAGE = (\n  <div>\n    <p style={{marginBottom: '20px'}}>\n      <strong>Are you sure you want to disable these notifications?</strong>\n    </p>\n    <p>\n      {t(\n        'Turning this off will irreversibly overwrite all of your fine-tuning settings to \"off\".'\n      )}\n    </p>\n  </div>\n);\n\nexport const NOTIFICATION_FEATURE_MAP: Partial<Record<NotificationSettingsType, string>> =\n  {\n    quota: 'slack-overage-notifications',\n    spikeProtection: 'spike-projections',\n  };\n","import {Fragment} from 'react';\n\nimport {Field} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t, tct} from 'sentry/locale';\nimport {getDocsLinkForEventType} from 'sentry/views/settings/account/notifications/utils';\n\nexport const NOTIFICATION_SETTING_FIELDS: Record<string, Field> = {\n  alerts: {\n    name: 'alerts',\n    type: 'select',\n    label: t('Issue Alerts'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications sent from Alert rules that your team has set up.'),\n  },\n  workflow: {\n    name: 'workflow',\n    type: 'select',\n    label: t('Issue Workflow'),\n    choices: [\n      ['always', t('On')],\n      ['subscribe_only', t('Only Subscribed Issues')],\n      ['never', t('Off')],\n    ],\n    help: t('Changes in issue assignment, resolution status, and comments.'),\n  },\n  deploy: {\n    name: 'deploy',\n    type: 'select',\n    label: t('Deploys'),\n    choices: [\n      ['always', t('On')],\n      ['committed_only', t('Releases with My Commits')],\n      ['never', t('Off')],\n    ],\n    help: t('Release, environment, and commit overviews.'),\n  },\n  provider: {\n    name: 'provider',\n    type: 'select',\n    label: t('Delivery Method'),\n    choices: [\n      ['email', t('Email')],\n      ['slack', t('Slack')],\n      ['msteams', t('Microsoft Teams')],\n    ],\n    multiple: true,\n    onChange: val => {\n      // This is a little hack to prevent this field from being empty.\n      // TODO(nisanthan): need to prevent showing the clearable on. the multi-select when its only 1 value.\n      if (!val || val.length === 0) {\n        throw Error('Invalid selection. Field cannot be empty.');\n      }\n    },\n  },\n  approval: {\n    name: 'approval',\n    type: 'select',\n    label: t('Approvals'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications from teammates that require review or approval.'),\n  },\n  quota: {\n    name: 'quota',\n    type: 'select',\n    label: t('Quota'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Error, transaction, and attachment quota limits.'),\n  },\n  reports: {\n    name: 'weekly reports',\n    type: 'blank',\n    label: t('Weekly Reports'),\n    help: t('A summary of the past week for an organization.'),\n  },\n  email: {\n    name: 'email routing',\n    type: 'blank',\n    label: t('Email Routing'),\n    help: t('Change the email address that receives notifications.'),\n  },\n  spikeProtection: {\n    name: 'spikeProtection',\n    type: 'select',\n    label: t('Spike Protection'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications about spikes on a per project basis.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'select',\n    label: t('My Own Activity'),\n    choices: [\n      [true as any, t('On')],\n      [false as any, t('Off')],\n    ],\n    help: t('Notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'select',\n    label: t('Claim Unassigned Issues I’ve Resolved'),\n    choices: [\n      [true as any, t('On')],\n      [false as any, t('Off')],\n    ],\n    help: t('You’ll receive notifications about any changes that happen afterwards.'),\n  },\n};\n\n// partial field definition for quota sub-categories\nexport const QUOTA_FIELDS = [\n  {\n    name: 'quotaWarnings',\n    label: t('Set Quota Limit'),\n    help: t('Receive notifications when your organization exceeds the following limits.'),\n    choices: [\n      ['always', t('100% and 80%')],\n      ['never', t('100%')],\n    ] as const,\n  },\n  {\n    name: 'quotaErrors',\n    label: t('Errors'),\n    help: tct('Receive notifications about your error quotas. [learnMore:Learn more]', {\n      learnMore: <ExternalLink href={getDocsLinkForEventType('error')} />,\n    }),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaTransactions',\n    label: t('Transactions'),\n    help: tct(\n      'Receive notifications about your transaction quota. [learnMore:Learn more]',\n      {\n        learnMore: <ExternalLink href={getDocsLinkForEventType('transaction')} />,\n      }\n    ),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaReplays',\n    label: t('Replays'),\n    help: tct('Receive notifications about your replay quotas. [learnMore:Learn more]', {\n      learnMore: <ExternalLink href={getDocsLinkForEventType('replay')} />,\n    }),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaAttachments',\n    label: t('Attachments'),\n    help: tct(\n      'Receive notifications about your attachment quota. [learnMore:Learn more]',\n      {\n        learnMore: <ExternalLink href={getDocsLinkForEventType('attachment')} />,\n      }\n    ),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaSpendAllocations',\n    label: (\n      <Fragment>\n        {t('Spend Allocations')}{' '}\n        <QuestionTooltip position=\"top\" title=\"Business plan only\" size=\"xs\" />\n      </Fragment>\n    ),\n    help: t('Receive notifications about your spend allocations.'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n];\n","import styled from '@emotion/styled';\n\nimport Avatar from 'sentry/components/avatar';\nimport {space} from 'sentry/styles/space';\nimport {OrganizationSummary, Project} from 'sentry/types';\nimport {getParentKey} from 'sentry/views/settings/account/notifications/utils';\n\ntype Props = {\n  notificationType: string;\n  parent: OrganizationSummary | Project;\n};\n\n// TODO(mgaeta): Infer parentKey from parent.\nconst ParentLabel = ({notificationType, parent}: Props) => (\n  <FieldLabel>\n    <Avatar\n      {...{\n        [getParentKey(notificationType)]: parent,\n      }}\n    />\n    <span>{parent.slug}</span>\n  </FieldLabel>\n);\n\nconst FieldLabel = styled('div')`\n  display: flex;\n  gap: ${space(0.5)};\n  line-height: 16px;\n`;\n\nexport default ParentLabel;\n","import set from 'lodash/set';\n\nimport {FieldObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary, Project} from 'sentry/types';\nimport {\n  ALL_PROVIDERS,\n  MIN_PROJECTS_FOR_CONFIRMATION,\n  NOTIFICATION_SETTINGS_PATHNAMES,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n  VALUE_MAPPING,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'sentry/views/settings/account/notifications/fields2';\nimport ParentLabel from 'sentry/views/settings/account/notifications/parentLabel';\n\n/**\n * Which fine-tuning parts are grouped by project\n */\nconst notificationsByProject = ['alerts', 'email', 'workflow', 'spikeProtection'];\n\nexport const isGroupedByProject = (notificationType: string): boolean =>\n  notificationsByProject.includes(notificationType);\n\nexport const getParentKey = (notificationType: string): string => {\n  return isGroupedByProject(notificationType) ? 'project' : 'organization';\n};\n\nexport const groupByOrganization = (\n  projects: Project[]\n): Record<string, {organization: OrganizationSummary; projects: Project[]}> => {\n  return projects.reduce<\n    Record<string, {organization: OrganizationSummary; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n};\n\nexport const getFallBackValue = (notificationType: string): string => {\n  switch (notificationType) {\n    case 'alerts':\n      return 'always';\n    case 'deploy':\n      return 'committed_only';\n    case 'workflow':\n      return 'subscribe_only';\n    default:\n      return '';\n  }\n};\n\nexport const providerListToString = (providers: string[]): string => {\n  return providers.sort().join('+');\n};\n\nexport const getChoiceString = (choices: string[][], key: string): string => {\n  if (!choices) {\n    return 'default';\n  }\n  const found = choices.find(row => row[0] === key);\n  if (!found) {\n    throw new Error(`Could not find ${key}`);\n  }\n\n  return found[1];\n};\n\nconst isDataAllNever = (data: {[key: string]: string}): boolean =>\n  !!Object.keys(data).length && Object.values(data).every(value => value === 'never');\n\nconst getNonNeverValue = (data: {[key: string]: string}): string | null =>\n  Object.values(data).reduce(\n    (previousValue: string | null, currentValue) =>\n      currentValue === 'never' ? previousValue : currentValue,\n    null\n  );\n\n/**\n * Transform `data`, a mapping of providers to values, so that all providers in\n * `providerList` are \"on\" in the resulting object. The \"on\" value is\n * determined by checking `data` for non-\"never\" values and falling back to the\n * value `fallbackValue`. The \"off\" value is either \"default\" or \"never\"\n * depending on whether `scopeType` is \"parent\" or \"user\" respectively.\n */\nexport const backfillMissingProvidersWithFallback = (\n  data: {[key: string]: string},\n  providerList: string[],\n  fallbackValue: string,\n  scopeType: string\n): NotificationSettingsByProviderObject => {\n  // First pass: What was this scope's previous value?\n  let existingValue;\n  if (scopeType === 'user') {\n    existingValue = isDataAllNever(data)\n      ? fallbackValue\n      : getNonNeverValue(data) || fallbackValue;\n  } else {\n    existingValue = isDataAllNever(data) ? 'never' : getNonNeverValue(data) || 'default';\n  }\n\n  // Second pass: Fill in values for every provider.\n  return Object.fromEntries(\n    Object.keys(ALL_PROVIDERS).map(provider => [\n      provider,\n      providerList.includes(provider) ? existingValue : 'never',\n    ])\n  );\n};\n\n/**\n * Deeply merge N notification settings objects (usually just 2).\n */\nexport const mergeNotificationSettings = (\n  ...objects: NotificationSettingsObject[]\n): NotificationSettingsObject => {\n  const output: NotificationSettingsObject = {};\n\n  objects.forEach(settingsByType =>\n    Object.entries(settingsByType).forEach(([type, settingsByScopeType]) =>\n      Object.entries(settingsByScopeType).forEach(([scopeType, settingsByScopeId]) =>\n        Object.entries(settingsByScopeId).forEach(([scopeId, settingsByProvider]) => {\n          set(output, [type, scopeType, scopeId].join('.'), settingsByProvider);\n        })\n      )\n    )\n  );\n\n  return output;\n};\n\n/**\n * Get the mapping of providers to values that describe a user's parent-\n * independent notification preferences. The data from the API uses the user ID\n * rather than \"me\" so we assume the first ID is the user's.\n */\nexport const getUserDefaultValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): NotificationSettingsByProviderObject => {\n  return (\n    Object.values(notificationSettings[notificationType]?.user || {}).pop() ||\n    Object.fromEntries(\n      Object.entries(ALL_PROVIDERS).map(([provider, value]) => [\n        provider,\n        value === 'default' ? getFallBackValue(notificationType) : value,\n      ])\n    )\n  );\n};\n\n/**\n * Get the list of providers currently active on this page. Note: this can be empty.\n */\nexport const getCurrentProviders = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] => {\n  const userData = getUserDefaultValues(notificationType, notificationSettings);\n\n  return Object.entries(userData)\n    .filter(([_, value]) => !['never'].includes(value))\n    .map(([provider, _]) => provider);\n};\n\n/**\n * Calculate the currently selected provider.\n */\nexport const getCurrentDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const providersList = getCurrentProviders(notificationType, notificationSettings);\n  return providersList.length\n    ? getUserDefaultValues(notificationType, notificationSettings)[providersList[0]]\n    : 'never';\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\". If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const decideDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const compare = (a: string, b: string): number => VALUE_MAPPING[a] - VALUE_MAPPING[b];\n\n  const parentIndependentSetting =\n    Object.values(getUserDefaultValues(notificationType, notificationSettings))\n      .sort(compare)\n      .pop() || 'never';\n\n  if (parentIndependentSetting !== 'never') {\n    return parentIndependentSetting;\n  }\n\n  const parentSpecificSetting =\n    Object.values(\n      notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n    )\n      .flatMap(settingsByProvider => Object.values(settingsByProvider))\n      .sort(compare)\n      .pop() || 'default';\n\n  return parentSpecificSetting === 'default' ? 'never' : parentSpecificSetting;\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\"? If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const isEverythingDisabled = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  ['never', 'default'].includes(decideDefault(notificationType, notificationSettings));\n\n/**\n * Extract either the list of project or organization IDs from the notification\n * settings in state. This assumes that the notification settings object is\n * fully backfilled with settings for every parent.\n */\nexport const getParentIds = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] =>\n  Object.keys(\n    notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n  );\n\nexport const getParentValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parentId: string\n): NotificationSettingsByProviderObject =>\n  notificationSettings[notificationType]?.[getParentKey(notificationType)]?.[\n    parentId\n  ] || {\n    email: 'default',\n  };\n\n/**\n * Get a mapping of all parent IDs to the notification setting for the current\n * providers.\n */\nexport const getParentData = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parents: OrganizationSummary[] | Project[]\n): NotificationSettingsByProviderObject => {\n  const provider = getCurrentProviders(notificationType, notificationSettings)[0];\n\n  return Object.fromEntries(\n    parents.map(parent => [\n      parent.id,\n      getParentValues(notificationType, notificationSettings, parent.id)[provider],\n    ])\n  );\n};\n\n/**\n * Are there are more than N project or organization settings?\n */\nexport const isSufficientlyComplex = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  getParentIds(notificationType, notificationSettings).length >\n  MIN_PROJECTS_FOR_CONFIRMATION;\n\n/**\n * This is triggered when we change the Delivery Method select. Don't update the\n * provider for EVERY one of the user's projects and organizations, just the user\n * and parents that have explicit settings.\n */\nexport const getStateToPutForProvider = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject\n): NotificationSettingsObject => {\n  const providerList: string[] = changedData.provider\n    ? Object.values(changedData.provider)\n    : [];\n  const fallbackValue = getFallBackValue(notificationType);\n\n  // If the user has no settings, we need to create them.\n  if (!Object.keys(notificationSettings).length) {\n    return {\n      [notificationType]: {\n        user: {\n          me: Object.fromEntries(providerList.map(provider => [provider, fallbackValue])),\n        },\n      },\n    };\n  }\n\n  return {\n    [notificationType]: Object.fromEntries(\n      Object.entries(notificationSettings[notificationType]).map(\n        ([scopeType, scopeTypeData]) => [\n          scopeType,\n          Object.fromEntries(\n            Object.entries(scopeTypeData).map(([scopeId, scopeIdData]) => [\n              scopeId,\n              backfillMissingProvidersWithFallback(\n                scopeIdData,\n                providerList,\n                fallbackValue,\n                scopeType\n              ),\n            ])\n          ),\n        ]\n      )\n    ),\n  };\n};\n\n/**\n * Update the current providers' parent-independent notification settings with\n * the new value. If the new value is \"never\", then also update all\n * parent-specific notification settings to \"default\". If the previous value\n * was \"never\", then assume providerList should be \"email\" only.\n */\nexport const getStateToPutForDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentIds: string[]\n): NotificationSettingsObject => {\n  const newValue = Object.values(changedData)[0];\n  let providerList = getCurrentProviders(notificationType, notificationSettings);\n  if (!providerList.length) {\n    providerList = ['email'];\n  }\n\n  const updatedNotificationSettings = {\n    [notificationType]: {\n      user: {\n        me: Object.fromEntries(providerList.map(provider => [provider, newValue])),\n      },\n    },\n  };\n\n  if (newValue === 'never') {\n    updatedNotificationSettings[notificationType][getParentKey(notificationType)] =\n      Object.fromEntries(\n        parentIds.map(parentId => [\n          parentId,\n          Object.fromEntries(providerList.map(provider => [provider, 'default'])),\n        ])\n      );\n  }\n\n  return updatedNotificationSettings;\n};\n\n/**\n * Get the diff of the Notification Settings for this parent ID.\n */\nexport const getStateToPutForParent = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentId: string\n): NotificationSettingsObject => {\n  const providerList = getCurrentProviders(notificationType, notificationSettings);\n  const newValue = Object.values(changedData)[0];\n\n  return {\n    [notificationType]: {\n      [getParentKey(notificationType)]: {\n        [parentId]: Object.fromEntries(\n          providerList.map(provider => [provider, newValue])\n        ),\n      },\n    },\n  };\n};\n\n/**\n * Render each parent and add a default option to the the field choices.\n */\nexport const getParentField = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parent: OrganizationSummary | Project,\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject\n): FieldObject => {\n  const defaultFields = NOTIFICATION_SETTING_FIELDS[notificationType];\n\n  let choices = defaultFields.choices;\n  if (Array.isArray(choices)) {\n    choices = choices.concat([\n      [\n        'default',\n        `${t('Default')} (${getChoiceString(\n          choices,\n          getCurrentDefault(notificationType, notificationSettings)\n        )})`,\n      ],\n    ]);\n  }\n\n  return Object.assign({}, defaultFields, {\n    label: <ParentLabel parent={parent} notificationType={notificationType} />,\n    getData: data => onChange(data, parent.id),\n    name: parent.id,\n    choices,\n    defaultValue: 'default',\n    help: undefined,\n  }) as any;\n};\n\n/**\n * Returns a link to docs on explaining how to manage quotas for that event type\n */\nexport function getDocsLinkForEventType(\n  event: 'error' | 'transaction' | 'attachment' | 'replay'\n) {\n  switch (event) {\n    case 'transaction':\n      return 'https://docs.sentry.io/product/performance/transaction-summary/#what-is-a-transaction';\n    case 'attachment':\n      return 'https://docs.sentry.io/product/accounts/quotas/manage-attachments-quota/#2-rate-limiting';\n    case 'replay':\n      return 'https://docs.sentry.io/product/session-replay/';\n    default:\n      return 'https://docs.sentry.io/product/accounts/quotas/manage-event-stream-guide/#common-workflows-for-managing-your-event-stream';\n  }\n}\n\n/**\n * Returns the corresponding notification type name from the router path name\n */\nexport function getNotificationTypeFromPathname(routerPathname: string) {\n  const result = Object.entries(NOTIFICATION_SETTINGS_PATHNAMES).find(\n    ([_, pathname]) => pathname === routerPathname\n  ) ?? [routerPathname];\n  return result[0];\n}\n"],"names":["ALL_PROVIDERS","email","slack","msteams","ALL_PROVIDER_NAMES","Object","keys","VALUE_MAPPING","default","never","always","subscribe_only","committed_only","MIN_PROJECTS_FOR_CONFIRMATION","MIN_PROJECTS_FOR_SEARCH","MIN_PROJECTS_FOR_PAGINATION","NOTIFICATION_SETTINGS_TYPES","SELF_NOTIFICATION_SETTINGS_TYPES","NOTIFICATION_SETTINGS_PATHNAMES","alerts","workflow","deploy","approval","quota","reports","spikeProtection","CONFIRMATION_MESSAGE","style","marginBottom","t","NOTIFICATION_FEATURE_MAP","NOTIFICATION_SETTING_FIELDS","name","type","label","choices","help","provider","multiple","onChange","val","length","Error","personalActivityNotifications","selfAssignOnResolve","QUOTA_FIELDS","tct","learnMore","href","getDocsLinkForEventType","Fragment","position","title","size","ParentLabel","notificationType","parent","FieldLabel","getParentKey","slug","space","notificationsByProject","isGroupedByProject","includes","groupByOrganization","projects","reduce","acc","project","orgSlug","organization","hasOwnProperty","push","getFallBackValue","getChoiceString","key","found","find","row","isDataAllNever","data","values","every","value","getNonNeverValue","previousValue","currentValue","backfillMissingProvidersWithFallback","providerList","fallbackValue","scopeType","existingValue","fromEntries","map","mergeNotificationSettings","output","objects","forEach","settingsByType","entries","settingsByScopeType","settingsByScopeId","scopeId","settingsByProvider","set","join","getUserDefaultValues","notificationSettings","user","pop","getCurrentProviders","userData","filter","_","getCurrentDefault","providersList","decideDefault","compare","a","b","parentIndependentSetting","sort","parentSpecificSetting","flatMap","isEverythingDisabled","getParentIds","getParentValues","parentId","getParentData","parents","id","isSufficientlyComplex","getStateToPutForProvider","changedData","scopeTypeData","scopeIdData","me","getStateToPutForDefault","parentIds","newValue","updatedNotificationSettings","getStateToPutForParent","getParentField","defaultFields","Array","isArray","concat","assign","getData","defaultValue","undefined","event","getNotificationTypeFromPathname","routerPathname","pathname"],"sourceRoot":""}