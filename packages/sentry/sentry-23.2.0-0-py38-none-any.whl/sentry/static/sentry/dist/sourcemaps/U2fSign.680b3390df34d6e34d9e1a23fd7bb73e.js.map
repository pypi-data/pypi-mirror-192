{"version":3,"file":"chunks/U2fSign.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx"],"sourcesContent":["// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import {Component} from 'react';\nimport * as Sentry from '@sentry/react';\nimport * as cbor from 'cbor-web';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype TapParams = {\n  challenge: string;\n  response: string;\n  isSuperuserModal?: boolean;\n  superuserAccessCategory?: string;\n  superuserReason?: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  onTap: ({\n    response,\n    challenge,\n    isSuperuserModal,\n    superuserAccessCategory,\n    superuserReason,\n  }: TapParams) => Promise<void>;\n  organization: Organization;\n  silentIfUnsupported: boolean;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  challengeElement: HTMLInputElement | null;\n  deviceFailure: string | null;\n  failCount: number;\n  formElement: HTMLFormElement | null;\n  hasBeenTapped: boolean;\n  isSafari: boolean;\n  isSupported: boolean | null;\n  responseElement: HTMLInputElement | null;\n};\n\nclass U2fInterface extends Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n    isSafari: false,\n    failCount: 0,\n  };\n\n  componentDidMount() {\n    const supported = !!window.PublicKeyCredential;\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    const isSafari =\n      navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n\n    if (isSafari) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        deviceFailure: 'safari: requires interaction',\n        isSafari,\n        hasBeenTapped: false,\n      });\n    }\n\n    if (supported && !isSafari) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    if (this.props.flowMode === 'sign') {\n      const authenticatorData = {\n        keyHandle: data.id,\n        clientData: bufferToBase64url(data.response.clientDataJSON),\n        signatureData: bufferToBase64url(data.response.signature),\n        authenticatorData: bufferToBase64url(data.response.authenticatorData),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n    if (this.props.flowMode === 'enroll') {\n      const authenticatorData = {\n        id: data.id,\n        rawId: bufferToBase64url(data.rawId),\n        response: {\n          attestationObject: bufferToBase64url(data.response.attestationObject),\n          clientDataJSON: bufferToBase64url(data.response.clientDataJSON),\n        },\n        type: bufferToBase64url(data.type),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n\n    throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n          failCount: this.state.failCount + 1,\n        });\n      });\n  }\n\n  webAuthnSignIn(publicKeyCredentialRequestOptions) {\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  webAuthnRegister(publicKey) {\n    const promise = navigator.credentials.create({\n      publicKey,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    if (this.props.flowMode === 'sign') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnAuthenticationData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      challenge\n        .then(data => {\n          this.webAuthnSignIn(data);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else if (this.props.flowMode === 'enroll') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnRegisterData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      // challenge contains a PublicKeyCredentialRequestOptions object for webauthn registration\n      challenge\n        .then(data => {\n          this.webAuthnRegister(data.publicKey);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderSafariWebAuthn = () => {\n    return (\n      <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n        {this.props.flowMode === 'enroll'\n          ? t('Enroll with WebAuthn')\n          : t('Sign in with WebAuthn')}\n      </a>\n    );\n  };\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    if (this.state.isSafari && this.state.failCount === 0) {\n      return this.renderSafariWebAuthn();\n    }\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                `[p1:The Sentry server administrator modified the device\n                 registrations.] [p2:You need to remove and re-add the device to continue using\n                 your U2F device. Use a different sign-in method or contact [support] for\n                 assistance.]`,\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure\n            ? this.state.failCount === 0 && this.state.isSafari\n              ? ' loading-dots'\n              : ' device-failure'\n            : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default withOrganization(U2fInterface);\n","import {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = React.ComponentProps<typeof U2fInterface>;\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode?: 'signin' | 'enroll' | 'sudo';\n};\n\nfunction U2fSign({displayMode = 'signin', ...props}: Props) {\n  const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n\n  return (\n    <U2fInterface\n      {...props}\n      silentIfUnsupported={displayMode === 'sudo'}\n      flowMode={flowMode}\n    >\n      <p>{MESSAGES[displayMode] ?? null}</p>\n    </U2fInterface>\n  );\n}\n\nexport default U2fSign;\n"],"names":["base64urlToBuffer","baseurl64String","padding","slice","length","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","Component","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","isSafari","failCount","this","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","onClick","onTryAgain","className","flowMode","t","state","supportMail","ConfigStore","support","href","renderSafariWebAuthn","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","componentDidMount","supported","window","PublicKeyCredential","navigator","userAgent","includes","getU2FResponse","data","response","authenticatorData","keyHandle","id","clientData","clientDataJSON","signatureData","signature","rawId","attestationObject","type","Error","submitU2fResponse","promise","then","u2fResponse","challenge","onTap","catch","submit","err","failure","metaData","Sentry","webAuthnSignIn","publicKeyCredentialRequestOptions","credentials","get","publicKey","webAuthnRegister","create","challengeArray","webAuthnAuthenticationData","cbor","decodeFirst","webAuthnRegisterData","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","children","renderPrompt","name","bindChallengeElement","bindResponseElement","render","withOrganization","MESSAGES","signin","sudo","enroll","U2fSign","displayMode"],"sourceRoot":""}