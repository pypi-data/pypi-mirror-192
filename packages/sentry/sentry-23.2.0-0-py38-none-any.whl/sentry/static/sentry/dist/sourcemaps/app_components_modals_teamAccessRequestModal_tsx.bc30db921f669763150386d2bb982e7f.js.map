{"version":3,"file":"chunks/app_components_modals_teamAccessRequestModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"gqBA0BA,MAAMA,UAAgCC,EAAAA,UAAwB,uDAC7C,CACbC,YAAY,KACb,2BAEaC,UACZ,MAAM,IAACC,EAAG,SAAEC,EAAQ,MAAEC,EAAK,OAAEC,EAAM,WAAEC,GAAcC,KAAKC,MAExDD,KAAKE,SAAS,CAACT,YAAY,IAE3B,UACQE,EAAIQ,eACP,kBAAiBN,aAAiBD,WAAkBE,KACrD,CACEM,OAAQ,UAGZC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,GAAE,kCAGtB,CAFE,MAAOC,IACPC,EAAAA,EAAAA,KAAgBF,EAAAA,EAAAA,GAAE,+BACpB,CACAN,KAAKE,SAAS,CAACT,YAAY,IAC3BM,GAAY,GACb,CAEDU,SACE,MAAM,KAACC,EAAI,OAAEC,EAAM,WAAEZ,EAAU,OAAED,GAAUE,KAAKC,MAEhD,OACE,QAAC,EAAAW,SAAQ,YACP,QAACF,EAAI,WACFG,EAAAA,EAAAA,IACC,sIACA,CAACC,KAAMhB,OAGX,QAACa,EAAM,WACL,QAACI,EAAW,YACV,QAAC,KAAM,CAACC,QAASjB,EAAW,UAAEO,EAAAA,EAAAA,GAAE,aAChC,QAAC,KAAM,CACLW,SAAS,UACTD,QAAShB,KAAKkB,YACdC,KAAMnB,KAAKoB,MAAM3B,WACjB4B,WAAS,YAERf,EAAAA,EAAAA,GAAE,qBAMf,EAnDIf,EAAuB,sCAsD7B,MAAMwB,GAAc,OAAO,MAAK,oBAAZ,CAAa,mEAGxBO,EAAAA,EAAAA,GAAM,GAAE,KAGjB,GAAeC,EAAAA,EAAAA,GAAQhC,E,qHCpCvB,QAvBA,WAAmE,IAAnD,gBAACiC,EAAiB7B,IAAK8B,GAAwB,UAAH,6CAAG,CAAC,EAC9D,MAAMC,GAAWC,EAAAA,EAAAA,eAGQC,IAArBF,EAASG,cAAyCD,IAAhBH,IACpCC,EAASG,QAAU,IAAIC,EAAAA,IAIzB,MAAMnC,EAAM8B,GAAeC,EAASG,QAG9BE,GAAiBC,EAAAA,EAAAA,cAAY,KAC5BR,GACH7B,EAAIsC,OACN,GACC,CAACtC,EAAK6B,IAIT,OAFAU,EAAAA,EAAAA,YAAU,IAAMH,GAAgB,CAACA,IAE1BpC,CACT,C,+NC7BA,MAeA,EAfgB,SACdwC,GAEG,IADHC,EAAwC,UAAH,6CAAG,CAAC,EAEzC,MAAMC,EAAqC,IAA+B,IAA7B1C,IAAK2C,KAAarC,GAAM,EACnE,MAAMN,GAAM4C,EAAAA,EAAAA,GAAO,CAAC5C,IAAK2C,KAAaF,IAEtC,OAAO,QAACD,EAAgB,IAAMlC,EAAaN,IAAKA,GAAO,EAKzD,OAFA0C,EAAQG,YAAe,YAAUC,EAAAA,EAAAA,GAAeN,MAEzCE,CACT,C","sources":["webpack:///./app/components/modals/teamAccessRequestModal.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  ModalRenderProps,\n  TeamAccessRequestModalOptions,\n} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = ModalRenderProps &\n  TeamAccessRequestModalOptions & {\n    api: Client;\n    memberId: string;\n    orgId: string;\n    teamId: string;\n  };\n\ntype State = {\n  createBusy: boolean;\n};\n\nclass CreateTeamAccessRequest extends Component<Props, State> {\n  state: State = {\n    createBusy: false,\n  };\n\n  handleClick = async () => {\n    const {api, memberId, orgId, teamId, closeModal} = this.props;\n\n    this.setState({createBusy: true});\n\n    try {\n      await api.requestPromise(\n        `/organizations/${orgId}/members/${memberId}/teams/${teamId}/`,\n        {\n          method: 'POST',\n        }\n      );\n      addSuccessMessage(t('Team request sent for approval'));\n    } catch (err) {\n      addErrorMessage(t('Unable to send team request'));\n    }\n    this.setState({createBusy: false});\n    closeModal();\n  };\n\n  render() {\n    const {Body, Footer, closeModal, teamId} = this.props;\n\n    return (\n      <Fragment>\n        <Body>\n          {tct(\n            'You do not have permission to add members to the #[team] team, but we will send a request to your organization admins for approval.',\n            {team: teamId}\n          )}\n        </Body>\n        <Footer>\n          <ButtonGroup>\n            <Button onClick={closeModal}>{t('Cancel')}</Button>\n            <Button\n              priority=\"primary\"\n              onClick={this.handleClick}\n              busy={this.state.createBusy}\n              autoFocus\n            >\n              {t('Continue')}\n            </Button>\n          </ButtonGroup>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst ButtonGroup = styled('div')`\n  display: grid;\n  grid-template-columns: max-content max-content;\n  gap: ${space(1)};\n`;\n\nexport default withApi(CreateTeamAccessRequest);\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'sentry/api';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useApi from 'sentry/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["CreateTeamAccessRequest","Component","createBusy","async","api","memberId","orgId","teamId","closeModal","this","props","setState","requestPromise","method","addSuccessMessage","t","err","addErrorMessage","render","Body","Footer","Fragment","tct","team","ButtonGroup","onClick","priority","handleClick","busy","state","autoFocus","space","withApi","persistInFlight","providedApi","localApi","useRef","undefined","current","Client","clearOnUnmount","useCallback","clear","useEffect","WrappedComponent","options","WithApi","propsApi","useApi","displayName","getDisplayName"],"sourceRoot":""}