{"version":3,"file":"chunks/app_views_settings_organizationGeneralSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ySAMO,MAAMA,EAAQ,oBAkGrB,EAhGqC,CACnC,CAEEC,OAAOC,EAAAA,EAAAA,GAAE,WACTC,OAAQ,CACN,CACEC,KAAM,OACNC,KAAM,SACNC,UAAU,EACVC,OAAOL,EAAAA,EAAAA,GAAE,qBACTM,MAAMN,EAAAA,EAAAA,GAAE,kDACRO,eAAgBC,EAAAA,EAChBC,YAAY,EACZC,qBAAsB,OACtBC,aAAaX,EAAAA,EAAAA,GACX,qEAGJ,CACEE,KAAM,OACNC,KAAM,SACNC,UAAU,EACVC,OAAOL,EAAAA,EAAAA,GAAE,gBACTM,MAAMN,EAAAA,EAAAA,GAAE,+CAEV,CACEE,KAAM,iBACNC,KAAM,UACNE,OAAOL,EAAAA,EAAAA,GAAE,iBACTM,MAAMN,EAAAA,EAAAA,GAAE,mEAKd,CACED,MAAO,aACPE,OAAQ,CACN,CACEC,KAAM,cACNC,KAAM,SACNC,UAAU,EACVC,OAAOL,EAAAA,EAAAA,GAAE,gBAETY,QAAS,eAAC,YAACC,GAAe,UAAH,6CAAG,CAAC,EAAC,OAC1BA,GAAaC,aAAaC,KAAKC,GAAkB,CAACA,EAAEC,GAAID,EAAEd,SAAU,EAAE,EACxEI,MAAMN,EAAAA,EAAAA,GAAE,6CACRkB,SAAU,QAAC,OAACC,GAAO,SAAMA,EAAOC,IAAI,YAAY,GAElD,CACElB,KAAM,iBACNC,KAAM,UACNC,UAAU,EACVC,OAAOL,EAAAA,EAAAA,GAAE,mBACTM,MAAMN,EAAAA,EAAAA,GAAE,gEAEV,CACEE,KAAM,oBACNC,KAAM,UACNE,OAAOL,EAAAA,EAAAA,GAAE,6BACTM,MAAMN,EAAAA,EAAAA,GACJ,qHAGJ,CACEE,KAAM,oBACNC,KAAM,UACNE,OAAOL,EAAAA,EAAAA,GAAE,sCACTM,MAAMN,EAAAA,EAAAA,GACJ,qGAGJ,CACEE,KAAM,kBACNC,KAAM,SACNS,QAAS,QAAC,YAACC,EAAc,CAAC,GAAE,SAC1BA,GAAaC,aAAaC,KAAKC,GAAkB,CAACA,EAAEC,GAAID,EAAEd,SAAU,EAAE,EACxEG,OAAOL,EAAAA,EAAAA,GAAE,sBACTM,MAAMN,EAAAA,EAAAA,GACJ,2FAEFqB,QAAS,QAAC,SAACC,GAAS,SAAKA,EAASF,IAAI,oBAAoB,GAE5D,CACElB,KAAM,iBACNC,KAAM,SACNS,QAAS,QAAC,YAACC,EAAc,CAAC,GAAE,SAC1BA,GAAaC,aAAaC,KAAKC,GAAkB,CAACA,EAAEC,GAAID,EAAEd,SAAU,EAAE,EACxEG,OAAOL,EAAAA,EAAAA,GAAE,sBACTM,MAAMN,EAAAA,EAAAA,GACJ,4F,sCC1FK,SAASQ,EAAQe,GAC9B,OAAOA,EACJC,UAAU,QACVC,cACAC,QAAQ,IAAK,KACbA,QAAQ,eAAgB,GAC7B,C,0SCAA,SAASC,EAAgB,GAOf,IAPe,OACvBR,EAAS,CAAC,aAAY,QACtBS,GAAU5B,EAAAA,EAAAA,GACR,2FACD,aACD6B,KACGC,GACG,EACN,OACE,QAAC,IAAM,CAACX,OAAQA,EAAQU,aAAcA,EAAa,SAChD,QAAC,UAACE,GAAU,SACVA,IACC,QAAC,KAAK,CAAC,eAAa,uBAAuB5B,KAAK,UAAU6B,UAAQ,KAAKF,EAAK,SACzEF,GAEJ,GAIT,CAnBSD,EAAe,8BAqBxB,S,81CCPA,MAAMM,UAAiCC,EAAAA,EACrCC,eACE,MAAM,aAACN,GAAgBO,KAAKN,MAC5B,MAAO,CAAC,CAAC,eAAiB,kBAAiBD,EAAaQ,uBAC1D,CAEAC,SACE,MAAM,YAACzB,EAAW,aAAEgB,EAAY,OAAEU,EAAM,OAAEpB,GAAUiB,KAAKN,OACnD,aAACU,GAAgBJ,KAAKK,MACtBC,EAAY,kBAAiBb,EAAaQ,QAE1CM,EAAmB,CACvBC,qBAAsB,CAACC,gBAAiBL,GACxClB,SAAU,IAAIwB,IAAIjB,EAAaP,UAC/BH,SACA4B,SAAUX,KAAKN,MAAMiB,SACrB7B,UAAWC,EAAOC,IAAI,cAGlB4B,EAAQC,IAAUC,EAAAA,SAaxB,OAZIrB,EAAaP,SAAS6B,SAAS,oCACjCH,EAAM,GAAG/C,OAAS,IACb+C,EAAM,GAAG/C,OACZ,CACEC,KAAM,gBACNC,KAAM,UACNE,OAAOL,EAAAA,EAAAA,GAAE,sDACTM,MAAMN,EAAAA,EAAAA,GAAE,8CAMZ,QAAC,IAAI,CACH,eAAa,wBACboD,UAAU,MACVC,YAAaX,EACbjC,YAAU,EACV6C,WAAS,EACTzC,YAAaA,EACb0C,gBAAiB,CAACC,EAASC,KAEH,mBAAXlB,GACTA,EAAO1B,EAAa2C,EACtB,EAEFE,cAAe,KAAMC,EAAAA,EAAAA,IAAgB,yBAAyB,WAE9D,QAAC,IAAQ,IAAKhB,EAAkBK,MAAOA,KACvC,QAAC,IAAa,CACZ7C,KAAK,eACLyD,eAAe,EACflB,SAAW,GAAEA,WACbmB,MAAOhD,EACP0B,OAAQuB,EAAAA,GACR5C,UAAWC,EAAOC,IAAI,iBAI9B,EA3DIa,EAAwB,uCA8D9B,SAAe8B,EAAAA,EAAAA,GAAiB9B,GCxDhC,SAAS+B,EAA4BlC,GACnC,MAAMmC,GAAMC,EAAAA,EAAAA,MAEN,aAACrC,EAAY,SAAEsC,GAAYrC,EAC3BX,EAAS,IAAI2B,IAAIjB,EAAaV,QAE9BiD,GACJ,QAAC,EAAAC,SAAQ,YACP,QAAC,IAAS,WACPC,EAAAA,EAAAA,IACC,0GACA,CACEpE,KAAM2B,IAAgB,2BAASA,EAAa3B,aAK/CiE,EAASI,SACV,QAAC,EAAAF,SAAQ,YACP,QAAC,IAAS,WACPrE,EAAAA,EAAAA,GAAE,+DAEL,QAAC,IAAI,CAACwE,OAAO,SAAS,eAAa,wBAAuB,SACvDL,EAASpD,KAAI0D,IACZ,QAAC,IAAQ,UAAqBA,EAAQpC,MAAvBoC,EAAQpC,gBA+CnC,OACE,QAAC,EAAAgC,SAAQ,YACP,QAAC,IAAmB,CAACtE,OAAOC,EAAAA,EAAAA,GAAE,oBAAqB0E,QAAS7C,EAAaQ,QACzE,0BACE,QAAC,IAAkB,CAACtC,OAAOC,EAAAA,EAAAA,GAAE,4BAC7B,QAAC,IAAe,KAEhB,QAAC,EAAwB,IACnB8B,EACJjB,YAAagB,EACbV,OAAQA,EACRoB,OAhDM,CAACoC,EAAwBnB,KACrC,GAAIA,EAAQnB,MAAQmB,EAAQnB,OAASsC,EAAStC,KAG5C,IAFAuC,EAAAA,EAAAA,IAAuBD,EAAUnB,GAE7BA,EAAQlC,SAAS6B,SAAS,oBAAqB,CACjD,MAAM,gBAAC0B,GAAmBrB,EAAQsB,MAClCC,OAAOhC,SAASrB,QAAS,GAAEmD,2BAC7B,MACEG,EAAAA,eAAAA,QAAwB,aAAYxB,EAAQnB,cAG1CsC,EAASM,gBAAkBzB,EAAQyB,gBACrCC,EAAAA,EAAAA,GAA4B,+CAAgD,CAC1ErD,aAAc2B,EACd2B,WAAY3B,EAAQyB,iBAMxBnB,EAAAA,EAAAA,IAAmBN,EACrB,IA8BKrC,EAAOC,IAAI,eAAiBS,EAAauD,YACxC,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEpF,EAAAA,EAAAA,GAAE,0BAChB,QAAC,IAAU,CACTK,OAAOL,EAAAA,EAAAA,GAAE,uBACTM,MAAMN,EAAAA,EAAAA,GACJ,mGACA,UAEF,yBACE,QAAC,IAAO,CACNqF,SAAS,SACTC,aAAatF,EAAAA,EAAAA,GAAE,uBACf4B,QAASwC,EACTmB,UAzCe,KACxB1D,KAIL2D,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,IAAyCxB,EAAK,CAC5CyB,MAAO7D,EAAaQ,KACpBsD,eAAiB,GAAE9D,EAAa3B,+BAChC0F,aAAe,sBAAqB/D,EAAa3B,sBACjD,EA+B8C,UAElC,QAAC,KAAM,CAACmF,SAAS,SAAQ,UAAErF,EAAAA,EAAAA,GAAE,uCAS/C,CA9GSgE,EAA2B,0CAgHpC,SAAe6B,EAAAA,EAAAA,IAAa9B,EAAAA,EAAAA,GAAiBC,G","sources":["webpack:///./app/data/forms/organizationGeneralSettings.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationGeneralSettings/organizationSettingsForm.tsx","webpack:///./app/views/settings/organizationGeneralSettings/index.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {MemberRole} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('General'),\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Organization Slug'),\n        help: t('A unique ID used to identify this organization'),\n        transformInput: slugify,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You will be redirected to the new organization slug after saving'\n        ),\n      },\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: t('Display Name'),\n        help: t('A human-friendly name for the organization'),\n      },\n      {\n        name: 'isEarlyAdopter',\n        type: 'boolean',\n        label: t('Early Adopter'),\n        help: t(\"Opt-in to new features before they're released to the public\"),\n      },\n    ],\n  },\n\n  {\n    title: 'Membership',\n    fields: [\n      {\n        name: 'defaultRole',\n        type: 'select',\n        required: true,\n        label: t('Default Role'),\n        // seems weird to have choices in initial form data\n        choices: ({initialData} = {}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        help: t('The default role new members will receive'),\n        disabled: ({access}) => !access.has('org:admin'),\n      },\n      {\n        name: 'openMembership',\n        type: 'boolean',\n        required: true,\n        label: t('Open Membership'),\n        help: t('Allow organization members to freely join or leave any team'),\n      },\n      {\n        name: 'eventsMemberAdmin',\n        type: 'boolean',\n        label: t('Let Members Delete Events'),\n        help: t(\n          'Allow members to delete events (including the delete & discard action) by granting them the `event:admin` scope.'\n        ),\n      },\n      {\n        name: 'alertsMemberWrite',\n        type: 'boolean',\n        label: t('Let Members Create and Edit Alerts'),\n        help: t(\n          'Allow members to create, edit, and delete alert rules by granting them the `alerts:write` scope.'\n        ),\n      },\n      {\n        name: 'attachmentsRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Attachments Access'),\n        help: t(\n          'Role required to download event attachments, such as native crash reports or log files.'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n      },\n      {\n        name: 'debugFilesRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Debug Files Access'),\n        help: t(\n          'Role required to download debug information files, proguard mappings and source maps.'\n        ),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {ReactNode} from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Organization, Scope} from 'sentry/types';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> & {\n  access?: Scope[];\n  message?: ReactNode;\n  organization?: Organization;\n};\n\nfunction PermissionAlert({\n  access = ['org:write'],\n  message = t(\n    'These settings can only be edited by users with the organization owner or manager role.'\n  ),\n  organization,\n  ...props\n}: Props) {\n  return (\n    <Access access={access} organization={organization}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"org-permission-alert\" type=\"warning\" showIcon {...props}>\n            {message}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {updateOrganization} from 'sentry/actionCreators/organizations';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport AvatarChooser from 'sentry/components/avatarChooser';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport organizationSettingsFields from 'sentry/data/forms/organizationGeneralSettings';\nimport {t} from 'sentry/locale';\nimport {Organization, Scope} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  access: Set<Scope>;\n  initialData: Organization;\n  location: Location;\n  onSave: (previous: Organization, updated: Organization) => void;\n  organization: Organization;\n} & RouteComponentProps<{}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  authProvider: object;\n};\n\nclass OrganizationSettingsForm extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    return [['authProvider', `/organizations/${organization.slug}/auth-provider/`]];\n  }\n\n  render() {\n    const {initialData, organization, onSave, access} = this.props;\n    const {authProvider} = this.state;\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      additionalFieldProps: {hasSsoEnabled: !!authProvider},\n      features: new Set(organization.features),\n      access,\n      location: this.props.location,\n      disabled: !access.has('org:write'),\n    };\n\n    const forms = cloneDeep(organizationSettingsFields);\n    if (organization.features.includes('codecov-stacktrace-integration')) {\n      forms[0].fields = [\n        ...forms[0].fields,\n        {\n          name: 'codecovAccess',\n          type: 'boolean',\n          label: t('Enable Code Coverage Insights - powered by Codecov'),\n          help: t('Opt-in to connect your codecov account'),\n        },\n      ];\n    }\n\n    return (\n      <Form\n        data-test-id=\"organization-settings\"\n        apiMethod=\"PUT\"\n        apiEndpoint={endpoint}\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        onSubmitSuccess={(updated, _model) => {\n          // Special case for slug, need to forward to new slug\n          if (typeof onSave === 'function') {\n            onSave(initialData, updated);\n          }\n        }}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm {...jsonFormSettings} forms={forms} />\n        <AvatarChooser\n          type=\"organization\"\n          allowGravatar={false}\n          endpoint={`${endpoint}avatar/`}\n          model={initialData}\n          onSave={updateOrganization}\n          disabled={!access.has('org:write')}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsForm);\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addLoadingMessage} from 'sentry/actionCreators/indicator';\nimport {\n  changeOrganizationSlug,\n  removeAndRedirectToRemainingOrganization,\n  updateOrganization,\n} from 'sentry/actionCreators/organizations';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport OrganizationSettingsForm from './organizationSettingsForm';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n} & RouteComponentProps<{}, {}>;\n\nfunction OrganizationGeneralSettings(props: Props) {\n  const api = useApi();\n\n  const {organization, projects} = props;\n  const access = new Set(organization.access);\n\n  const removeConfirmMessage = (\n    <Fragment>\n      <TextBlock>\n        {tct(\n          'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',\n          {\n            name: organization && <strong>{organization.name}</strong>,\n          }\n        )}\n      </TextBlock>\n\n      {!!projects.length && (\n        <Fragment>\n          <TextBlock>\n            {t('This will also remove the following associated projects:')}\n          </TextBlock>\n          <List symbol=\"bullet\" data-test-id=\"removed-projects-list\">\n            {projects.map(project => (\n              <ListItem key={project.slug}>{project.slug}</ListItem>\n            ))}\n          </List>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n\n  const handleSaveForm: React.ComponentProps<\n    typeof OrganizationSettingsForm\n  >['onSave'] = (prevData: Organization, updated: Organization) => {\n    if (updated.slug && updated.slug !== prevData.slug) {\n      changeOrganizationSlug(prevData, updated);\n\n      if (updated.features.includes('customer-domains')) {\n        const {organizationUrl} = updated.links;\n        window.location.replace(`${organizationUrl}/settings/organization/`);\n      } else {\n        browserHistory.replace(`/settings/${updated.slug}/`);\n      }\n    } else {\n      if (prevData.codecovAccess !== updated.codecovAccess) {\n        trackAdvancedAnalyticsEvent('organization_settings.codecov_access_updated', {\n          organization: updated,\n          has_access: updated.codecovAccess,\n        });\n      }\n\n      // This will update OrganizationStore (as well as OrganizationsStore\n      // which is slightly incorrect because it has summaries vs a detailed org)\n      updateOrganization(updated);\n    }\n  };\n\n  const handleConfirmRemoveOrg = () => {\n    if (!organization) {\n      return;\n    }\n\n    addLoadingMessage();\n    removeAndRedirectToRemainingOrganization(api, {\n      orgId: organization.slug,\n      successMessage: `${organization.name} is queued for deletion.`,\n      errorMessage: `Error removing the ${organization.name} organization`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('General Settings')} orgSlug={organization.slug} />\n      <div>\n        <SettingsPageHeader title={t('Organization Settings')} />\n        <PermissionAlert />\n\n        <OrganizationSettingsForm\n          {...props}\n          initialData={organization}\n          access={access}\n          onSave={handleSaveForm}\n        />\n\n        {access.has('org:admin') && !organization.isDefault && (\n          <Panel>\n            <PanelHeader>{t('Remove Organization')}</PanelHeader>\n            <FieldGroup\n              label={t('Remove Organization')}\n              help={t(\n                'Removing this organization will delete all data including projects and their associated events.'\n              )}\n            >\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  confirmText={t('Remove Organization')}\n                  message={removeConfirmMessage}\n                  onConfirm={handleConfirmRemoveOrg}\n                >\n                  <Button priority=\"danger\">{t('Remove Organization')}</Button>\n                </Confirm>\n              </div>\n            </FieldGroup>\n          </Panel>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default withProjects(withOrganization(OrganizationGeneralSettings));\n"],"names":["route","title","t","fields","name","type","required","label","help","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","choices","initialData","orgRoleList","map","r","id","disabled","access","has","visible","features","str","normalize","toLowerCase","replace","PermissionAlert","message","organization","props","hasAccess","showIcon","OrganizationSettingsForm","AsyncComponent","getEndpoints","this","slug","render","onSave","authProvider","state","endpoint","jsonFormSettings","additionalFieldProps","hasSsoEnabled","Set","location","forms","cloneDeep","organizationSettingsFields","includes","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","updated","_model","onSubmitError","addErrorMessage","allowGravatar","model","updateOrganization","withOrganization","OrganizationGeneralSettings","api","useApi","projects","removeConfirmMessage","Fragment","tct","length","symbol","project","orgSlug","prevData","changeOrganizationSlug","organizationUrl","links","window","browserHistory","codecovAccess","trackAdvancedAnalyticsEvent","has_access","isDefault","priority","confirmText","onConfirm","addLoadingMessage","removeAndRedirectToRemainingOrganization","orgId","successMessage","errorMessage","withProjects"],"sourceRoot":""}