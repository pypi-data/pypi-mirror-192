{"version":3,"file":"chunks/app_components_charts_components_dataZoomInside_tsx-app_components_charts_components_toolBox_-e7e825.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/components/dataZoomInside.tsx","webpack:///./app/components/charts/components/toolBox.tsx","webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"sourcesContent":["import 'echarts/lib/component/dataZoomInside';\n\nimport type {InsideDataZoomComponentOption} from 'echarts';\n\nconst DEFAULT: InsideDataZoomComponentOption = {\n  type: 'inside',\n  // Mouse wheel can not trigger zoom\n  zoomOnMouseWheel: false,\n  // The translation (by mouse drag or touch drag) is available but zoom is not\n  zoomLock: true,\n  throttle: 50,\n};\n\nexport default function DataZoomInside(\n  props: InsideDataZoomComponentOption | InsideDataZoomComponentOption[]\n): InsideDataZoomComponentOption[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    };\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import type {ToolboxComponentOption} from 'echarts';\n\nfunction getFeatures({\n  dataZoom,\n  ...features\n}: ToolboxComponentOption['feature'] = {}): ToolboxComponentOption['feature'] {\n  return {\n    ...(dataZoom\n      ? {\n          dataZoom: {\n            yAxisIndex: 'none',\n            title: {\n              zoom: 'zoom',\n              back: 'undo',\n            },\n            ...dataZoom,\n          },\n        }\n      : {}),\n    ...features,\n  };\n}\n\nexport default function ToolBox(\n  options: ToolboxComponentOption,\n  features: ToolboxComponentOption['feature']\n): ToolboxComponentOption {\n  return {\n    right: 0,\n    top: 0,\n    itemSize: 16,\n    // Stack the toolbox under the legend.\n    // so all series names are clickable.\n    z: -1,\n\n    feature: getFeatures(features),\n    ...options,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport LoadingMask, {LoadingMaskProps} from 'sentry/components/loadingMask';\n\ninterface TransparentLoadingMaskProps extends LoadingMaskProps {\n  visible: boolean;\n  children?: React.ReactNode;\n  className?: string;\n}\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: TransparentLoadingMaskProps) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<TransparentLoadingMaskProps>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  return useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n}\n\nexport default DiscoverQuery;\n","import pick from 'lodash/pick';\n\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryPropsWithContext,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {WebVital} from 'sentry/utils/fields';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\n\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  good: number;\n  meh: number;\n  p75: number | null;\n  poor: number;\n  total: number;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryPropsWithContext & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default VitalsCardsDiscoverQuery;\n","import {Sparklines} from 'react-sparklines';\nimport * as PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport default class SparklinesWithCustomPropTypes extends Sparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import {ReactNode} from 'react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\n\ntype ColorStop = {\n  color: Color | string;\n  percent: number;\n  renderBarStatus?: (barStatus: ReactNode, key: string) => ReactNode;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n  barHeight?: number;\n};\n\nconst ColorBar = (props: Props) => {\n  return (\n    <VitalBar\n      barHeight={props.barHeight}\n      fractions={props.colorStops.map(({percent}) => percent)}\n    >\n      {props.colorStops.map(colorStop => {\n        const barStatus = <BarStatus color={colorStop.color} key={colorStop.color} />;\n\n        return colorStop.renderBarStatus?.(barStatus, colorStop.color) ?? barStatus;\n      })}\n    </VitalBar>\n  );\n};\n\ntype VitalBarProps = {\n  fractions: number[];\n  barHeight?: number;\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: ${p => (p.barHeight ? `${p.barHeight}px` : '16px')};\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${p => (p.barHeight ? '' : space(1))};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color | string;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color] ?? p.color};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {WebVital} from 'sentry/utils/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\ntype Props = {\n  percents: Percent[];\n  vital: WebVital | WebVital[];\n  hideTooltips?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n};\n\nfunction getVitalStateText(vital: WebVital | WebVital[], vitalState) {\n  const unit = !Array.isArray(vital) && vital !== WebVital.CLS ? 'ms' : '';\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('(>[threshold][unit])', {threshold: webVitalPoor[vital], unit});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('(>[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('(<=[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => (\n        <VitalStatus data-test-id=\"vital-status\" key={pct.vitalState}>\n          {vitalStateIcons[pct.vitalState]}\n          {props.showVitalPercentNames && pct.vitalState}{' '}\n          {formatPercentage(pct.percent, 0)}\n          {props.showVitalThresholds && getVitalStateText(props.vital, pct.vitalState)}\n        </VitalStatus>\n      ))}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport Card from 'sentry/components/card';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitle} from 'sentry/components/charts/styles';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Sparklines from 'sentry/components/sparklines';\nimport SparklinesLine from 'sentry/components/sparklines/line';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Column,\n  generateFieldAsString,\n  getAggregateAlias,\n} from 'sentry/utils/discover/fields';\nimport {WebVital} from 'sentry/utils/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport toArray from 'sentry/utils/toArray';\nimport useApi from 'sentry/utils/useApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n  vitalCardDetails,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BaseCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\ntype GenericCardsProps = BaseCardsProps & {\n  functions: Column[];\n};\n\nfunction GenericCards(props: GenericCardsProps) {\n  const api = useApi();\n\n  const {eventView: baseEventView, location, organization, functions} = props;\n  const {query} = location;\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const interval =\n    typeof query.sparkInterval === 'string'\n      ? query.sparkInterval\n      : getInterval(\n          {\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          },\n          'low'\n        );\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={interval}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const details = vitalCardDetails(organization);\n\n            return (\n              <VitalsContainer>\n                {functions.map(func => {\n                  let fieldName = generateFieldAsString(func);\n\n                  if (fieldName.includes('apdex')) {\n                    // Replace apdex with explicit thresholds with a generic one for lookup\n                    fieldName = 'apdex()';\n                  }\n\n                  const cardDetail = details[fieldName];\n                  if (!cardDetail) {\n                    Sentry.captureMessage(`Missing field '${fieldName}' in vital cards.`);\n                    return null;\n                  }\n\n                  const {title, tooltip, formatter} = cardDetail;\n                  const alias = getAggregateAlias(fieldName);\n                  const rawValue = tableData?.data?.[0]?.[alias] as number;\n\n                  const data = series?.[fieldName];\n                  const value =\n                    isSummaryLoading || !defined(rawValue)\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={fieldName}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nfunction _BackendCards(props: BaseCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'transaction.duration', undefined, undefined],\n    },\n    {kind: 'function', function: ['tpm', '', undefined, undefined]},\n    {kind: 'function', function: ['failure_rate', '', undefined, undefined]},\n    {\n      kind: 'function',\n      function: ['apdex', '', undefined, undefined],\n    },\n  ];\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const BackendCards = _BackendCards;\n\ntype MobileCardsProps = BaseCardsProps & {\n  showStallPercentage: boolean;\n};\n\nfunction _MobileCards(props: MobileCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_cold', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_warm', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_slow_rate', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_frozen_rate', undefined, undefined],\n    },\n  ];\n  if (props.showStallPercentage) {\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.stall_percentage', undefined, undefined],\n    });\n  }\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const MobileCards = _MobileCards;\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  height: number;\n  width: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  data: VitalsData | null;\n  isLoading: boolean;\n  vital: WebVital | WebVital[];\n  barHeight?: number;\n  showBar?: boolean;\n  showDetail?: boolean;\n  showDurationDetail?: boolean;\n  showStates?: boolean;\n  showTooltip?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n  value?: string;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = true,\n    showVitalThresholds = false,\n    showDetail = true,\n    showTooltip = false,\n    barHeight,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = toArray(vital);\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <Fragment>\n      {showBar && (\n        <StyledTooltip\n          title={\n            <VitalPercents\n              vital={vital}\n              percents={percents}\n              showVitalPercentNames={false}\n              showVitalThresholds={false}\n              hideTooltips={showTooltip}\n            />\n          }\n          disabled={!showTooltip}\n          position=\"bottom\"\n        >\n          <ColorBar barHeight={barHeight} colorStops={colorStops} />\n        </StyledTooltip>\n      )}\n      {showDetail && (\n        <BarDetail>\n          {showDurationDetail && p75 && (\n            <div>\n              {t('The p75 for all transactions is ')}\n              <strong>{p75}</strong>\n            </div>\n          )}\n\n          <VitalPercents\n            vital={vital}\n            percents={percents}\n            showVitalPercentNames={showVitalPercentNames}\n            showVitalThresholds={showVitalThresholds}\n          />\n        </BarDetail>\n      )}\n    </Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  chart: React.ReactNode;\n  title: string;\n  tooltip: string;\n  value: string | number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n  minHeight?: number;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{title}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nconst StyledTooltip = styled(Tooltip)`\n  width: 100%;\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  }\n  return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n}\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n"],"names":["DEFAULT","type","zoomOnMouseWheel","zoomLock","throttle","DataZoomInside","props","Array","isArray","getFeatures","dataZoom","features","yAxisIndex","title","zoom","back","ToolBox","options","right","top","itemSize","z","feature","className","visible","children","other","p","shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","useGenericDiscoverQuery","getRequestPayload","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","Object","values","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","tableData","rest","vitalsData","SparklinesWithCustomPropTypes","Sparklines","PropTypes","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","barHeight","fractions","colorStops","map","percent","colorStop","barStatus","BarStatus","color","renderBarStatus","theme","gray100","f","join","space","getVitalStateText","vitalState","unit","WebVital","VitalState","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","showVitalThresholds","fontSizeMedium","GenericCards","api","useApi","baseEventView","organization","functions","query","withColumns","globalSelection","getPageFilters","start","datetime","getUtcToLocalDateObject","undefined","end","interval","sparkInterval","getInterval","period","orgSlug","slug","referrer","isLoading","isSummaryLoading","project","projects","environment","environments","team","includePrevious","yAxis","getFields","partial","results","series","reduce","allSeries","oneSeries","seriesName","item","value","details","vitalCardDetails","VitalsContainer","func","fieldName","generateFieldAsString","includes","cardDetail","Sentry","tooltip","formatter","alias","getAggregateAlias","rawValue","defined","chart","SparklineChart","VitalCard","horizontal","minHeight","isNotInteractive","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","small","large","showBar","showStates","showDurationDetail","showDetail","showTooltip","emptyState","EmptyVitalBar","counts","poor","meh","good","total","toArray","forEach","vitalName","c","keys","countKey","p75","toFixed","getP75","poorPercent","mehPercent","goodPercent","getPercentsFromCounts","vitalStateColors","getColorStopsFromPercents","Fragment","StyledTooltip","hideTooltips","disabled","position","BarDetail","EmptyStateWarning","StyledCard","interactive","OverflowEllipsis","size","CardContent","CardValue","Card","textColor","Tooltip","overflowEllipsis"],"sourceRoot":""}