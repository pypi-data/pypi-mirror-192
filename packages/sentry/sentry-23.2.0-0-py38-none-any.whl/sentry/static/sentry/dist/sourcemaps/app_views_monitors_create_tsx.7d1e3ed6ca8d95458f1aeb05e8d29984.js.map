{"version":3,"file":"chunks/app_views_monitors_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"83BAoBA,MAAMA,UAAsBC,EAAAA,EAAqC,kEAS5CC,IACjB,MAAMC,GAAMC,EAAAA,EAAAA,GAAc,kBAAiBC,KAAKC,iBAAiBJ,EAAKK,OACtEC,EAAAA,eAAAA,KAAoBL,EAAI,GACzB,CAXDM,WACE,MAAQ,WAAUJ,KAAKC,SACzB,CAEIA,cACF,OAAOD,KAAKK,MAAMC,aAAaC,IACjC,CAOAC,aACE,OACE,QAAC,EAAAC,SAAQ,YACP,QAAC,KAAa,YACZ,QAAC,KAAoB,YACnB,QAAC,IAAW,CACVC,OAAQ,CACN,CACEC,OAAOC,EAAAA,EAAAA,GAAE,SACTC,GAAK,kBAAiBb,KAAKC,kBAE7B,CACEU,OAAOC,EAAAA,EAAAA,GAAE,4BAIf,QAAC,KAAY,WAAEA,EAAAA,EAAAA,GAAE,6BAEnB,QAAC,KAAoB,WACnB,QAAC,IAAmB,UAGxB,QAAC,KAAW,WACV,QAAC,KAAW,CAACE,WAAS,aACpB,QAACC,EAAQ,WACNH,EAAAA,EAAAA,GACE,mGAGL,QAAC,IAAW,CACVI,UAAU,OACVC,YAAc,kBAAiBjB,KAAKC,oBACpCiB,gBAAiBlB,KAAKkB,gBACtBC,aAAaP,EAAAA,EAAAA,GAAE,uBAM3B,EAEF,SAAeQ,EAAAA,EAAAA,GAAiBzB,GAE1BoB,GAAW,OAAO,IAAG,qBAAV,CAAW,UACjBM,GAAKA,EAAEC,MAAMC,SAAO,oB,kOC5E/B,MAEMC,EAAsB,KAC1B,QAAC,IAAe,CAACC,YAHS,QAGyBC,YAAa,CAACC,KAAM,QADnEH,EAAmB,kCAIzB,S","sources":["webpack:///./app/views/monitors/create.tsx","webpack:///./app/views/monitors/cronsFeedbackButton.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport CronsFeedbackButton from './cronsFeedbackButton';\nimport MonitorForm from './monitorForm';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] & {\n  organization: Organization;\n};\n\nclass CreateMonitor extends AsyncView<Props, AsyncView['state']> {\n  getTitle() {\n    return `Crons - ${this.orgSlug}`;\n  }\n\n  get orgSlug() {\n    return this.props.organization.slug;\n  }\n\n  onSubmitSuccess = (data: Monitor) => {\n    const url = normalizeUrl(`/organizations/${this.orgSlug}/crons/${data.id}/`);\n    browserHistory.push(url);\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: t('Crons'),\n                  to: `/organizations/${this.orgSlug}/crons/`,\n                },\n                {\n                  label: t('Set Up Cron Monitor'),\n                },\n              ]}\n            />\n            <Layout.Title>{t('Set Up Cron Monitor')}</Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <CronsFeedbackButton />\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <HelpText>\n              {t(\n                `Sentry will tell you if your recurring jobs are running on schedule, failing, or succeeding.`\n              )}\n            </HelpText>\n            <MonitorForm\n              apiMethod=\"POST\"\n              apiEndpoint={`/organizations/${this.orgSlug}/monitors/`}\n              onSubmitSuccess={this.onSubmitSuccess}\n              submitLabel={t('Next Steps')}\n            />\n          </Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(CreateMonitor);\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import {FeatureFeedback} from 'sentry/components/featureFeedback';\n\nconst CRONS_FEEDBACK_NAME = 'crons';\n\nconst CronsFeedbackButton = () => (\n  <FeatureFeedback featureName={CRONS_FEEDBACK_NAME} buttonProps={{size: 'sm'}} />\n);\n\nexport default CronsFeedbackButton;\n"],"names":["CreateMonitor","AsyncView","data","url","normalizeUrl","this","orgSlug","id","browserHistory","getTitle","props","organization","slug","renderBody","Fragment","crumbs","label","t","to","fullWidth","HelpText","apiMethod","apiEndpoint","onSubmitSuccess","submitLabel","withOrganization","p","theme","subText","CronsFeedbackButton","featureName","buttonProps","size"],"sourceRoot":""}