{"version":3,"file":"chunks/app_views_admin_adminBuffer_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qiBAuBA,MAAMA,UAA0BC,EAAAA,UAAwB,uDACvC,CACbC,OAAO,EACPC,SAAS,EACTC,KAAM,QACP,yBAoBW,KACVC,KAAKC,SAAS,CAACH,SAAS,IACxBE,KAAKE,MAAMC,IAAIC,QAAQ,mBAAoB,CACzCC,OAAQ,MACRN,KAAM,CACJO,MAAON,KAAKE,MAAMI,MAClBC,WAAYP,KAAKE,MAAMK,WACvBC,IAAKR,KAAKE,MAAMO,MAElBC,QAASX,GACPC,KAAKC,SAAS,CACZF,OACAD,SAAS,EACTD,OAAO,IAEXA,MAAO,IAAMG,KAAKC,SAAS,CAACJ,OAAO,EAAMC,SAAS,KAClD,GACH,CAnCDa,oBACEX,KAAKY,WACP,CAEAC,sBAAsBC,EAAmBC,GACvC,OAAOf,KAAKgB,MAAMlB,UAAYiB,EAAUjB,OAC1C,CAEAmB,mBAAmBC,GAEfA,EAAUZ,QAAUN,KAAKE,MAAMI,OAC/BY,EAAUT,OAAST,KAAKE,MAAMO,MAC9BS,EAAUX,aAAeP,KAAKE,MAAMK,YAEpCP,KAAKY,WAET,CAqBAO,SACE,MAAM,QAACrB,EAAO,MAAED,EAAK,KAAEE,GAAQC,KAAKgB,OAC9B,MAACI,EAAK,OAAEC,GAAUrB,KAAKE,MAC7B,GAAIJ,EACF,OAAO,QAAC,IAAgB,IAE1B,GAAID,EACF,OAAO,QAAC,IAAY,CAACyB,QAAStB,KAAKY,YAGrC,MAAMW,EAAS,CACbC,WAAYJ,EACZrB,KACEA,GAAM0B,KAAI,QAAEC,EAAWC,GAAM,QAAM,CACjCC,KAAkB,IAAZF,EACNC,QACD,KAAM,IAEX,OACE,QAAC,IAAY,CACXN,OAAQA,GAAU,IAClBE,OAAQ,CAACA,GACTM,iBAAe,EACfC,mBAAiB,EACjBC,mBAAiB,GAGvB,EAvEIpC,EAAiB,gCA0EvB,SAAeqC,EAAAA,EAAAA,GAAQrC,E,gOC/FvB,MAAMsC,EAAc,KAClB,MAAM3B,GAAQ,IAAI4B,MAAOC,UAAY,IAAO,OAE5C,OACE,0BACE,uBAAI,aAEJ,eAAKC,UAAU,MAAK,WAClB,eAAKA,UAAU,aAAY,UACzB,uBAAI,aAGN,eAAKA,UAAU,2BAA0B,UACvC,uBAAG,kJAEmE,KACpE,uBAAI,cAAc,wGAMxB,eAAKA,UAAU,MAAK,WAClB,eAAKA,UAAU,aAAY,UACzB,uBAAI,yBAEN,QAAC,IAAiB,CAChB9B,MAAOA,EACPC,WAAW,KACXE,KAAK,yDACLW,MAAM,aAIV,eAAKgB,UAAU,MAAK,WAClB,eAAKA,UAAU,aAAY,UACzB,uBAAI,uBAEN,QAAC,IAAiB,CAChB9B,MAAOA,EACPC,WAAW,KACXE,KAAK,iBACLW,MAAM,cAGN,EA7CJa,EAAW,0BAiDjB,S","sources":["webpack:///./app/components/internalStatChart.tsx","webpack:///./app/views/admin/adminBuffer.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  label: string;\n  resolution: string;\n  since: number;\n  stat: string;\n  height?: number;\n};\n\ntype State = {\n  data: [number, number][] | null;\n  error: boolean;\n  loading: boolean;\n};\n\nclass InternalStatChart extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps: Props, nextState: State) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true, loading: false}),\n    });\n  };\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data:\n        data?.map(([timestamp, value]) => ({\n          name: timestamp * 1000,\n          value,\n        })) ?? [],\n    };\n    return (\n      <MiniBarChart\n        height={height ?? 150}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import InternalStatChart from 'sentry/components/internalStatChart';\n\nconst AdminBuffer = () => {\n  const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n\n  return (\n    <div>\n      <h3>Buffers</h3>\n\n      <div className=\"box\">\n        <div className=\"box-header\">\n          <h4>About</h4>\n        </div>\n\n        <div className=\"box-content with-padding\">\n          <p>\n            Sentry buffers are responsible for making changes to cardinality counters —\n            such as an issues event count — as well as updating attributes like{' '}\n            <em>last seen</em>. These are flushed on a regularly interval, and are\n            directly affected by the queue backlog.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"box\">\n        <div className=\"box-header\">\n          <h4>Updates Processed</h4>\n        </div>\n        <InternalStatChart\n          since={since}\n          resolution=\"1h\"\n          stat=\"jobs.finished.sentry.tasks.process_buffer.process_incr\"\n          label=\"Jobs\"\n        />\n      </div>\n\n      <div className=\"box\">\n        <div className=\"box-header\">\n          <h4>Revoked Updates</h4>\n        </div>\n        <InternalStatChart\n          since={since}\n          resolution=\"1h\"\n          stat=\"buffer.revoked\"\n          label=\"Jobs\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AdminBuffer;\n"],"names":["InternalStatChart","Component","error","loading","data","this","setState","props","api","request","method","since","resolution","key","stat","success","componentDidMount","fetchData","shouldComponentUpdate","_nextProps","nextState","state","componentDidUpdate","prevProps","render","label","height","onRetry","series","seriesName","map","timestamp","value","name","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","withApi","AdminBuffer","Date","getTime","className"],"sourceRoot":""}