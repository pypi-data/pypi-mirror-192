{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_views_performance_transactionSummary_transactionOverv-74d739.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/tagExplorer.tsx"],"sourcesContent":["import {useEffect, useMemo, useRef} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Transaction} from '@sentry/types';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboards/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n  const collectedTransactionFromGetTagsListRef = useRef<boolean>(false);\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    // We will only collect a transaction once and only if the number of tags > 0\n    // This is to avoid a large number of transactions being sent to Sentry. The 0 check\n    // is to avoid collecting a transaction when tags are not loaded yet.\n    let transaction: Transaction | undefined = undefined;\n    if (!collectedTransactionFromGetTagsListRef.current && Object.keys(tags).length > 0) {\n      transaction = Sentry.startTransaction({\n        name: 'SearchBar.getTagList',\n      });\n      // Mark as collected - if code below errors, we risk never collecting\n      // a transaction in that case, but that is fine.\n      collectedTransactionFromGetTagsListRef.current = true;\n    }\n\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n\n    if (transaction) {\n      const totalCount: number = Object.keys(list).length;\n      transaction.setTag('tags.totalCount', totalCount);\n      const countGroup = [\n        1, 5, 10, 20, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 10000,\n      ].find(n => totalCount <= n);\n      transaction.setTag('tags.totalCount.grouped', `<=${countGroup}`);\n      transaction.finish();\n    }\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={[FieldKey.ENVIRONMENT, FieldKey.TOTAL_COUNT]}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {EventQuery} from 'sentry/actionCreators/events';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  aggregate: number;\n  comparison: number;\n  count: number;\n  frequency: number;\n  sumdelta: number;\n  tags_key: string;\n  tags_value: string;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  children: (props: ChildrenProps) => React.ReactNode;\n  allTagKeys?: boolean;\n  sort?: string | string[];\n  tagKey?: string;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    sort?: string | string[];\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default SegmentExplorerQuery;\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport {Button} from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView, {fromSorts, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/discover/table/cellAction';\nimport {TableColumn} from 'sentry/views/discover/table/types';\n\nimport {\n  platformAndConditionsToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from '../../utils';\nimport {\n  SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport {tagsRouteWithQuery} from '../transactionTags/utils';\nimport {normalizeSearchConditions} from '../utils';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nconst COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  currentFilter: SpanOperationBreakdownFilter;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n};\n\ntype State = {\n  widths: number[];\n};\nexport class TagExplorer extends Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.sort', {\n      organization,\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.tag_value', {\n      organization,\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString ?? '');\n\n    conditions.addFilterValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.cell_action', {\n        organization,\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.visit_tag_key', {\n      organization,\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Link to={target} onClick={() => this.onTagKeyClick()}>\n          {dataRow.tags_key}\n        </Link>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <div className=\"truncate\">{dataRow.tags_value}</div>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  location: Location;\n  organization: Organization;\n  pageLinks: string | null;\n  transactionName: string;\n};\n\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAdvancedAnalyticsEvent('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n      </div>\n      <Button\n        onClick={handleViewAllTagsClick}\n        to={viewAllTarget}\n        size=\"xs\"\n        data-test-id=\"tags-explorer-open-tags\"\n      >\n        {t('View All Tags')}\n      </Button>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"xs\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n  width: 100%;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","props","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","collectedTransactionFromGetTagsListRef","useRef","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","getFunctionTags","tagsWithKind","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","defined","Error","getTagList","measurements","transaction","current","Sentry","measurementsWithKind","getMeasurementTags","combinedTags","features","includes","assign","FieldKey","values","sort","a","b","toLowerCase","localeCompare","predefined","list","totalCount","setTag","countGroup","find","n","finish","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","customPerformanceMetrics","withTags","getRequestFunction","_props","aggregateColumn","eventView","apiPayload","getEventsAPIPayload","location","allTagKeys","shouldRefetchData","prevProps","nextProps","SegmentExplorerQuery","route","getRequestPayload","WrappedComponent","WithTags","Component","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","TAGS_CURSOR_NAME","COLUMN_ORDER","width","column","canSort","getTransactionField","currentFilter","projects","fieldFromFilter","SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD","platformAndConditionsToPerformanceType","PROJECT_PERFORMANCE_TYPE","TagValue","className","row","tags_value","TagExplorer","widths","columnIndex","nextColumn","Number","COL_WIDTH_UNDEFINED","columns","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","trackAdvancedAnalyticsEvent","queryString","decodeScalar","conditions","MutableSearch","addFilterValues","formatString","browserHistory","pathname","trim","actionRow","action","searchConditions","normalizeSearchConditions","updateQuery","id","parentProps","dataRow","value","transactionName","target","tagsRouteWithQuery","projectID","project","tags_key","to","onClick","onTagKeyClick","allowActions","Actions","handleCellAction","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","abbreviation","milliseconds","aggregate","sumdelta","renderBodyCell","onSortClick","currentSortKind","currentSortField","direction","columnInfo","align","fieldAlignment","type","currentSort","sortForField","isFieldSortable","title","generateSortLink","nextEventView","sortOnField","generateQueryStringObject","tagSort","cursor","tagEventView","clone","tagSorts","fromSorts","withSorts","adjustedColumns","c","durationColumn","getColumnsWithReplacedDuration","getColumnOrder","columnSortBy","getSorts","limit","isLoading","tableData","pageLinks","Fragment","TagsHeader","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","viewAllTarget","Header","size","StyledPagination","onCursor","space","Pagination"],"sourceRoot":""}