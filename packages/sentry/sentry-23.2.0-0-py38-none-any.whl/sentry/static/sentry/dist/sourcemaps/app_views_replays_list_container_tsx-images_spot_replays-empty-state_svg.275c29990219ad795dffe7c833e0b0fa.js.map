{"version":3,"file":"chunks/app_views_replays_list_container_tsx-images_spot_replays-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/replays/replaysFeatureBadge.tsx","webpack:///./app/utils/replays/hooks/useReplayOnboarding.tsx","webpack:///./app/utils/replays/hooks/useReplayPageview.tsx","webpack:///./app/views/replays/replaySearchBar.tsx","webpack:///./app/views/replays/filters.tsx","webpack:///./app/views/replays/list/replayOnboardingPanel.tsx","webpack:///./app/views/replays/list/replays.tsx","webpack:///./app/views/replays/list/container.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import FeatureBadge from 'sentry/components/featureBadge';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction ReplaysFeatureBadge(\n  props: Omit<React.ComponentProps<typeof FeatureBadge>, 'type'>\n) {\n  // TODO(replay): Remove this special-case for our internal demo org\n  const organization = useOrganization();\n  if (organization.slug === 'testorg-az') {\n    return null;\n  }\n  return <FeatureBadge {...props} type=\"new\" />;\n}\n\nexport default ReplaysFeatureBadge;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Project} from 'sentry/types';\nimport {PageFilters} from 'sentry/types/core';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nfunction getSelectedProjectList(\n  selectedProjects: PageFilters['projects'],\n  projects: Project[]\n) {\n  if (selectedProjects[0] === ALL_ACCESS_PROJECTS || selectedProjects.length === 0) {\n    return projects;\n  }\n\n  const projectsByProjectId = projects.reduce<Record<string, Project>>((acc, project) => {\n    acc[project.id] = project;\n    return acc;\n  }, {});\n  return selectedProjects.map(id => projectsByProjectId[id]).filter(Boolean);\n}\n\nexport function useHaveSelectedProjectsSentAnyReplayEvents() {\n  const {projects, fetching} = useProjects();\n  const {selection} = usePageFilters();\n\n  const orgSentOneOrMoreReplayEvent = useMemo(() => {\n    const selectedProjects = getSelectedProjectList(selection.projects, projects);\n    const hasSentOneReplay = selectedProjects.some(project => project.hasReplays);\n    return hasSentOneReplay;\n  }, [selection.projects, projects]);\n\n  return {\n    hasSentOneReplay: orgSentOneOrMoreReplayEvent,\n    fetching,\n  };\n}\n\nexport function useReplayOnboardingSidebarPanel() {\n  const {location} = useRouteContext();\n\n  useEffect(() => {\n    if (location.hash === '#replay-sidequest') {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n    }\n  }, [location.hash]);\n\n  const activateSidebar = useCallback((event: {preventDefault: () => void}) => {\n    event.preventDefault();\n    window.location.hash = 'replay-sidequest';\n    SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n  }, []);\n\n  return {activateSidebar};\n}\n","import {useEffect, useRef} from 'react';\n\nimport ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction useReplayPageview(type: 'replay.details-time-spent' | 'replay.list-time-spent') {\n  const config = useLegacyStore(ConfigStore);\n  const location = useLocation();\n  const organization = useOrganization();\n  const startTimeRef = useRef(Date.now());\n\n  useEffect(() => {\n    const startTime = startTimeRef.current;\n\n    trackAdvancedAnalyticsEvent('replay.details-viewed', {\n      organization,\n      referrer: decodeScalar(location.query.referrer),\n      user_email: config.user.email,\n    });\n\n    return () => {\n      const endTime = Date.now();\n      trackAdvancedAnalyticsEvent(type, {\n        organization,\n        seconds: (endTime - startTime) / 1000,\n        user_email: config.user.email,\n      });\n    };\n  }, [organization, type, location.query.referrer, config.user.email]);\n}\n\nexport default useReplayPageview;\n","import {useCallback} from 'react';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH, NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {\n  Organization,\n  PageFilters,\n  SavedSearchType,\n  Tag,\n  TagCollection,\n  TagValue,\n} from 'sentry/types';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {getFieldDefinition, REPLAY_FIELDS} from 'sentry/utils/fields';\nimport useApi from 'sentry/utils/useApi';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\n/**\n * Prepare query string (e.g. strip special characters like negation operator)\n */\nfunction prepareQuery(searchQuery: string) {\n  return searchQuery.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n}\nconst getReplayFieldDefinition = (key: string) => getFieldDefinition(key, 'replay');\n\nfunction fieldDefinitionsToTagCollection(fieldKeys: string[]): TagCollection {\n  return Object.fromEntries(\n    fieldKeys.map(key => [\n      key,\n      {\n        key,\n        name: key,\n        kind: getReplayFieldDefinition(key)?.kind,\n      },\n    ])\n  );\n}\n\nconst REPLAY_TAGS = fieldDefinitionsToTagCollection(REPLAY_FIELDS);\n\ntype Props = React.ComponentProps<typeof SmartSearchBar> & {\n  organization: Organization;\n  pageFilters: PageFilters;\n};\n\nfunction ReplaySearchBar(props: Props) {\n  const {organization, pageFilters} = props;\n  const api = useApi();\n  const projectIdStrings = pageFilters.projects?.map(String);\n\n  const getTagValues = useCallback(\n    (tag: Tag, searchQuery: string, _params: object): Promise<string[]> => {\n      if (isAggregateField(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: searchQuery,\n        projectIds: projectIdStrings,\n        includeReplays: true,\n      }).then(\n        tagValues => (tagValues as TagValue[]).map(({value}) => value),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    [api, organization.slug, projectIdStrings]\n  );\n\n  return (\n    <SmartSearchBar\n      {...props}\n      onGetTagValues={getTagValues}\n      supportedTags={REPLAY_TAGS}\n      placeholder={t('Search for users, duration, count_errors, and more')}\n      prepareQuery={prepareQuery}\n      maxQueryLength={MAX_QUERY_LENGTH}\n      searchSource=\"replay_index\"\n      savedSearchType={SavedSearchType.REPLAY}\n      maxMenuHeight={500}\n      hasRecentSearches\n      fieldDefinitionGetter={getReplayFieldDefinition}\n    />\n  );\n}\n\nexport default ReplaySearchBar;\n","import {useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {space} from 'sentry/styles/space';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport ReplaySearchBar from 'sentry/views/replays/replaySearchBar';\n\nconst DEFAULT_QUERY = 'duration:>=5';\n\nfunction ReplaysFilters() {\n  const {selection} = usePageFilters();\n  const {pathname, query} = useLocation();\n  const organization = useOrganization();\n\n  useEffect(() => {\n    if (query.query === undefined) {\n      // Set default query into url if there is no query set\n      browserHistory.replace({\n        pathname,\n        query: {\n          ...query,\n          cursor: undefined,\n          query: DEFAULT_QUERY,\n        },\n      });\n    }\n  });\n\n  return (\n    <FilterContainer>\n      <PageFilterBar condensed>\n        <ProjectPageFilter resetParamsOnChange={['cursor']} />\n        <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n        <DatePageFilter alignDropdown=\"left\" resetParamsOnChange={['cursor']} />\n      </PageFilterBar>\n      <ReplaySearchBar\n        organization={organization}\n        pageFilters={selection}\n        defaultQuery={DEFAULT_QUERY}\n        query={decodeScalar(query.query, DEFAULT_QUERY)}\n        onSearch={searchQuery => {\n          browserHistory.push({\n            pathname,\n            query: {\n              ...query,\n              cursor: undefined,\n              query: searchQuery.trim(),\n            },\n          });\n        }}\n      />\n    </FilterContainer>\n  );\n}\n\nconst FilterContainer = styled('div')`\n  display: inline-grid;\n  grid-template-columns: minmax(0, max-content) minmax(20rem, 1fr);\n  gap: ${space(2)};\n  width: 100%;\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ReplaysFilters;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/replays-empty-state.svg';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport PreferencesStore from 'sentry/stores/preferencesStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {useReplayOnboardingSidebarPanel} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype Breakpoints = {\n  large: string;\n  medium: string;\n  small: string;\n  xlarge: string;\n};\n\nconst OnboardingCTAHook = HookOrDefault({\n  hookName: 'component:replay-onboarding-cta',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nexport default function ReplayOnboardingPanel() {\n  const preferences = useLegacyStore(PreferencesStore);\n\n  const breakpoints = preferences.collapsed\n    ? {\n        small: '800px',\n        medium: '992px',\n        large: '1210px',\n        xlarge: '1450px',\n      }\n    : {\n        small: '800px',\n        medium: '1175px',\n        large: '1375px',\n        xlarge: '1450px',\n      };\n\n  const organization = useOrganization();\n\n  return (\n    <OnboardingPanel image={<HeroImage src={emptyStateImg} breakpoints={breakpoints} />}>\n      <Feature\n        features={['session-replay-ga']}\n        organization={organization}\n        renderDisabled={() => <SetupReplaysCTA />}\n      >\n        <OnboardingCTAHook organization={organization}>\n          <SetupReplaysCTA />\n        </OnboardingCTAHook>\n      </Feature>\n    </OnboardingPanel>\n  );\n}\n\nfunction SetupReplaysCTA() {\n  const {activateSidebar} = useReplayOnboardingSidebarPanel();\n\n  return (\n    <Fragment>\n      <h3>{t('Get to the root cause faster')}</h3>\n      <p>\n        {t(\n          'See a video-like reproduction of your user sessions so you can see what happened before, during, and after an error or latency issue occurred.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button onClick={activateSidebar} priority=\"primary\">\n          {t('Set Up Replays')}\n        </Button>\n        <Button\n          href=\"https://docs.sentry.io/platforms/javascript/session-replay/\"\n          external\n        >\n          {t('Read Docs')}\n        </Button>\n      </ButtonList>\n    </Fragment>\n  );\n}\n\nconst HeroImage = styled('img')<{breakpoints: Breakpoints}>`\n  @media (min-width: ${p => p.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.breakpoints.medium}) {\n    transform: translateX(-55%);\n    width: 300px;\n    min-width: 300px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 380px;\n    min-width: 380px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.xlarge}) {\n    transform: translateX(-65%);\n    width: 420px;\n    min-width: 420px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {Fragment, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport {useTheme} from '@emotion/react';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Pagination from 'sentry/components/pagination';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT, REPLAY_LIST_FIELDS} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useHaveSelectedProjectsSentAnyReplayEvents} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplaysFilters from 'sentry/views/replays/filters';\nimport ReplayOnboardingPanel from 'sentry/views/replays/list/replayOnboardingPanel';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nfunction ReplaysList() {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const eventView = useMemo(() => {\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    return EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: '',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: conditions.formatString(),\n        orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n      },\n      location\n    );\n  }, [location]);\n\n  const {replays, pageLinks, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  const {hasSentOneReplay, fetching} = useHaveSelectedProjectsSentAnyReplayEvents();\n\n  return (\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <ReplaysFilters />\n        {fetching ? null : hasSentOneReplay ? (\n          <Fragment>\n            <ReplayTable\n              fetchError={fetchError}\n              isFetching={isFetching}\n              replays={replays}\n              sort={eventView.sorts[0]}\n              visibleColumns={[\n                ReplayColumns.session,\n                ...(hasRoomForColumns\n                  ? [ReplayColumns.projectId, ReplayColumns.startedAt]\n                  : []),\n                ReplayColumns.duration,\n                ReplayColumns.countErrors,\n                ReplayColumns.activity,\n              ]}\n            />\n            <Pagination\n              pageLinks={pageLinks}\n              onCursor={(cursor, path, searchQuery) => {\n                trackAdvancedAnalyticsEvent('replay.list-paginated', {\n                  organization,\n                  direction: cursor?.endsWith(':1') ? 'prev' : 'next',\n                });\n                browserHistory.push({\n                  pathname: path,\n                  query: {...searchQuery, cursor},\n                });\n              }}\n            />\n          </Fragment>\n        ) : (\n          <ReplayOnboardingPanel />\n        )}\n      </Layout.Main>\n    </Layout.Body>\n  );\n}\n\nexport default ReplaysList;\n","import {Fragment} from 'react';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ReplaysFeatureBadge from 'sentry/components/replays/replaysFeatureBadge';\nimport {t} from 'sentry/locale';\nimport useReplayPageview from 'sentry/utils/replays/hooks/useReplayPageview';\nimport ReplaysList from 'sentry/views/replays/list/replays';\n\nfunction ReplaysListContainer() {\n  useReplayPageview('replay.list-time-spent');\n  return (\n    <Fragment>\n      <Layout.Header>\n        <Layout.HeaderContent>\n          <Layout.Title>\n            {t('Session Replay')} <ReplaysFeatureBadge space={1} />\n          </Layout.Title>\n        </Layout.HeaderContent>\n      </Layout.Header>\n      <PageFiltersContainer>\n        <ReplaysList />\n      </PageFiltersContainer>\n    </Fragment>\n  );\n}\n\nexport default ReplaysListContainer;\n"],"names":["OnboardingPanel","image","children","props","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","ReplaysFeatureBadge","useOrganization","slug","type","useHaveSelectedProjectsSentAnyReplayEvents","projects","fetching","useProjects","selection","usePageFilters","orgSentOneOrMoreReplayEvent","useMemo","selectedProjects","ALL_ACCESS_PROJECTS","length","projectsByProjectId","reduce","acc","project","id","map","filter","Boolean","getSelectedProjectList","some","hasReplays","hasSentOneReplay","useReplayOnboardingSidebarPanel","location","useRouteContext","useEffect","hash","SidebarPanelStore","SidebarPanelKey","activateSidebar","useCallback","event","preventDefault","window","config","useLegacyStore","ConfigStore","useLocation","organization","startTimeRef","useRef","Date","now","startTime","current","trackAdvancedAnalyticsEvent","referrer","decodeScalar","query","user_email","user","email","endTime","seconds","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","prepareQuery","searchQuery","replace","getReplayFieldDefinition","key","getFieldDefinition","REPLAY_TAGS","fieldKeys","REPLAY_FIELDS","Object","fromEntries","name","kind","ReplaySearchBar","pageFilters","api","useApi","projectIdStrings","String","getTagValues","tag","_params","isAggregateField","Promise","resolve","fetchTagValues","orgSlug","tagKey","search","projectIds","includeReplays","then","tagValues","value","Error","onGetTagValues","supportedTags","placeholder","t","maxQueryLength","MAX_QUERY_LENGTH","searchSource","savedSearchType","SavedSearchType","maxMenuHeight","hasRecentSearches","fieldDefinitionGetter","DEFAULT_QUERY","ReplaysFilters","pathname","undefined","browserHistory","cursor","FilterContainer","condensed","resetParamsOnChange","alignDropdown","defaultQuery","onSearch","trim","OnboardingCTAHook","HookOrDefault","hookName","defaultComponent","Fragment","ReplayOnboardingPanel","PreferencesStore","collapsed","large","xlarge","HeroImage","src","emptyStateImg","features","renderDisabled","SetupReplaysCTA","ButtonList","gap","onClick","priority","href","external","ButtonBar","ReplaysList","useTheme","hasRoomForColumns","useMedia","eventView","conditions","MutableSearch","EventView","version","fields","REPLAY_LIST_FIELDS","formatString","orderby","sort","DEFAULT_SORT","replays","pageLinks","isFetching","fetchError","useReplayList","fullWidth","sorts","visibleColumns","ReplayColumns","onCursor","path","direction","endsWith","ReplaysListContainer","useReplayPageview"],"sourceRoot":""}