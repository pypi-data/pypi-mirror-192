{"version":3,"file":"chunks/app_components_errorRobot_tsx-images_spot_sentry-robot_png.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/errorRobot.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport robotBackground from 'sentry-images/spot/sentry-robot.png';\n\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport CreateSampleEventButton from 'sentry/views/onboarding/createSampleEventButton';\n\ntype Props = {\n  api: Client;\n  gradient: boolean;\n  org: Organization;\n  project?: Project;\n  /**\n   * sampleIssueId can have 3 values:\n   * - empty string to indicate it doesn't exist (render \"create sample event\")\n   * - non-empty string to indicate it exists (render \"see sample event\")\n   * - undefined to indicate the project API should be consulted to find out\n   */\n  sampleIssueId?: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  sampleIssueId?: string;\n};\n\nclass ErrorRobot extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: false,\n    sampleIssueId: this.props.sampleIssueId,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const {org, project} = this.props;\n    const {sampleIssueId} = this.state;\n\n    if (!project) {\n      return;\n    }\n\n    if (defined(sampleIssueId)) {\n      return;\n    }\n\n    const url = `/projects/${org.slug}/${project.slug}/issues/`;\n\n    this.setState({loading: true});\n\n    try {\n      const data = await this.props.api.requestPromise(url, {\n        method: 'GET',\n        data: {limit: 1},\n      });\n      this.setState({sampleIssueId: (data.length > 0 && data[0].id) || ''});\n    } catch (err) {\n      const error = err?.responseJSON?.detail ?? true;\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  }\n\n  render() {\n    const {loading, error, sampleIssueId} = this.state;\n    const {org, project, gradient} = this.props;\n\n    const sampleLink =\n      project && (loading || error ? null : sampleIssueId) ? (\n        <p>\n          <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>\n            {t('Or see your sample event')}\n          </Link>\n        </p>\n      ) : (\n        <p>\n          <CreateSampleEventButton\n            priority=\"link\"\n            project={project}\n            source=\"issues_list\"\n            disabled={!project}\n            title={!project ? t('Select a project to create a sample event') : undefined}\n          >\n            {t('Create a sample event')}\n          </CreateSampleEventButton>\n        </p>\n      );\n\n    return (\n      <ErrorRobotWrapper\n        data-test-id=\"awaiting-events\"\n        className=\"awaiting-events\"\n        gradient={gradient}\n      >\n        <Robot aria-hidden>\n          <Eye />\n        </Robot>\n        <MessageContainer>\n          <h3>{t('Waiting for eventsâ€¦')}</h3>\n          <p>\n            {tct(\n              'Our error robot is waiting to [strike:devour] receive your first event.',\n              {\n                strike: <Strikethrough />,\n              }\n            )}\n          </p>\n          <p>\n            {project && (\n              <Button\n                data-test-id=\"install-instructions\"\n                priority=\"primary\"\n                to={`/${org.slug}/${project.slug}/getting-started/${\n                  project.platform || ''\n                }`}\n              >\n                {t('Installation Instructions')}\n              </Button>\n            )}\n          </p>\n          {sampleLink}\n        </MessageContainer>\n      </ErrorRobotWrapper>\n    );\n  }\n}\n\nexport {ErrorRobot};\n\nexport default withApi(ErrorRobot);\n\nconst ErrorRobotWrapper = styled('div')<{gradient: boolean}>`\n  display: flex;\n  justify-content: center;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.08);\n  border-radius: 0 0 3px 3px;\n  padding: 40px ${space(3)} ${space(3)};\n  min-height: 260px;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: center;\n    padding: ${space(3)};\n    text-align: center;\n  }\n`;\n\nconst Robot = styled('div')`\n  display: block;\n  position: relative;\n  width: 220px;\n  height: 260px;\n  background: url(${robotBackground});\n  background-size: cover;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: 110px;\n    height: 130px;\n  }\n`;\n\nconst Eye = styled('span')`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  top: 70px;\n  left: 81px;\n  transform: translateZ(0);\n  animation: blink-eye 0.6s infinite;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: 6px;\n    height: 6px;\n    top: 35px;\n    left: 41px;\n  }\n\n  @keyframes blink-eye {\n    0% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n\n    50% {\n      background: #4a4d67;\n      box-shadow: none;\n    }\n\n    100% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n  }\n`;\n\nconst MessageContainer = styled('div')`\n  align-self: center;\n  max-width: 480px;\n  margin-left: 40px;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    margin: 0;\n  }\n`;\n\nconst Strikethrough = styled('span')`\n  text-decoration: line-through;\n`;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateSampleEventButtonProps = {\n  api: Client;\n  organization: Organization;\n  source: string;\n  project?: Project;\n} & ButtonProps;\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 30;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n\n    await new Promise(resolve => window.setTimeout(resolve, EVENT_POLL_INTERVAL));\n\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends Component<CreateSampleEventButtonProps, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('sample_event.button_viewed', {\n      organization,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}` as const;\n\n    trackAdvancedAnalyticsEvent(eventKey, {\n      organization,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_sample_event', {\n      platform: project.platform,\n      organization,\n    });\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel('warning');\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      normalizeUrl(\n        `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}&referrer=sample-error`\n      )\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n"],"names":["ErrorRobot","Component","error","loading","sampleIssueId","this","props","componentDidMount","fetchData","async","org","project","state","defined","url","slug","setState","data","api","requestPromise","method","limit","length","id","err","responseJSON","detail","render","gradient","sampleLink","to","t","priority","source","disabled","title","undefined","ErrorRobotWrapper","className","Robot","Eye","MessageContainer","tct","strike","Strikethrough","platform","withApi","p","theme","fontSizeExtraLarge","space","breakpoints","small","robotBackground","EVENT_POLL_INTERVAL","CreateSampleEventButton","creating","organization","eventData","trackAdvancedAnalyticsEvent","addLoadingMessage","duration","EVENT_POLL_RETRIES","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","eventCreated","retries","groupID","Promise","resolve","window","setTimeout","latestEventAvailable","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","browserHistory","normalizeUrl","project_id","eventKey","interval","_api","_organization","_project","_source","onClick","createSampleGroup","withOrganization"],"sourceRoot":""}