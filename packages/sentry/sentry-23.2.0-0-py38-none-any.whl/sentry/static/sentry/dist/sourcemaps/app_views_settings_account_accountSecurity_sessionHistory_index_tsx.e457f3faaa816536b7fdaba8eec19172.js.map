{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_sessionHistory_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/utils.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/sessionRow.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/index.tsx"],"sourcesContent":["import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {space} from 'sentry/styles/space';\n\nexport const tableLayout = `\n  display: grid;\n  grid-template-columns: auto 140px 140px;\n  gap ${space(1)};\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\n\nimport {PanelItem} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport {space} from 'sentry/styles/space';\nimport {InternetProtocol} from 'sentry/types';\n\nimport {tableLayout} from './utils';\n\nfunction SessionRow({\n  ipAddress,\n  lastSeen,\n  firstSeen,\n  countryCode,\n  regionCode,\n}: Omit<InternetProtocol, 'id'>) {\n  return (\n    <SessionPanelItem>\n      <IpAndLocation>\n        <IpAddress>{ipAddress}</IpAddress>\n        {countryCode && regionCode && (\n          <CountryCode>{`${countryCode} (${regionCode})`}</CountryCode>\n        )}\n      </IpAndLocation>\n      <div>\n        <StyledTimeSince date={firstSeen} />\n      </div>\n      <div>\n        <StyledTimeSince date={lastSeen} />\n      </div>\n    </SessionPanelItem>\n  );\n}\n\nexport default SessionRow;\n\nconst IpAddress = styled('div')`\n  margin-bottom: ${space(0.5)};\n  font-weight: bold;\n`;\nconst CountryCode = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst IpAndLocation = styled('div')`\n  flex: 1;\n`;\n\nconst SessionPanelItem = styled(PanelItem)`\n  ${tableLayout};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ListLink from 'sentry/components/links/listLink';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {InternetProtocol} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport SessionRow from './sessionRow';\nimport {tableLayout} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  ipList: Array<InternetProtocol> | null;\n} & AsyncView['state'];\n\nclass SessionHistory extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Session History');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['ipList', '/users/me/ips/']];\n  }\n\n  renderBody() {\n    const {ipList} = this.state;\n\n    if (!ipList) {\n      return null;\n    }\n\n    const {routes, params, location} = this.props;\n    const recreateRouteProps = {routes, params, location};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink\n                to={recreateRoute('', {...recreateRouteProps, stepBack: -1})}\n                index\n              >\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('', recreateRouteProps)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        <Panel>\n          <SessionPanelHeader>\n            <div>{t('Sessions')}</div>\n            <div>{t('First Seen')}</div>\n            <div>{t('Last Seen')}</div>\n          </SessionPanelHeader>\n\n          <PanelBody>\n            {ipList.map(({id, ...ipObj}) => (\n              <SessionRow key={id} {...ipObj} />\n            ))}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default SessionHistory;\n\nconst SessionPanelHeader = styled(PanelHeader)`\n  ${tableLayout}\n  justify-content: initial;\n`;\n"],"names":["ListLink","children","className","isActive","query","to","activeClassName","index","disabled","props","router","useRouter","queryData","qs","undefined","targetLocation","pathname","target","normalizeUrl","active","StyledLi","classNames","onlyActiveOnIndex","shouldForwardProp","prop","p","theme","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","tableLayout","space","SessionRow","ipAddress","lastSeen","firstSeen","countryCode","regionCode","SessionPanelItem","IpAndLocation","IpAddress","CountryCode","StyledTimeSince","date","fontSizeRelativeSmall","TimeSince","PanelItem","SessionHistory","t","getEndpoints","renderBody","ipList","state","routes","params","location","recreateRouteProps","Fragment","tabs","underlined","recreateRoute","stepBack","SessionPanelHeader","map","id","ipObj","PanelHeader"],"sourceRoot":""}