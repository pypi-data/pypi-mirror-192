{"version":3,"file":"chunks/app_views_performance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums.tsx","webpack:///./app/utils/performance/contexts/metricsCardinality.tsx","webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/views/performance/index.tsx"],"sourcesContent":["import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilityData {\n  compatible_projects?: number[];\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilityData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilityQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilityData, {}>\n      route=\"metrics-compatibility-sums\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilitySumData {\n  sum: {\n    metrics?: number;\n    metrics_null?: number;\n    metrics_unparam?: number;\n  };\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilitySumData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilitySumsQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilitySumData, {}>\n      route=\"metrics-compatibility\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import {ComponentProps, Fragment, ReactNode, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {canUseMetricsData} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport MetricsCompatibilityQuery, {\n  MetricsCompatibilityData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuery';\nimport MetricsCompatibilitySumsQuery, {\n  MetricsCompatibilitySumData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums';\n\nimport {createDefinedContext} from './utils';\n\nconst UNPARAM_THRESHOLD = 0.01;\nconst NULL_THRESHOLD = 0.01;\n\nexport interface MetricDataSwitcherOutcome {\n  forceTransactionsOnly: boolean;\n  compatibleProjects?: number[];\n  shouldNotifyUnnamedTransactions?: boolean;\n  shouldWarnIncompatibleSDK?: boolean;\n}\nexport interface MetricsCardinalityContext {\n  isLoading: boolean;\n  outcome?: MetricDataSwitcherOutcome;\n}\n\ntype MergedMetricsData = MetricsCompatibilityData & MetricsCompatibilitySumData;\n\nconst [_Provider, _useContext, _Context] =\n  createDefinedContext<MetricsCardinalityContext>({\n    name: 'MetricsCardinalityContext',\n    strict: false,\n  });\n\n/**\n * This provider determines whether the metrics data is storing performance information correctly before we\n * make dozens of requests on pages such as performance landing and dashboards.\n */\nexport const MetricsCardinalityProvider = (props: {\n  children: ReactNode;\n  location: Location;\n  organization: Organization;\n  sendOutcomeAnalytics?: boolean;\n}) => {\n  const isUsingMetrics = canUseMetricsData(props.organization);\n\n  if (!isUsingMetrics) {\n    return (\n      <_Provider\n        value={{\n          isLoading: false,\n          outcome: {\n            forceTransactionsOnly: true,\n          },\n        }}\n      >\n        {props.children}\n      </_Provider>\n    );\n  }\n\n  const baseDiscoverProps = {\n    location: props.location,\n    orgSlug: props.organization.slug,\n    cursor: '0:0:0',\n  };\n  const eventView = EventView.fromLocation(props.location);\n  eventView.fields = [{field: 'tpm()'}];\n  const _eventView = adjustEventViewTime(eventView);\n\n  return (\n    <Fragment>\n      <MetricsCompatibilityQuery eventView={_eventView} {...baseDiscoverProps}>\n        {compatabilityResult => (\n          <MetricsCompatibilitySumsQuery eventView={_eventView} {...baseDiscoverProps}>\n            {sumsResult => {\n              const isLoading = compatabilityResult.isLoading || sumsResult.isLoading;\n              const outcome =\n                compatabilityResult.isLoading || sumsResult.isLoading\n                  ? undefined\n                  : getMetricsOutcome(\n                      compatabilityResult.tableData && sumsResult.tableData\n                        ? {\n                            ...compatabilityResult.tableData,\n                            ...sumsResult.tableData,\n                          }\n                        : null,\n                      !!compatabilityResult.error && !!sumsResult.error,\n                      props.organization\n                    );\n\n              return (\n                <Provider\n                  sendOutcomeAnalytics={props.sendOutcomeAnalytics}\n                  organization={props.organization}\n                  value={{\n                    isLoading,\n                    outcome,\n                  }}\n                >\n                  {props.children}\n                </Provider>\n              );\n            }}\n          </MetricsCompatibilitySumsQuery>\n        )}\n      </MetricsCompatibilityQuery>\n    </Fragment>\n  );\n};\n\nconst Provider = (\n  props: ComponentProps<typeof _Provider> & {\n    organization: Organization;\n    sendOutcomeAnalytics?: boolean;\n  }\n) => {\n  const fallbackFromNull = props.value.outcome?.shouldWarnIncompatibleSDK ?? false;\n  const fallbackFromUnparam =\n    props.value.outcome?.shouldNotifyUnnamedTransactions ?? false;\n  const isOnMetrics = !props.value.outcome?.forceTransactionsOnly;\n  useEffect(() => {\n    if (!props.value.isLoading && props.sendOutcomeAnalytics) {\n      trackAdvancedAnalyticsEvent('performance_views.mep.metrics_outcome', {\n        organization: props.organization,\n        is_on_metrics: isOnMetrics,\n        fallback_from_null: fallbackFromNull,\n        fallback_from_unparam: fallbackFromUnparam,\n      });\n    }\n  }, [\n    props.organization,\n    props.value.isLoading,\n    isOnMetrics,\n    fallbackFromUnparam,\n    fallbackFromNull,\n    props.sendOutcomeAnalytics,\n  ]);\n  return <_Provider {...props}>{props.children}</_Provider>;\n};\n\nexport const MetricsCardinalityConsumer = _Context.Consumer;\n\nexport const useMetricsCardinalityContext = _useContext;\n\n/**\n * Logic for picking sides of metrics vs. transactions along with the associated warnings.\n */\nfunction getMetricsOutcome(\n  dataCounts: MergedMetricsData | null,\n  hasOtherFallbackCondition: boolean,\n  organization: Organization\n) {\n  const fallbackOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: true,\n  };\n  const successOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: false,\n  };\n  const isOnFallbackThresolds = organization.features.includes(\n    'performance-mep-bannerless-ui'\n  );\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n  const compatibleProjects = dataCounts.compatible_projects;\n\n  if (hasOtherFallbackCondition) {\n    return fallbackOutcome;\n  }\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n\n  if (checkNoDataFallback(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkIncompatibleData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldWarnIncompatibleSDK: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfAllOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfPartialOtherData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      compatibleProjects,\n      forceTransactionsOnly: false,\n    };\n  }\n\n  return successOutcome;\n}\n\n/**\n * Fallback if no metrics found.\n */\nfunction checkNoDataFallback(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return !counts.metricsCount;\n}\n\n/**\n * Fallback and warn if incompatible data found (old specific SDKs).\n */\nfunction checkIncompatibleData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.nullCount / counts.metricsCount;\n    return ratio > NULL_THRESHOLD;\n  }\n  return counts.nullCount > 0;\n}\n\n/**\n * Fallback and warn about unnamed transactions (specific SDKs).\n */\nfunction checkIfAllOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount >= counts.metricsCount;\n}\n\n/**\n * Show metrics but warn about unnamed transactions.\n */\nfunction checkIfPartialOtherData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.unparamCount / counts.metricsCount;\n    return ratio > UNPARAM_THRESHOLD;\n  }\n  return counts.unparamCount > 0;\n}\n\n/**\n * Temporary function, can be removed after API changes.\n */\nfunction normalizeCounts({sum}: MergedMetricsData) {\n  try {\n    const metricsCount = Number(sum.metrics);\n    const unparamCount = Number(sum.metrics_unparam);\n    const nullCount = Number(sum.metrics_null);\n    return {\n      metricsCount,\n      unparamCount,\n      nullCount,\n    };\n  } catch (_) {\n    return {\n      metricsCount: 0,\n      unparamCount: 0,\n      nullCount: 0,\n    };\n  }\n}\n\n/**\n * Performance optimization to limit the amount of rows scanned before showing the landing page.\n */\nfunction adjustEventViewTime(eventView: EventView) {\n  const _eventView = eventView.clone();\n\n  if (!_eventView.start && !_eventView.end) {\n    if (!_eventView.statsPeriod) {\n      _eventView.statsPeriod = '1h';\n      _eventView.start = undefined;\n      _eventView.end = undefined;\n    } else {\n      const periodHours = parsePeriodToHours(_eventView.statsPeriod);\n      if (periodHours > 1) {\n        _eventView.statsPeriod = '1h';\n        _eventView.start = undefined;\n        _eventView.end = undefined;\n      }\n    }\n  }\n  return _eventView;\n}\n","import {Dispatch, ReactNode, useCallback, useReducer} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedSettingContext {\n  autoSampleState: AutoSampleState;\n  memoizationKey: string;\n  metricSettingState: MEPState | null;\n  setAutoSampleState: Dispatch<AutoSampleState>;\n  setMetricSettingState: Dispatch<MEPState>;\n  shouldQueryProvideMEPAutoParams: boolean;\n  shouldQueryProvideMEPMetricParams: boolean;\n  shouldQueryProvideMEPTransactionParams: boolean;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, _MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = _MEPSettingContext.Consumer;\n\n/**\n * These will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n * \"Unset\" should be the initial state before any queries return for the first time.\n */\nexport enum AutoSampleState {\n  unset = 'unset',\n  metrics = 'metrics',\n  transactions = 'transactions',\n}\n\n/**\n * Metrics/transactions will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n */\nexport enum MEPState {\n  auto = 'auto',\n  metricsOnly = 'metricsOnly',\n  transactionsOnly = 'transactionsOnly',\n}\n\nexport const METRIC_SETTING_PARAM = 'metricSetting';\nexport const METRIC_SEARCH_SETTING_PARAM = 'metricSearchSetting'; // TODO: Clean this up since we don't need multiple params in practice.\n\nconst storageKey = 'performance.metrics-enhanced-setting';\nexport class MEPSetting {\n  static get(): MEPState | null {\n    const value = localStorage.getItem(storageKey);\n    if (value) {\n      if (!(value in MEPState)) {\n        localStorage.removeItem(storageKey);\n        return null;\n      }\n      return MEPState[value];\n    }\n    return null;\n  }\n\n  static set(value: MEPState) {\n    localStorage.setItem(storageKey, value);\n  }\n}\n\nexport function canUseMetricsDevUI(organization: Organization) {\n  return organization.features.includes('performance-use-metrics');\n}\n\nexport function canUseMetricsData(organization: Organization) {\n  const isDevFlagOn = canUseMetricsDevUI(organization); // Forces metrics data on as well.\n  const isInternalViewOn = organization.features.includes(\n    'performance-transaction-name-only-search'\n  ); // TODO: Swap this flag out.\n\n  const samplingRolloutFlag = organization.features.includes('dynamic-sampling');\n  const isRollingOut =\n    samplingRolloutFlag && organization.features.includes('mep-rollout-flag');\n\n  return isDevFlagOn || isInternalViewOn || isRollingOut;\n}\n\nexport const MEPSettingProvider = ({\n  children,\n  location,\n  _hasMEPState,\n  forceTransactions,\n}: {\n  children: ReactNode;\n  _hasMEPState?: MEPState;\n  forceTransactions?: boolean;\n  location?: Location;\n}) => {\n  const organization = useOrganization();\n\n  const canUseMEP = canUseMetricsData(organization);\n\n  const allowedStates = [MEPState.metricsOnly, MEPState.transactionsOnly];\n  const _metricSettingFromParam = location\n    ? decodeScalar(location.query[METRIC_SETTING_PARAM])\n    : MEPState.metricsOnly;\n  let defaultMetricsState = MEPState.metricsOnly;\n\n  if (forceTransactions) {\n    defaultMetricsState = MEPState.transactionsOnly;\n  }\n\n  const metricSettingFromParam =\n    allowedStates.find(s => s === _metricSettingFromParam) ?? defaultMetricsState;\n\n  const isControlledMEP = typeof _hasMEPState !== 'undefined';\n\n  const [_metricSettingState, _setMetricSettingState] = useReducer(\n    (_: MEPState, next: MEPState) => next,\n    metricSettingFromParam\n  );\n\n  const setMetricSettingState = useCallback(\n    (settingState: MEPState) => {\n      if (!location) {\n        return;\n      }\n      browserHistory.replace({\n        ...location,\n        query: {\n          ...location.query,\n          [METRIC_SETTING_PARAM]: settingState,\n        },\n      });\n      _setMetricSettingState(settingState);\n    },\n    [location, _setMetricSettingState]\n  );\n\n  const [autoSampleState, setAutoSampleState] = useReducer(\n    (_: AutoSampleState, next: AutoSampleState) => next,\n    AutoSampleState.unset\n  );\n\n  const metricSettingState = isControlledMEP ? _hasMEPState : _metricSettingState;\n\n  const shouldQueryProvideMEPAutoParams =\n    canUseMEP && metricSettingState === MEPState.auto;\n  const shouldQueryProvideMEPMetricParams =\n    canUseMEP && metricSettingState === MEPState.metricsOnly;\n  const shouldQueryProvideMEPTransactionParams =\n    canUseMEP && metricSettingState === MEPState.transactionsOnly;\n\n  const memoizationKey = `${metricSettingState}`;\n\n  return (\n    <_MEPSettingProvider\n      value={{\n        autoSampleState,\n        metricSettingState,\n        shouldQueryProvideMEPAutoParams,\n        shouldQueryProvideMEPMetricParams,\n        shouldQueryProvideMEPTransactionParams,\n        memoizationKey,\n        setMetricSettingState,\n        setAutoSampleState,\n      }}\n    >\n      {children}\n    </_MEPSettingProvider>\n  );\n};\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import {QueryClient, QueryClientProvider} from '@tanstack/react-query';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  children: React.ReactChildren;\n  location: Location;\n  organization: Organization;\n};\n\nconst queryClient = new QueryClient();\n\nfunction PerformanceContainer({organization, location, children}: Props) {\n  function renderNoAccess() {\n    return (\n      <Layout.Page withPadding>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </Layout.Page>\n    );\n  }\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:performance-page\"\n      features={['performance-view']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <NoProjectMessage organization={organization}>\n        <QueryClientProvider client={queryClient}>\n          <MetricsCardinalityProvider location={location} organization={organization}>\n            <MEPSettingProvider>{children}</MEPSettingProvider>\n          </MetricsCardinalityProvider>\n        </QueryClientProvider>\n      </NoProjectMessage>\n    </Feature>\n  );\n}\n\nexport default withOrganization(PerformanceContainer);\n"],"names":["getRequestPayload","eventView","location","omit","getEventsAPIPayload","MetricsCompatibilityQuery","children","props","route","tableData","rest","MetricsCompatibilitySumsQuery","_Provider","_useContext","_Context","createDefinedContext","name","strict","MetricsCardinalityProvider","canUseMetricsData","organization","value","isLoading","outcome","forceTransactionsOnly","baseDiscoverProps","orgSlug","slug","cursor","EventView","fields","field","_eventView","clone","start","end","statsPeriod","parsePeriodToHours","undefined","adjustEventViewTime","Fragment","compatabilityResult","sumsResult","dataCounts","hasOtherFallbackCondition","fallbackOutcome","isOnFallbackThresolds","features","includes","compatibleProjects","compatible_projects","normalizeCounts","metricsCount","checkNoDataFallback","counts","nullCount","checkIncompatibleData","shouldWarnIncompatibleSDK","unparamCount","checkIfAllOtherData","shouldNotifyUnnamedTransactions","checkIfPartialOtherData","getMetricsOutcome","error","Provider","sendOutcomeAnalytics","fallbackFromNull","fallbackFromUnparam","isOnMetrics","useEffect","trackAdvancedAnalyticsEvent","is_on_metrics","fallback_from_null","fallback_from_unparam","Consumer","useMetricsCardinalityContext","sum","Number","metrics","metrics_unparam","metrics_null","_","_MEPSettingProvider","_useMEPSettingContext","_MEPSettingContext","MEPConsumer","AutoSampleState","MEPState","METRIC_SETTING_PARAM","METRIC_SEARCH_SETTING_PARAM","isDevFlagOn","canUseMetricsDevUI","isInternalViewOn","isRollingOut","MEPSettingProvider","_hasMEPState","forceTransactions","canUseMEP","useOrganization","allowedStates","metricsOnly","transactionsOnly","_metricSettingFromParam","decodeScalar","query","defaultMetricsState","metricSettingFromParam","find","s","isControlledMEP","_metricSettingState","_setMetricSettingState","useReducer","next","setMetricSettingState","useCallback","settingState","browserHistory","autoSampleState","setAutoSampleState","unset","metricSettingState","shouldQueryProvideMEPAutoParams","auto","shouldQueryProvideMEPMetricParams","shouldQueryProvideMEPTransactionParams","memoizationKey","useMEPSettingContext","queryClient","QueryClient","PerformanceContainer","hookName","renderDisabled","withPadding","type","t","client","withOrganization"],"sourceRoot":""}