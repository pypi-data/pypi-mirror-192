{"version":3,"file":"chunks/app_components_modals_createReleaseIntegrationModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"6iBAoBA,SAASA,EAA8B,GAQA,IARA,KACrCC,EAAI,OACJC,EAAM,WACNC,EAAU,QACVC,EAAO,aACPC,EAAY,gBACZC,EAAe,SACfC,GACmC,EACnC,MAAMC,GAAMC,EAAAA,EAAAA,KACNC,EAAkB,CACtB,CACEC,KAAM,OACNC,KAAM,SAENC,YAAc,GAAET,EAAQU,2BACxBC,OAAOC,EAAAA,EAAAA,GAAE,QACTC,MAAM,QAAC,EAAAC,SAAQ,WAAEF,EAAAA,EAAAA,GAAE,8BACnBG,aAAe,GAAEf,EAAQU,2BACzBM,UAAU,IAGd,OACE,QAAC,EAAAF,SAAQ,YACP,QAAChB,EAAM,WACL,wBAAKc,EAAAA,EAAAA,GAAE,qCAET,QAACf,EAAI,WACH,QAAC,IAAI,CACHM,SAAU,KACRA,IACAJ,GAAY,EAEdkB,SAAUC,MAAOC,EAAMC,EAAiBC,KACtC,IAyBED,QAxB0BhB,EAAIkB,eAAe,gBAAiB,CAC5DC,OAAQ,OACRJ,KAAM,IACDA,EACHlB,aAAcA,EAAaS,KAC3Bc,aAAa,EACbC,YAAY,EACZC,OAAQ,CACN,eACA,gBACA,YACA,aACA,mBACA,aACA,cACA,WACA,YACA,cACA,gBAEFC,eAAe,EACfC,SAAW,0EAAyE5B,EAAQU,yJAMlG,CAFE,MAAOmB,GACPR,EAAcQ,EAChB,GAEFT,gBAAiBD,IACfjB,EAAgBiB,IAChBW,EAAAA,EAAAA,KAAkBlB,EAAAA,EAAAA,GAAE,gCACpBb,GAAY,EAEdsB,cAAe,MACbU,EAAAA,EAAAA,KAAgBnB,EAAAA,EAAAA,GAAE,yBAAyB,EAC3C,SAEDN,EAAO0B,KAAIC,IACV,QAAC,IAAe,CAAkBA,MAAOA,GAAnBA,EAAM1B,cAMxC,CAhFSX,EAA6B,4CAkFtC,S,qHCpDA,QAvBA,WAAmE,IAAnD,gBAACsC,EAAiB9B,IAAK+B,GAAwB,UAAH,6CAAG,CAAC,EAC9D,MAAMC,GAAWC,EAAAA,EAAAA,eAGQC,IAArBF,EAASG,cAAyCD,IAAhBH,IACpCC,EAASG,QAAU,IAAIC,EAAAA,IAIzB,MAAMpC,EAAM+B,GAAeC,EAASG,QAG9BE,GAAiBC,EAAAA,EAAAA,cAAY,KAC5BR,GACH9B,EAAIuC,OACN,GACC,CAACvC,EAAK8B,IAIT,OAFAU,EAAAA,EAAAA,YAAU,IAAMH,GAAgB,CAACA,IAE1BrC,CACT,C","sources":["webpack:///./app/components/modals/createReleaseIntegrationModal.tsx","webpack:///./app/utils/useApi.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Form from 'sentry/components/forms/form';\nimport {Field} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\nexport type CreateReleaseIntegrationModalOptions = {\n  onCancel: () => void;\n  onCreateSuccess: (integration) => void;\n  organization: Organization;\n  project: Project;\n};\ntype CreateReleaseIntegrationModalProps = CreateReleaseIntegrationModalOptions &\n  ModalRenderProps;\n\nfunction CreateReleaseIntegrationModal({\n  Body,\n  Header,\n  closeModal,\n  project,\n  organization,\n  onCreateSuccess,\n  onCancel,\n}: CreateReleaseIntegrationModalProps) {\n  const api = useApi();\n  const fields: Field[] = [\n    {\n      name: 'name',\n      type: 'string',\n\n      placeholder: `${project.slug} Release Integration`,\n      label: t('Name'),\n      help: <Fragment>{t('Name of new integration.')}</Fragment>,\n      defaultValue: `${project.slug} Release Integration`,\n      required: true,\n    },\n  ];\n  return (\n    <Fragment>\n      <Header>\n        <h3>{t('Create a Release Integration')}</h3>\n      </Header>\n      <Body>\n        <Form\n          onCancel={() => {\n            onCancel();\n            closeModal();\n          }}\n          onSubmit={async (data, onSubmitSuccess, onSubmitError) => {\n            try {\n              const integration = await api.requestPromise('/sentry-apps/', {\n                method: 'POST',\n                data: {\n                  ...data,\n                  organization: organization.slug,\n                  isAlertable: false,\n                  isInternal: true,\n                  scopes: [\n                    'project:read',\n                    'project:write',\n                    'team:read',\n                    'team:write',\n                    'project:releases',\n                    'event:read',\n                    'event:write',\n                    'org:read',\n                    'org:write',\n                    'member:read',\n                    'member:write',\n                  ],\n                  verifyInstall: false,\n                  overview: `This internal integration was auto-generated to setup Releases for the ${project.slug} project. It is needed to provide the token used to create a release. If this integration is deleted, your Releases workflow will stop working!`,\n                },\n              });\n              onSubmitSuccess(integration);\n            } catch (error) {\n              onSubmitError(error);\n            }\n          }}\n          onSubmitSuccess={data => {\n            onCreateSuccess(data);\n            addSuccessMessage(t('Created Release Integration'));\n            closeModal();\n          }}\n          onSubmitError={() => {\n            addErrorMessage(t('Something went wrong!'));\n          }}\n        >\n          {fields.map(field => (\n            <FieldFromConfig key={field.name} field={field} />\n          ))}\n        </Form>\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default CreateReleaseIntegrationModal;\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n"],"names":["CreateReleaseIntegrationModal","Body","Header","closeModal","project","organization","onCreateSuccess","onCancel","api","useApi","fields","name","type","placeholder","slug","label","t","help","Fragment","defaultValue","required","onSubmit","async","data","onSubmitSuccess","onSubmitError","requestPromise","method","isAlertable","isInternal","scopes","verifyInstall","overview","error","addSuccessMessage","addErrorMessage","map","field","persistInFlight","providedApi","localApi","useRef","undefined","current","Client","clearOnUnmount","useCallback","clear","useEffect"],"sourceRoot":""}