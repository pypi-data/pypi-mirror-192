{"version":3,"file":"chunks/app_views_settings_organizationAuditLog_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/activity/item/avatar.tsx","webpack:///./app/views/settings/organizationAuditLog/auditLogList.tsx","webpack:///./app/views/settings/organizationAuditLog/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconSentry} from 'sentry/icons';\nimport {AvatarUser} from 'sentry/types';\n\ntype Props = {\n  type: 'system' | 'user';\n  className?: string;\n  size?: number;\n  user?: AvatarUser;\n};\n\nfunction ActivityAvatar({className, type, user, size = 38}: Props) {\n  if (user) {\n    return <UserAvatar user={user} size={size} className={className} />;\n  }\n\n  if (type === 'system') {\n    // Return Sentry avatar\n    return (\n      <SystemAvatar className={className} size={size}>\n        <StyledIconSentry size=\"md\" />\n      </SystemAvatar>\n    );\n  }\n\n  return (\n    <Placeholder\n      className={className}\n      width={`${size}px`}\n      height={`${size}px`}\n      shape=\"circle\"\n    />\n  );\n}\n\nexport default ActivityAvatar;\n\ntype SystemAvatarProps = {\n  size: number;\n};\n\nconst SystemAvatar = styled('span')<SystemAvatarProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  background-color: ${p => p.theme.textColor};\n  color: ${p => p.theme.background};\n  border-radius: 50%;\n`;\n\nconst StyledIconSentry = styled(IconSentry)`\n  padding-bottom: 3px;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport ActivityAvatar from 'sentry/components/activity/item/avatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DateTime from 'sentry/components/dateTime';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AuditLog, Organization, User} from 'sentry/types';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport {knowDynamicSamplingBiases} from 'sentry/views/settings/project/dynamicSampling/dynamicSampling';\n\nconst avatarStyle = {\n  width: 36,\n  height: 36,\n  marginRight: 8,\n};\n\nconst getAvatarDisplay = (logEntryUser: User | undefined) => {\n  // Display Sentry's avatar for system or superuser-initiated events\n  if (\n    logEntryUser?.isSuperuser ||\n    (logEntryUser?.name === 'Sentry' && logEntryUser?.email === undefined)\n  ) {\n    return <SentryAvatar type=\"system\" size={36} />;\n  }\n  // Display user's avatar for non-superusers-initiated events\n  if (logEntryUser !== undefined) {\n    return <UserAvatar style={avatarStyle} user={logEntryUser} />;\n  }\n  return null;\n};\n\nconst addUsernameDisplay = (logEntryUser: User | undefined) => {\n  if (logEntryUser?.isSuperuser) {\n    return (\n      <Name data-test-id=\"actor-name\">\n        {logEntryUser.name}\n        <StaffTag>{t('Sentry Staff')}</StaffTag>\n      </Name>\n    );\n  }\n  if (logEntryUser !== undefined) {\n    return <Name data-test-id=\"actor-name\">{logEntryUser.name}</Name>;\n  }\n  return null;\n};\n\nfunction AuditNote({\n  entry,\n  orgSlug,\n}: {\n  entry: NonNullable<AuditLog>;\n  orgSlug: Organization['slug'];\n}) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === String(entry.data.id));\n\n  if (!project) {\n    return <Note>{entry.note}</Note>;\n  }\n\n  if (entry.event === 'project.create') {\n    return (\n      <Note>\n        {tct('Created project [projectSettingsLink]', {\n          projectSettingsLink: (\n            <Link to={`/settings/${orgSlug}/projects/${project.slug}/`}>\n              {entry.data.slug}\n            </Link>\n          ),\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'project.edit') {\n    if (entry.data.old_slug && entry.data.new_slug) {\n      return (\n        <Note>\n          {tct('Renamed project slug from [old-slug] to [new-slug]', {\n            'old-slug': entry.data.old_slug,\n            'new-slug': (\n              <Link to={`/settings/${orgSlug}/projects/${entry.data.new_slug}/`}>\n                {entry.data.new_slug}\n              </Link>\n            ),\n          })}\n        </Note>\n      );\n    }\n\n    return (\n      <Note>\n        {tct('Edited project [projectSettingsLink] [note]', {\n          projectSettingsLink: (\n            <Link to={`/settings/${orgSlug}/projects/${project.slug}/`}>\n              {entry.data.slug}\n            </Link>\n          ),\n          note: entry.note.replace('edited project settings ', ''),\n        })}\n      </Note>\n    );\n  }\n\n  if (\n    entry.event === 'sampling_priority.enabled' &&\n    knowDynamicSamplingBiases[entry.data.name]\n  ) {\n    return (\n      <Note>\n        {tct(\n          'Enabled dynamic sampling priority \"[biasLabel]\" in project [samplingInProjectSettingsLink]',\n          {\n            samplingInProjectSettingsLink: (\n              <Link\n                to={`/settings/${orgSlug}/projects/${project.slug}/dynamic-sampling/`}\n              >\n                {entry.data.slug}\n              </Link>\n            ),\n            biasLabel: knowDynamicSamplingBiases[entry.data.name].label,\n          }\n        )}\n      </Note>\n    );\n  }\n\n  if (\n    entry.event === 'sampling_priority.disabled' &&\n    knowDynamicSamplingBiases[entry.data.name]\n  ) {\n    return (\n      <Note>\n        {tct(\n          'Disabled dynamic sampling priority \"[biasLabel]\" in project [samplingInProjectSettingsLink]',\n          {\n            samplingInProjectSettingsLink: (\n              <Link\n                to={`/settings/${orgSlug}/projects/${project.slug}/dynamic-sampling/`}\n              >\n                {entry.data.slug}\n              </Link>\n            ),\n            biasLabel: knowDynamicSamplingBiases[entry.data.name].label,\n          }\n        )}\n      </Note>\n    );\n  }\n\n  return <Note>{entry.note}</Note>;\n}\n\ntype Props = {\n  entries: AuditLog[] | null;\n  eventType: string | undefined;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  onCursor: CursorHandler | undefined;\n  onEventSelect: (value: string) => void;\n  pageLinks: string | null;\n};\n\nconst AuditLogList = ({\n  isLoading,\n  pageLinks,\n  entries,\n  eventType,\n  eventTypes,\n  onCursor,\n  onEventSelect,\n}: Props) => {\n  const is24Hours = shouldUse24Hours();\n  const organization = useOrganization();\n  const hasEntries = entries && entries.length > 0;\n  const ipv4Length = 15;\n\n  const eventOptions = eventTypes?.map(type => ({\n    label: type,\n    value: type,\n  }));\n\n  const action = (\n    <EventSelector\n      clearable\n      isDisabled={isLoading}\n      name=\"eventFilter\"\n      value={eventType}\n      placeholder={t('Select Action: ')}\n      options={eventOptions}\n      onChange={options => {\n        onEventSelect(options?.value);\n      }}\n    />\n  );\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Audit Log')} action={action} />\n      <PanelTable\n        headers={[t('Member'), t('Action'), t('IP'), t('Time')]}\n        isEmpty={!hasEntries && entries?.length === 0}\n        emptyMessage={t('No audit entries available')}\n        isLoading={isLoading}\n      >\n        {(entries ?? []).map(entry => {\n          if (!entry) {\n            return null;\n          }\n          return (\n            <Fragment key={entry.id}>\n              <UserInfo>\n                <div>{getAvatarDisplay(entry.actor)}</div>\n                <NameContainer>\n                  {addUsernameDisplay(entry.actor)}\n                  <AuditNote entry={entry} orgSlug={organization.slug} />\n                </NameContainer>\n              </UserInfo>\n              <FlexCenter>\n                <MonoDetail>{entry.event}</MonoDetail>\n              </FlexCenter>\n              <FlexCenter>\n                {entry.ipAddress && (\n                  <IpAddressOverflow>\n                    <Tooltip\n                      title={entry.ipAddress}\n                      disabled={entry.ipAddress.length <= ipv4Length}\n                    >\n                      <MonoDetail>{entry.ipAddress}</MonoDetail>\n                    </Tooltip>\n                  </IpAddressOverflow>\n                )}\n              </FlexCenter>\n              <TimestampInfo>\n                <DateTime dateOnly date={entry.dateCreated} />\n                <DateTime\n                  timeOnly\n                  format={is24Hours ? 'HH:mm zz' : 'LT zz'}\n                  date={entry.dateCreated}\n                />\n              </TimestampInfo>\n            </Fragment>\n          );\n        })}\n      </PanelTable>\n      {pageLinks && <Pagination pageLinks={pageLinks} onCursor={onCursor} />}\n    </div>\n  );\n};\n\nconst SentryAvatar = styled(ActivityAvatar)`\n  margin-right: ${space(1)};\n`;\n\nconst Name = styled('strong')`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StaffTag = styled(Tag)`\n  padding: ${space(1)};\n`;\n\nconst EventSelector = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst UserInfo = styled('div')`\n  display: flex;\n  align-items: center;\n  line-height: 1.2;\n  font-size: ${p => p.theme.fontSizeSmall};\n  min-width: 250px;\n`;\n\nconst NameContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Note = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  word-break: break-word;\n  margin-top: ${space(0.5)};\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IpAddressOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  min-width: 90px;\n`;\n\nconst MonoDetail = styled('code')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: no-wrap;\n`;\n\nconst TimestampInfo = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto;\n  gap: ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default AuditLogList;\n","import {Fragment, useCallback, useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {CursorHandler} from 'sentry/components/pagination';\nimport {AuditLog} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport AuditLogList from './auditLogList';\n\ntype Props = {\n  location: Location;\n};\n\ntype State = {\n  entryList: AuditLog[] | null;\n  entryListPageLinks: string | null;\n  eventType: string | undefined;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  currentCursor?: string;\n};\n\nfunction OrganizationAuditLog({location}: Props) {\n  const [state, setState] = useState<State>({\n    entryList: [],\n    entryListPageLinks: null,\n    eventType: decodeScalar(location.query.event),\n    eventTypes: [],\n    isLoading: true,\n  });\n  const organization = useOrganization();\n  const api = useApi();\n\n  const handleCursor: CursorHandler = resultsCursor => {\n    setState(prevState => ({\n      ...prevState,\n      currentCursor: resultsCursor,\n    }));\n  };\n\n  useEffect(() => {\n    // Watch the location for changes so we can re-fetch data.\n    const eventType = decodeScalar(location.query.event);\n    setState(prevState => ({...prevState, eventType}));\n  }, [location.query]);\n\n  const fetchAuditLogData = useCallback(async () => {\n    setState(prevState => ({...prevState, isLoading: true}));\n\n    try {\n      const payload = {cursor: state.currentCursor, event: state.eventType};\n      if (!payload.cursor) {\n        delete payload.cursor;\n      }\n      if (!payload.event) {\n        delete payload.event;\n      }\n      setState(prevState => ({...prevState, isLoading: true}));\n      const [data, _, response] = await api.requestPromise(\n        `/organizations/${organization.slug}/audit-logs/`,\n        {\n          method: 'GET',\n          includeAllArgs: true,\n          query: payload,\n        }\n      );\n      setState(prevState => ({\n        ...prevState,\n        entryList: data.rows,\n        eventTypes: data.options.sort(),\n        isLoading: false,\n        entryListPageLinks: response?.getResponseHeader('Link') ?? null,\n      }));\n    } catch (err) {\n      if (err.status !== 401 && err.status !== 403) {\n        Sentry.captureException(err);\n      }\n      setState(prevState => ({\n        ...prevState,\n        isLoading: false,\n      }));\n      addErrorMessage('Unable to load audit logs.');\n    }\n  }, [api, organization.slug, state.currentCursor, state.eventType]);\n\n  useEffect(() => {\n    fetchAuditLogData();\n  }, [fetchAuditLogData]);\n\n  const handleEventSelect = (value: string) => {\n    setState(prevState => ({\n      ...prevState,\n      eventType: value,\n    }));\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {...location.query, event: value},\n    });\n  };\n\n  return (\n    <Fragment>\n      <AuditLogList\n        entries={state.entryList}\n        pageLinks={state.entryListPageLinks}\n        eventType={state.eventType}\n        eventTypes={state.eventTypes}\n        onEventSelect={handleEventSelect}\n        isLoading={state.isLoading}\n        onCursor={handleCursor}\n      />\n    </Fragment>\n  );\n}\n\nexport default OrganizationAuditLog;\n"],"names":["ActivityAvatar","className","type","user","size","SystemAvatar","StyledIconSentry","width","height","shape","p","theme","textColor","background","IconSentry","avatarStyle","marginRight","addUsernameDisplay","logEntryUser","isSuperuser","Name","name","StaffTag","t","undefined","AuditNote","entry","orgSlug","projects","useProjects","project","find","id","String","data","event","Note","tct","projectSettingsLink","to","slug","old_slug","new_slug","note","replace","knowDynamicSamplingBiases","samplingInProjectSettingsLink","biasLabel","label","AuditLogList","isLoading","pageLinks","entries","eventType","eventTypes","onCursor","onEventSelect","is24Hours","shouldUse24Hours","organization","useOrganization","hasEntries","length","eventOptions","map","value","action","EventSelector","clearable","isDisabled","placeholder","options","onChange","title","headers","isEmpty","emptyMessage","Fragment","UserInfo","actor","email","SentryAvatar","style","NameContainer","FlexCenter","MonoDetail","ipAddress","IpAddressOverflow","disabled","TimestampInfo","dateOnly","date","dateCreated","timeOnly","format","space","fontSizeMedium","Tag","SelectControl","fontSizeSmall","overflowEllipsis","OrganizationAuditLog","location","state","setState","useState","entryList","entryListPageLinks","decodeScalar","query","api","useApi","useEffect","prevState","fetchAuditLogData","useCallback","async","payload","cursor","currentCursor","_","response","requestPromise","method","includeAllArgs","rows","sort","getResponseHeader","err","status","Sentry","addErrorMessage","browserHistory","pathname","resultsCursor"],"sourceRoot":""}