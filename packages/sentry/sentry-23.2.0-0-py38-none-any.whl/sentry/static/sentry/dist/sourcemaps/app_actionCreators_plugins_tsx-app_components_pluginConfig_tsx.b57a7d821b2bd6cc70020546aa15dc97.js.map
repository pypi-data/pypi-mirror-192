{"version":3,"file":"chunks/app_actionCreators_plugins_tsx-app_components_pluginConfig_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/components/pluginConfig.tsx","webpack:///./app/stores/pluginsStore.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginsStore.onUpdate(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginsStore.onUpdateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginsStore.onUpdateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginsStore.onFetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginsStore.onFetchAllSuccess(data, {\n        pageLinks: resp?.getResponseHeader('Link') ?? undefined,\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginsStore.onFetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport plugins from 'sentry/plugins';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  data: Plugin;\n  onDisablePlugin: (data: Plugin) => void;\n  organization: Organization;\n  project: Project;\n  enabled?: boolean;\n};\n\ntype State = {\n  testResults: string;\n  loading?: boolean;\n};\n\nclass PluginConfig extends Component<Props, State> {\n  static defaultProps = {\n    onDisablePlugin: () => {},\n  };\n\n  state: State = {\n    loading: !plugins.isLoaded(this.props.data),\n    testResults: '',\n  };\n\n  componentDidMount() {\n    this.loadPlugin(this.props.data);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    this.loadPlugin(nextProps.data);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !isEqual(nextState, this.state) || !isEqual(nextProps.data, this.props.data);\n  }\n\n  loadPlugin(data: Plugin) {\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        plugins.load(data, () => {\n          this.setState({loading: false});\n        });\n      }\n    );\n  }\n\n  getPluginEndpoint() {\n    const {organization, project, data} = this.props;\n    return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;\n  }\n\n  handleDisablePlugin = () => {\n    this.props.onDisablePlugin(this.props.data);\n  };\n\n  handleTestPlugin = async () => {\n    this.setState({testResults: ''});\n    addLoadingMessage(t('Sending test...'));\n\n    try {\n      const data = await this.props.api.requestPromise(this.getPluginEndpoint(), {\n        method: 'POST',\n        data: {\n          test: true,\n        },\n      });\n\n      this.setState({testResults: JSON.stringify(data.detail)});\n      addSuccessMessage(t('Test Complete!'));\n    } catch (_err) {\n      addErrorMessage(\n        t('An unexpected error occurred while testing your plugin. Please try again.')\n      );\n    }\n  };\n\n  createMarkup() {\n    return {__html: this.props.data.doc};\n  }\n\n  render() {\n    const {data} = this.props;\n    // If passed via props, use that value instead of from `data`\n    const enabled =\n      typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;\n\n    return (\n      <Panel\n        className={`plugin-config ref-plugin-config-${data.id}`}\n        data-test-id=\"plugin-config\"\n      >\n        <PanelHeader hasButtons>\n          <PluginName>\n            <StyledPluginIcon pluginId={data.id} />\n            <span>{data.name}</span>\n          </PluginName>\n\n          {data.canDisable && enabled && (\n            <Actions>\n              {data.isTestable && (\n                <TestPluginButton onClick={this.handleTestPlugin} size=\"sm\">\n                  {t('Test Plugin')}\n                </TestPluginButton>\n              )}\n              <Button size=\"sm\" onClick={this.handleDisablePlugin}>\n                {t('Disable')}\n              </Button>\n            </Actions>\n          )}\n        </PanelHeader>\n\n        {data.status === 'beta' && (\n          <PanelAlert type=\"warning\">\n            {t('This plugin is considered beta and may change in the future.')}\n          </PanelAlert>\n        )}\n\n        {this.state.testResults !== '' && (\n          <PanelAlert type=\"info\">\n            <strong>Test Results</strong>\n            <div>{this.state.testResults}</div>\n          </PanelAlert>\n        )}\n\n        <StyledPanelBody>\n          <div dangerouslySetInnerHTML={this.createMarkup()} />\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : (\n            plugins.get(data).renderSettings({\n              organization: this.props.organization,\n              project: this.props.project,\n            })\n          )}\n        </StyledPanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport {PluginConfig};\nexport default withApi(PluginConfig);\n\nconst PluginName = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n`;\nconst TestPluginButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n  padding-bottom: 0;\n`;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Plugin} from 'sentry/types';\n\ninterface InternalDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\ninterface PluginStoreDefinition extends StoreDefinition, InternalDefinition {\n  onFetchAll: (options?: {resetLoading?: boolean}) => void;\n  onFetchAllError: (err) => void;\n  onFetchAllSuccess: (data: Plugin[], links: {pageLinks?: string}) => void;\n\n  onUpdate: (id: string, updateObj: Partial<Plugin>) => void;\n  onUpdateError: (id: string, _updateObj: Partial<Plugin>, err) => void;\n  onUpdateSuccess: (id: string, _updateObj: Partial<Plugin>) => void;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.reset();\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data, {pageLinks}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(storeConfig);\nexport default PluginStore;\n"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginsStore","request","requestPromise","then","catch","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","_","pageLinks","getResponseHeader","undefined","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","PluginConfig","Component","loading","plugins","this","props","testResults","onDisablePlugin","async","setState","getPluginEndpoint","test","JSON","stringify","_err","componentDidMount","loadPlugin","UNSAFE_componentWillReceiveProps","nextProps","shouldComponentUpdate","nextState","isEqual","state","organization","project","slug","id","createMarkup","__html","doc","render","className","hasButtons","PluginName","StyledPluginIcon","name","canDisable","Actions","isTestable","TestPluginButton","onClick","handleTestPlugin","size","handleDisablePlugin","status","type","StyledPanelBody","dangerouslySetInnerHTML","renderSettings","withApi","PluginIcon","space","Button","PanelBody","defaultState","error","storeConfig","updating","Map","reset","getInitialState","getState","_plugins","Array","from","values","init","triggerState","trigger","onFetchAll","resetLoading","onFetchAllSuccess","map","plugin","onFetchAllError","onUpdate","updateObj","get","newPlugin","set","onUpdateSuccess","_updateObj","delete","onUpdateError","origPlugin","createStore"],"sourceRoot":""}