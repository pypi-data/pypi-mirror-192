{"version":3,"file":"chunks/app_views_settings_project_dynamicSampling_dynamicSampling_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qaAaA,SAASA,EAAgB,GAOf,IAPe,OACvBC,EAAS,CAAC,aAAY,QACtBC,GAAUC,EAAAA,EAAAA,GACR,2FACD,aACDC,KACGC,GACG,EACN,OACE,QAAC,IAAM,CAACJ,OAAQA,EAAQG,aAAcA,EAAa,SAChD,QAAC,UAACE,GAAU,SACVA,IACC,QAAC,KAAK,CAAC,eAAa,uBAAuBC,KAAK,UAAUC,UAAQ,KAAKH,EAAK,SACzEH,GAEJ,GAIT,CAnBSF,EAAe,8BAqBxB,S,moBClCO,IAAKS,EAAuB,IAY9BC,EAsBAC,GA7BJ,SALWF,GAAAA,EAAuB,uCAAvBA,EAAuB,2CAAvBA,EAAuB,8CAAvBA,EAAuB,0CAKlC,CALWA,IAAAA,EAAuB,KAYL,SAAzBC,GAAAA,EAAyB,UAAzBA,EAAyB,SAAzBA,IAAAA,EAAyB,KAsBF,SAAvBC,GAAAA,EAAuB,cAAvBA,EAAuB,2BAAvBA,IAAAA,EAAuB,K,ICtBvBC,E,gtBAA0B,SAA1BA,GAAAA,EAA0B,oCAA1BA,EAA0B,wBAA1BA,EAA0B,eAA1BA,IAAAA,EAA0B,KAkB/B,MAAMC,EAA2B,CAC/BC,oBAAqB,GACrBC,2BAA4B,CAC1B,CACEC,OAAOb,EAAAA,EAAAA,GAAE,uBACTc,MAAOL,EAA2BM,iBAClCC,SAAS,GAEX,CACEH,OAAOb,EAAAA,EAAAA,GAAE,iBACTc,MAAOL,EAA2BQ,WAClCD,SAAS,GAEX,CACEH,OAAOb,EAAAA,EAAAA,GAAE,SACTc,MAAOL,EAA2BS,MAClCF,SAAS,IAGbG,8BAA+B,IAGjC,SAASC,EAAsB,GAQ5B,IAR4B,QAC7BC,EAAO,SACPC,EAAQ,eACRC,GAKD,EACC,MAAMC,GAAcC,EAAAA,EAAAA,cAClB,CAACC,EAAmBV,KAClB,MAAMW,EAAaN,EAAQO,KAAIC,GACzBA,EAAOf,QAAUY,EAAUZ,MACtB,IACFe,EACHb,WAGGa,IAGTP,EAASK,EAAW,GAEtB,CAACL,EAAUD,IAGb,OACE,QAAC,EAAAS,SAAQ,UACNT,EAAQO,KAAIC,GACU,UAAjBA,EAAOf,OAEP,QAACiB,EAA0B,YACzB,QAAC,IAAQ,CAACT,SAAUU,GAAKR,EAAYK,EAAQG,EAAEC,OAAOjB,WACrDa,EAAOhB,MACPU,IAH8BM,EAAOf,QAS1C,QAACoB,EAAc,YACb,QAAC,IAAQ,CACPlB,QAASa,EAAOb,QAChBM,SAAUU,GAAKR,EAAYK,EAAQG,EAAEC,OAAOjB,WAE7Ca,EAAOhB,QALWgB,EAAOf,UAWtC,CAEO,SAASqB,IACd,MAAMC,EAAmB,gCAA+BC,EAAAA,EAAAA,IAAgB,QAAQC,QAEhF,OACE,QAAC,IAAe,CACdC,YAAY,mBACZ7B,YAAaA,EACb8B,YAAa,CACXC,SAAU,UACVC,KAAM,MACN,SAED,IAAkD,IAAjD,OAACC,EAAM,KAAEC,EAAI,OAAEC,EAAM,MAAEC,EAAK,cAAEC,GAAc,EAC5C,OACE,QAAC,EAAAjB,SAAQ,YACP,QAACa,EAAM,WAAE3C,EAAAA,EAAAA,GAAE,sBACX,QAAC4C,EAAI,CAACI,uBAAuB,EAAM,WACjC,QAAC,IAAU,CACTC,OAAO,QAACC,EAAK,WAAElD,EAAAA,EAAAA,GAAE,2CACjBmD,SAAO,EACPC,QAAQ,EACRC,0BAAwB,YAExB,QAAC,IAAQ,CACPC,KAAK,yBACLxC,MAAOgC,EAAMnC,oBACb4C,KAAM,EACNC,UAAQ,EACRlC,SAAUmC,GACRV,EAAc,sBAAuBU,EAAMxB,OAAOnB,YAIxD,QAAC,IAAU,CACTmC,OACE,QAACC,EAAK,WACHlD,EAAAA,EAAAA,GACC,+EAINmD,SAAO,EACPC,QAAQ,EACRC,0BAAwB,YAExB,QAACjC,EAAqB,CACpBC,QAASyB,EAAMlC,2BACfU,SAAUoC,IAENA,EAA8BC,MAC5BC,GACEA,EAA4B9C,QAC1BL,EAA2BS,QACW,IAAxC0C,EAA4B5C,WAGhC+B,EAAc,gCAAiC,IAEjDA,EACE,6BACAW,EACD,EAEHnC,gBACE,QAACsC,EAAc,CACbT,QAAQ,EACRE,KAAK,gCACLD,0BAAwB,EACxBF,SAAO,EACPW,SAAUhB,EAAMlC,2BAA2B+C,MACzCI,GACEA,EAAyBjD,QACvBL,EAA2BS,QACQ,IAArC6C,EAAyB/C,UAE7BgD,QAASP,GAASA,EAAMQ,kBACxBnD,MAAOgC,EAAM3B,8BACbG,SAAUR,GACRiC,EAAc,gCAAiCjC,GAEjDoD,aAAalE,EAAAA,EAAAA,GAAE,qDAMzB,QAAC6C,EAAM,CACLsB,uBACGrB,EAAMnC,oBAAoByD,QAC3BtB,EAAMlC,2BAA2ByD,OAC/BN,IAAiE,IAArCA,EAAyB/C,WAEnDhB,EAAAA,EAAAA,GAAE,4CACFsE,EAENC,gBAAiB,CACfC,SAAU,CACRC,SAAU,CACR9D,oBAAqBmC,EAAMnC,qBAAuB,KAClDC,2BACEkC,EAAMlC,2BACH8D,QACCX,GAA4BA,EAAyB/C,UAEtDY,KAAImC,GAA4BA,EAAyBlD,QACzD8D,KAAK,OAAS,KACnBxD,8BACE2B,EAAM3B,+BAAiC,OAG7CpB,QAAS+C,EAAMnC,oBAAoByD,OAC9B,GAAEhC,OAAqBU,EAAMnC,sBAC9ByB,OAGC,GAKrB,CA7KShB,EAAqB,oCAqDde,EAAgB,+BA0HhC,MAAMe,GAAQ,OAAO,SAAQ,oBAAf,CAAgB,kBACX0B,EAAAA,EAAAA,GAAM,GAAE,0BAIrB1C,GAAiB,OAAO,QAAO,oBAAd,CAAe,0EAI7B0C,EAAAA,EAAAA,GAAM,GAAE,wDAGIA,EAAAA,EAAAA,GAAM,GAAE,MAIvB7C,GAA6B,OAAOG,EAAc,oBAArB,CAAsB,yEAGlC2C,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,6CAK/CnB,GAAiB,OAAOoB,EAAAA,GAAS,oBAAhB,CAAiB,uBACjBJ,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,iCAM7CH,GAAKA,EAAEf,UAAY,oBAAkB,O,4ECtO7C,MAOaoB,EAA4B,CACvC,CAAC5E,EAAwB6E,uBAAwB,CAC/ClC,OAAOjD,EAAAA,EAAAA,GAAE,2BACToF,MAAMpF,EAAAA,EAAAA,GAAE,+EAEV,CAACM,EAAwB+E,oBAAqB,CAC5CpC,OAAOjD,EAAAA,EAAAA,GAAE,+BACToF,MAAMpF,EAAAA,EAAAA,GACJ,yFAGJ,CAACM,EAAwBgF,wBAAyB,CAChDrC,OAAOjD,EAAAA,EAAAA,GAAE,+BACToF,MAAMpF,EAAAA,EAAAA,GAAE,gEAEV,CAACM,EAAwBiF,sBAAuB,CAC9CtC,OAAOjD,EAAAA,EAAAA,GAAE,wBACToF,MAAMpF,EAAAA,EAAAA,GAAE,8CAIL,SAASwF,EAAgB,GAAkB,IAAlB,QAACC,GAAe,EAC9C,MAAMxF,GAAeyF,EAAAA,EAAAA,KACfC,GAAMC,EAAAA,EAAAA,KAENzF,EAAYF,EAAaH,OAAO+F,SAAS,iBACzCC,EAASL,EAAQM,uBAAyB,IAEhDC,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,GAA4B,mCAAoC,CAC9DhG,eACAiG,WAAYT,EAAQU,IACpB,GACD,CAACV,EAAQU,GAAIlG,IA2ChB,MAAMmG,GAAiB3E,EAAAA,EAAAA,cAAY,MACjCwE,EAAAA,EAAAA,GAA4B,8CAA+C,CACzEhG,eACAiG,WAAYT,EAAQU,IACpB,GACD,CAAClG,EAAcwF,EAAQU,KAE1B,OACE,QAAC,IAAmB,CAACtF,OAAOb,EAAAA,EAAAA,GAAE,oBAAoB,UAChD,QAAC,EAAA8B,SAAQ,YACP,QAAC,IAAkB,CACjBjB,OACE,QAAC,EAAAiB,SAAQ,YACN9B,EAAAA,EAAAA,GAAE,oBAAoB,KAAC,QAAC,IAAY,CAACI,KAAK,WAG/CiG,QAAQ,QAAClE,EAAgB,OAE3B,QAAC,IAAS,WACPnC,EAAAA,EAAAA,GACC,8IAGJ,QAAC,IAAe,CACdC,aAAcA,EACdH,OAAQ,CAAC,iBACTC,SAASC,EAAAA,EAAAA,GACP,sGAGJ,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEA,EAAAA,EAAAA,GAAE,0BAChB,QAAC,IAAS,UACPsG,OAAOC,QAAQrB,GAA2BtD,KAAI,IAAkB,IAAhB4E,EAAK1F,GAAM,EAC1D,MAAM2F,EAAOX,EAAOY,MAAKC,GAAKA,EAAER,KAAOK,IAEvC,OAAKC,GAKH,QAAC,IAAY,IACP3F,EACJ0F,IAAKA,EACLlD,KAAMkD,EACN1F,MAAO2F,EAAKG,OACZtF,SAAU,IAvF1BuF,eAA4BJ,IAC1BK,EAAAA,EAAAA,MAEA,MAAMC,EAA2BjB,EAAOlE,KAAI+E,GACtCA,EAAER,KAAOM,EAAKN,GACT,IAAIQ,EAAGC,QAASD,EAAEC,QAEpBD,IAGT,IACE,MAAMK,QAAerB,EAAIsB,eACtB,aAAYhH,EAAaiH,QAAQzB,EAAQyB,QAC1C,CACEC,OAAQ,MACRC,KAAM,CACJrB,sBAAuBgB,MAK7Bd,EAAAA,EAAAA,GACEQ,EAAKG,OACD,8CACA,6CACJ,CACE3G,eACAiG,WAAYT,EAAQU,GACpBA,GAAIM,EAAKN,KAIbkB,EAAAA,EAAAA,gBAA8BL,IAC9BM,EAAAA,EAAAA,KAAkBtH,EAAAA,EAAAA,GAAE,uDAKtB,CAJE,MAAOuH,GACP,MAAMxH,GAAUC,EAAAA,EAAAA,GAAE,oDAClBwH,EAAAA,EAAAA,GAAuBzH,EAAvByH,CAAgCD,IAChCE,EAAAA,EAAAA,IAAgB1H,EAClB,CACF,CAgDgC2H,CAAajB,GAC7B3C,UAAW3D,EACXwH,eACGxH,OAEGmE,GADAtE,EAAAA,EAAAA,GAAE,qDAbH,IAgBL,OAIR,QAAC4H,EAAiB,WAChB,QAAC,KAAM,CACLC,KA7IZ,4EA8IY7D,QAASoC,EACT0B,UAAQ,YAEP9H,EAAAA,EAAAA,GAAE,wBAOjB,CA7HgBwF,EAAe,8BA+H/B,MAAMoC,GAAoB,OAAOG,EAAAA,GAAW,qBAAlB,CAAmB,YAChCnD,EAAAA,EAAAA,GAAM,KAAI,KAAIA,EAAAA,EAAAA,GAAM,GAAE,6D","sources":["webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/types/sampling.tsx","webpack:///./app/views/settings/project/dynamicSampling/samplingFeedback.tsx","webpack:///./app/views/settings/project/dynamicSampling/dynamicSampling.tsx"],"sourcesContent":["import {ReactNode} from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Organization, Scope} from 'sentry/types';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> & {\n  access?: Scope[];\n  message?: ReactNode;\n  organization?: Organization;\n};\n\nfunction PermissionAlert({\n  access = ['org:write'],\n  message = t(\n    'These settings can only be edited by users with the organization owner or manager role.'\n  ),\n  organization,\n  ...props\n}: Props) {\n  return (\n    <Access access={access} organization={organization}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"org-permission-alert\" type=\"warning\" showIcon {...props}>\n            {message}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","export enum DynamicSamplingBiasType {\n  BOOST_ENVIRONMENTS = 'boostEnvironments',\n  BOOST_LATEST_RELEASES = 'boostLatestRelease',\n  BOOST_KEY_TRANSACTIONS = 'boostKeyTransactions',\n  IGNORE_HEALTH_CHECKS = 'ignoreHealthChecks',\n}\n\nexport type DynamicSamplingBias = {\n  active: boolean;\n  id: DynamicSamplingBiasType;\n};\n\nenum SamplingConditionOperator {\n  /**\n   * Combine multiple sub-conditions with the operator 'and'\n   */\n  AND = 'and',\n  OR = 'or',\n}\n\ntype DynamicSamplingConditionLogicalInner = {\n  name: string;\n  op: string;\n  options: {\n    ignoreCase: boolean;\n  };\n  value: string[];\n};\n\ntype DynamicSamplingRuleCondition = {\n  inner: DynamicSamplingConditionLogicalInner[];\n  op: SamplingConditionOperator;\n};\n\nenum DynamicSamplingRuleType {\n  /**\n   * The rule applies to traces (transaction events considered in the context of a trace)\n   */\n  TRACE = 'trace',\n  /**\n   * The rule applies to transactions\n   */\n  TRANSACTION = 'transaction',\n}\n\nexport type DynamicSamplingRule = {\n  /**\n   * Indicates if the rule is enabled or not\n   */\n  active: boolean;\n  /**\n   * It is a possibly empty list of conditions to which the rule applies\n   */\n  condition: DynamicSamplingRuleCondition;\n  /**\n   * This is a unique number within a project\n   */\n  id: number;\n  /**\n   * It is the sampling rate that is applied\n   */\n  sampleRate: number;\n  /**\n   * Describes the type of rule\n   */\n  type: DynamicSamplingRuleType;\n};\n","import {Fragment, useCallback} from 'react';\nimport styled from '@emotion/styled';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport {FeatureFeedback} from 'sentry/components/featureFeedback';\nimport {TextField} from 'sentry/components/forms';\nimport Textarea from 'sentry/components/forms/controls/textarea';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\n\nenum TracingCapturingPriorities {\n  TRANSACTION_NAME = 'transaction_name',\n  CUSTOM_TAG = 'custom_tag',\n  OTHER = 'other',\n}\n\ntype Option = {\n  checked: boolean;\n  title: string;\n  value: string | number;\n};\n\ntype InitialData = {\n  opinionAboutFeature: string;\n  tracingCapturingOtherPriority: string;\n  tracingCapturingPriorities: Option[];\n};\n\nconst initialData: InitialData = {\n  opinionAboutFeature: '',\n  tracingCapturingPriorities: [\n    {\n      title: t('By transaction name'),\n      value: TracingCapturingPriorities.TRANSACTION_NAME,\n      checked: false,\n    },\n    {\n      title: t('By custom tag'),\n      value: TracingCapturingPriorities.CUSTOM_TAG,\n      checked: false,\n    },\n    {\n      title: t('Other'),\n      value: TracingCapturingPriorities.OTHER,\n      checked: false,\n    },\n  ],\n  tracingCapturingOtherPriority: '',\n};\n\nfunction MultipleCheckboxField({\n  options,\n  onChange,\n  otherTextField,\n}: {\n  onChange: (options: Option[]) => void;\n  options: Option[];\n  otherTextField: React.ReactNode;\n}) {\n  const handleClick = useCallback(\n    (newOption: Option, checked: boolean) => {\n      const newOptions = options.map(option => {\n        if (option.value === newOption.value) {\n          return {\n            ...option,\n            checked,\n          };\n        }\n        return option;\n      });\n\n      onChange(newOptions);\n    },\n    [onChange, options]\n  );\n\n  return (\n    <Fragment>\n      {options.map(option => {\n        if (option.value === 'other') {\n          return (\n            <CheckboxOtherOptionWrapper key={option.value}>\n              <Checkbox onChange={e => handleClick(option, e.target.checked)} />\n              {option.title}\n              {otherTextField}\n            </CheckboxOtherOptionWrapper>\n          );\n        }\n\n        return (\n          <CheckboxOption key={option.value}>\n            <Checkbox\n              checked={option.checked}\n              onChange={e => handleClick(option, e.target.checked)}\n            />\n            {option.title}\n          </CheckboxOption>\n        );\n      })}\n    </Fragment>\n  );\n}\n\nexport function SamplingFeedback() {\n  const feedbackMessage = `Dynamic Sampling feedback by ${ConfigStore.get('user').email}`;\n\n  return (\n    <FeatureFeedback\n      featureName=\"dynamic-sampling\"\n      initialData={initialData}\n      buttonProps={{\n        priority: 'primary',\n        size: 'sm',\n      }}\n    >\n      {({Header, Body, Footer, state, onFieldChange}) => {\n        return (\n          <Fragment>\n            <Header>{t('Submit Feedback')}</Header>\n            <Body showSelfHostedMessage={false}>\n              <FieldGroup\n                label={<Label>{t('What do you think about this feature?')}</Label>}\n                stacked\n                inline={false}\n                flexibleControlStateSize\n              >\n                <Textarea\n                  name=\"opinion-about-feedback\"\n                  value={state.opinionAboutFeature}\n                  rows={5}\n                  autosize\n                  onChange={event =>\n                    onFieldChange('opinionAboutFeature', event.target.value)\n                  }\n                />\n              </FieldGroup>\n              <FieldGroup\n                label={\n                  <Label>\n                    {t(\n                      'What other priorities would you like Sentry to apply for trace capturing?'\n                    )}\n                  </Label>\n                }\n                stacked\n                inline={false}\n                flexibleControlStateSize\n              >\n                <MultipleCheckboxField\n                  options={state.tracingCapturingPriorities}\n                  onChange={newTracingCapturingPriorities => {\n                    if (\n                      newTracingCapturingPriorities.some(\n                        newTracingCapturingPriority =>\n                          newTracingCapturingPriority.value ===\n                            TracingCapturingPriorities.OTHER &&\n                          newTracingCapturingPriority.checked === false\n                      )\n                    ) {\n                      onFieldChange('tracingCapturingOtherPriority', '');\n                    }\n                    onFieldChange(\n                      'tracingCapturingPriorities',\n                      newTracingCapturingPriorities\n                    );\n                  }}\n                  otherTextField={\n                    <OtherTextField\n                      inline={false}\n                      name=\"tracingCapturingOtherPriority\"\n                      flexibleControlStateSize\n                      stacked\n                      disabled={state.tracingCapturingPriorities.some(\n                        tracingCapturingPriority =>\n                          tracingCapturingPriority.value ===\n                            TracingCapturingPriorities.OTHER &&\n                          tracingCapturingPriority.checked === false\n                      )}\n                      onClick={event => event.stopPropagation()}\n                      value={state.tracingCapturingOtherPriority}\n                      onChange={value =>\n                        onFieldChange('tracingCapturingOtherPriority', value)\n                      }\n                      placeholder={t('Please let us know which other priority')}\n                    />\n                  }\n                />\n              </FieldGroup>\n            </Body>\n            <Footer\n              primaryDisabledReason={\n                !state.opinionAboutFeature.trim() &&\n                state.tracingCapturingPriorities.every(\n                  tracingCapturingPriority => tracingCapturingPriority.checked === false\n                )\n                  ? t('Please answer at least one question')\n                  : undefined\n              }\n              submitEventData={{\n                contexts: {\n                  feedback: {\n                    opinionAboutFeature: state.opinionAboutFeature || null,\n                    tracingCapturingPriorities:\n                      state.tracingCapturingPriorities\n                        .filter(\n                          tracingCapturingPriority => tracingCapturingPriority.checked\n                        )\n                        .map(tracingCapturingPriority => tracingCapturingPriority.title)\n                        .join(', ') || null,\n                    tracingCapturingOtherPriority:\n                      state.tracingCapturingOtherPriority || null,\n                  },\n                },\n                message: state.opinionAboutFeature.trim()\n                  ? `${feedbackMessage} - ${state.opinionAboutFeature}`\n                  : feedbackMessage,\n              }}\n            />\n          </Fragment>\n        );\n      }}\n    </FeatureFeedback>\n  );\n}\n\nconst Label = styled('strong')`\n  margin-bottom: ${space(1)};\n  display: inline-block;\n`;\n\nconst CheckboxOption = styled('label')`\n  cursor: pointer;\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1)};\n  align-items: center;\n  :not(:last-child) {\n    margin-bottom: ${space(1)};\n  }\n`;\n\nconst CheckboxOtherOptionWrapper = styled(CheckboxOption)`\n  grid-template-columns: max-content max-content 1fr;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: max-content 1fr;\n  }\n`;\n\nconst OtherTextField = styled(TextField)`\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-column: 1/-1;\n  }\n\n  && {\n    input {\n      ${p => p.disabled && 'cursor: pointer;'}\n    }\n  }\n`;\n","import {Fragment, useCallback, useEffect} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport BooleanField from 'sentry/components/forms/fields/booleanField';\nimport {Panel, PanelBody, PanelFooter, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\nimport {DynamicSamplingBias, DynamicSamplingBiasType} from 'sentry/types/sampling';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport {SamplingFeedback} from './samplingFeedback';\n\nconst SERVER_SIDE_SAMPLING_DOC_LINK =\n  'https://docs.sentry.io/product/data-management-settings/dynamic-sampling/';\n\ntype Props = {\n  project: Project;\n};\n\nexport const knowDynamicSamplingBiases = {\n  [DynamicSamplingBiasType.BOOST_LATEST_RELEASES]: {\n    label: t('Prioritize new releases'),\n    help: t('Captures more transactions for your new releases as they are being adopted'),\n  },\n  [DynamicSamplingBiasType.BOOST_ENVIRONMENTS]: {\n    label: t('Prioritize dev environments'),\n    help: t(\n      'Captures more traces from environments that contain \"dev\", \"test\", \"qa\", and \"local\"'\n    ),\n  },\n  [DynamicSamplingBiasType.BOOST_KEY_TRANSACTIONS]: {\n    label: t('Prioritize key transactions'),\n    help: t('Captures more of your most important (starred) transactions'),\n  },\n  [DynamicSamplingBiasType.IGNORE_HEALTH_CHECKS]: {\n    label: t('Ignore health checks'),\n    help: t('Discards your health checks transactions'),\n  },\n};\n\nexport function DynamicSampling({project}: Props) {\n  const organization = useOrganization();\n  const api = useApi();\n\n  const hasAccess = organization.access.includes('project:write');\n  const biases = project.dynamicSamplingBiases ?? [];\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('dynamic_sampling_settings.viewed', {\n      organization,\n      project_id: project.id,\n    });\n  }, [project.id, organization]);\n\n  async function handleToggle(bias: DynamicSamplingBias) {\n    addLoadingMessage();\n\n    const newDynamicSamplingBiases = biases.map(b => {\n      if (b.id === bias.id) {\n        return {...b, active: !b.active};\n      }\n      return b;\n    });\n\n    try {\n      const result = await api.requestPromise(\n        `/projects/${organization.slug}/${project.slug}/`,\n        {\n          method: 'PUT',\n          data: {\n            dynamicSamplingBiases: newDynamicSamplingBiases,\n          },\n        }\n      );\n\n      trackAdvancedAnalyticsEvent(\n        bias.active\n          ? 'dynamic_sampling_settings.priority_disabled'\n          : 'dynamic_sampling_settings.priority_enabled',\n        {\n          organization,\n          project_id: project.id,\n          id: bias.id,\n        }\n      );\n\n      ProjectsStore.onUpdateSuccess(result);\n      addSuccessMessage(t('Successfully updated dynamic sampling configuration'));\n    } catch (error) {\n      const message = t('Unable to update dynamic sampling configuration');\n      handleXhrErrorResponse(message)(error);\n      addErrorMessage(message);\n    }\n  }\n\n  const handleReadDocs = useCallback(() => {\n    trackAdvancedAnalyticsEvent('dynamic_sampling_settings.read_docs_clicked', {\n      organization,\n      project_id: project.id,\n    });\n  }, [organization, project.id]);\n\n  return (\n    <SentryDocumentTitle title={t('Dynamic Sampling')}>\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              {t('Dynamic Sampling')} <FeatureBadge type=\"new\" />\n            </Fragment>\n          }\n          action={<SamplingFeedback />}\n        />\n        <TextBlock>\n          {t(\n            'Sentry aims to capture the most valuable transactions in full detail, so you have the necessary data to resolve any performance issues.'\n          )}\n        </TextBlock>\n        <PermissionAlert\n          organization={organization}\n          access={['project:write']}\n          message={t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        />\n        <Panel>\n          <PanelHeader>{t('Sampling Priorities')}</PanelHeader>\n          <PanelBody>\n            {Object.entries(knowDynamicSamplingBiases).map(([key, value]) => {\n              const bias = biases.find(b => b.id === key);\n\n              if (!bias) {\n                return null;\n              }\n\n              return (\n                <BooleanField\n                  {...value}\n                  key={key}\n                  name={key}\n                  value={bias.active}\n                  onChange={() => handleToggle(bias)}\n                  disabled={!hasAccess}\n                  disabledReason={\n                    !hasAccess\n                      ? t('You do not have permission to edit this setting')\n                      : undefined\n                  }\n                />\n              );\n            })}\n          </PanelBody>\n          <StyledPanelFooter>\n            <Button\n              href={SERVER_SIDE_SAMPLING_DOC_LINK}\n              onClick={handleReadDocs}\n              external\n            >\n              {t('Read Docs')}\n            </Button>\n          </StyledPanelFooter>\n        </Panel>\n      </Fragment>\n    </SentryDocumentTitle>\n  );\n}\n\nconst StyledPanelFooter = styled(PanelFooter)`\n  padding: ${space(1.5)} ${space(2)};\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n"],"names":["PermissionAlert","access","message","t","organization","props","hasAccess","type","showIcon","DynamicSamplingBiasType","SamplingConditionOperator","DynamicSamplingRuleType","TracingCapturingPriorities","initialData","opinionAboutFeature","tracingCapturingPriorities","title","value","TRANSACTION_NAME","checked","CUSTOM_TAG","OTHER","tracingCapturingOtherPriority","MultipleCheckboxField","options","onChange","otherTextField","handleClick","useCallback","newOption","newOptions","map","option","Fragment","CheckboxOtherOptionWrapper","e","target","CheckboxOption","SamplingFeedback","feedbackMessage","ConfigStore","email","featureName","buttonProps","priority","size","Header","Body","Footer","state","onFieldChange","showSelfHostedMessage","label","Label","stacked","inline","flexibleControlStateSize","name","rows","autosize","event","newTracingCapturingPriorities","some","newTracingCapturingPriority","OtherTextField","disabled","tracingCapturingPriority","onClick","stopPropagation","placeholder","primaryDisabledReason","trim","every","undefined","submitEventData","contexts","feedback","filter","join","space","p","theme","breakpoints","small","TextField","knowDynamicSamplingBiases","BOOST_LATEST_RELEASES","help","BOOST_ENVIRONMENTS","BOOST_KEY_TRANSACTIONS","IGNORE_HEALTH_CHECKS","DynamicSampling","project","useOrganization","api","useApi","includes","biases","dynamicSamplingBiases","useEffect","trackAdvancedAnalyticsEvent","project_id","id","handleReadDocs","action","Object","entries","key","bias","find","b","active","async","addLoadingMessage","newDynamicSamplingBiases","result","requestPromise","slug","method","data","ProjectsStore","addSuccessMessage","error","handleXhrErrorResponse","addErrorMessage","handleToggle","disabledReason","StyledPanelFooter","href","external","PanelFooter"],"sourceRoot":""}