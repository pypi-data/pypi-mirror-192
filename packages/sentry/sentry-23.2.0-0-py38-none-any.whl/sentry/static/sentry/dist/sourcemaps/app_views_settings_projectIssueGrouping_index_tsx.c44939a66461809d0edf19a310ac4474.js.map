{"version":3,"file":"chunks/app_views_settings_projectIssueGrouping_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"snBAWO,MAAMA,EAAQ,uDAEfC,EAA6B,CACjCC,KAAM,iBACNC,KAAM,SACNC,OAAOC,EAAAA,EAAAA,GAAE,mBACTC,YAAY,EACZC,qBAAsB,OACtBC,aAAaH,EAAAA,EAAAA,GACX,wFAEFI,sBAAuBC,IACrB,MAAM,gBAACC,EAAe,MAAEC,GAASF,EAC3BG,EAAYF,EAAgBG,MAAK,QAAC,GAACC,GAAG,SAAKA,IAAOH,CAAK,IACvDI,EAAYH,GAAWG,WAAa,GAC1C,OAAKA,GAIH,QAACC,EAAS,YACR,QAACC,EAAc,YACZC,EAAAA,EAAAA,IAAI,2BAA4B,CAACC,QAASP,EAAUE,KAAK,QAE5D,eAAKM,wBAAyB,CAACC,QAAQC,EAAAA,EAAAA,GAAOP,SAPzC,IAQK,EAGhBQ,QAAS,QAAC,gBAACb,GAAgB,SACzBA,EAAgBc,KAAI,QAAC,GAACV,EAAE,OAAEW,GAAO,QAAK,CACpCX,EAAGY,YACH,QAAC,IAAkB,CAAUC,SAAUF,EAAO,SAC3CX,GADsBA,GAG1B,GAAC,EACJc,MAAMxB,EAAAA,EAAAA,GAAE,0DACRyB,QAAS,QAAC,SAACC,GAAS,SAAKA,EAASC,IAAI,sBAAsB,GAGjDC,EAAgC,CAC3CC,oBAAqB,CACnBhC,KAAM,sBACNC,KAAM,SACNC,OAAOC,EAAAA,EAAAA,GAAE,qBACT8B,WAAW,EACXC,aAAa/B,EAAAA,EAAAA,GACX,wGAEFgC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,QAAS,GACTnC,YAAY,EACZC,qBAAsB,OACtBC,aAAaH,EAAAA,EAAAA,GACX,0FAEFqC,oBAAoB,EACpBb,KAAM,KACJ,QAAC,EAAAc,SAAQ,YACP,QAACC,EAAe,WACbzB,EAAAA,EAAAA,IACE,8LAED,CACE0B,SAAS,yBAAM,wCACfC,MACE,QAAC,IAAY,CAACC,KAAK,mGAK3B,QAACC,EAAW,UACR,sOAORlB,SAAS,GAEXmB,qBAAsB,CACpB/C,KAAM,uBACNC,KAAM,SACNC,OAAOC,EAAAA,EAAAA,GAAE,qBACT8B,WAAW,EACXC,aAAa/B,EAAAA,EAAAA,GACX,+EAEFgC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,QAAS,GACTnC,YAAY,EACZC,qBAAsB,OACtBC,aAAaH,EAAAA,EAAAA,GACX,0FAEFqC,oBAAoB,EACpBb,KAAM,KACJ,QAAC,EAAAc,SAAQ,YACP,QAACC,EAAe,WACbzB,EAAAA,EAAAA,IACE,kLAED,CACE0B,SAAS,yBAAM,+BACfC,MACE,QAAC,IAAY,CAACC,KAAK,mGAK3B,QAACC,EAAW,UACR,yLAORE,SAAU,IAAM,GAChBpB,SAAS,GAEXqB,eAAgBlD,EAChBmD,wBAAyB,IACpBnD,EACHC,KAAM,0BACNE,OAAOC,EAAAA,EAAAA,GAAE,sCACTwB,MAAMxB,EAAAA,EAAAA,GACJ,oJAEFG,aAAaH,EAAAA,EAAAA,GACX,0FAGJgD,wBAAyB,CACvBnD,KAAM,0BACNC,KAAM,SACNC,OAAOC,EAAAA,EAAAA,GAAE,yCACTwB,MAAMxB,EAAAA,EAAAA,GACJ,6GAEFC,YAAY,EACZC,qBAAsB,OACtBC,aAAaH,EAAAA,EAAAA,GACX,8EAGJiD,mBAAoB,CAClBpD,KAAM,qBACNC,KAAM,UACNC,OAAOC,EAAAA,EAAAA,GAAE,iCACTC,YAAY,EACZuB,MAAMxB,EAAAA,EAAAA,GACJ,wIAEFG,YAAa,QAAC,MAACI,GAAM,SACnBA,GACIP,EAAAA,EAAAA,GACE,qHAEFA,EAAAA,EAAAA,GACE,qGACD,IAILuC,GAAkB,OAAO,MAAK,qBAAZ,CAAa,kBAClBW,EAAAA,EAAAA,GAAM,GAAE,iBACVA,EAAAA,EAAAA,GAAM,GAAE,uBAInBP,GAAc,OAAO,MAAK,qBAAZ,CAAa,kBACdO,EAAAA,EAAAA,GAAM,GAAE,uBAIrBtC,GAAY,OAAO,MAAK,qBAAZ,CAAa,0DAIlBsC,EAAAA,EAAAA,GAAM,GAAE,6BACQC,GAAKA,EAAEC,MAAMC,aAAW,gBACrCF,GAAKA,EAAEC,MAAME,qBAAmB,eACjCH,GAAKA,EAAEC,MAAMG,gBAAc,qDAITJ,GAAKA,EAAEC,MAAMI,cAAY,gCACxBL,GAAKA,EAAEC,MAAMI,cAAY,MAIrD3C,GAAiB,OAAO,KAAI,qBAAX,CAAY,cACpBsC,GAAKA,EAAEC,MAAMG,gBAAc,mBACvBL,EAAAA,EAAAA,GAAM,KAAK,c,0DCtM9B,QAZA,SACEO,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,wPCJe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,wnCCyB9B,SAASO,EAAgB,GAQf,IARe,gBACvBhE,EAAe,aACfiE,EAAY,UACZC,EAAS,QACTC,EAAO,UACPC,EAAS,IACTC,EAAG,SACHC,GACM,EACN,MAAMC,EAAwBN,EAAaO,OAAOC,SAAS,kBACrD,YAACC,EAAW,UAAEC,EAAS,qBAAEC,GCrC1B,SACLT,EACAnE,GAMA,MAAM6E,EAA4C,CAAC,EACnD,IAAIH,EAAsB,GACtBC,EAAoB,EACpBC,EAAmD,KAWvD,GATA5E,EAAgB8E,SAAQC,IACtBF,EAAKE,EAAI3E,IAAM2E,EACXA,EAAIC,QAAUb,EAAQ3B,iBAAmBuC,EAAI3E,KAC/CsE,EAAcK,EAAI1E,UAClBuE,EAAuBG,EACvBJ,EAAYI,EAAIE,KAClB,IAGEL,EAAsB,CACxB,IAAIM,EAAQN,EAA6CO,MAAQ,GACjE,KAAOD,IAASf,EAAQ3B,gBAAgB,CACtC,MAAMuC,EAAMF,EAAKK,GACjB,IAAKH,EACH,MAEFJ,EAAYS,KAAKC,IAAIV,EAAWI,EAAIE,MACpCP,EAAcK,EAAI1E,UAAY,KAAOqE,EACrCQ,EAAOH,EAAII,MAAQ,EACrB,CACF,CAEA,MAAO,CAACT,cAAaC,YAAWC,uBAClC,CDCyDU,CACrDnB,EACAnE,IAEI,SAACuF,EAAQ,UAAEC,GCHZ,SAAyBb,GAI9B,OAAQA,GACN,KAAK,EACH,MAAO,CACLY,UAAU7F,EAAAA,EAAAA,GAAE,0DACZ8F,UAAW,QAEf,KAAK,EACH,MAAO,CACLD,UAAU7F,EAAAA,EAAAA,GAAE,6CACZ8F,UAAW,WAEf,KAAK,EACH,MAAO,CACLD,UACE,4BACG7F,EAAAA,EAAAA,GACC,qGAIN8F,UAAW,SAEf,QACE,MAAO,CAACD,cAAUE,EAAWD,eAAWC,GAE9C,CD1BgCC,CAAgBf,GACxCgB,EAAYxB,EAAQxB,qBAAuBiC,EAC3CgB,EAAWjB,GAAa,EAAI,SAAW,UAe7C,IAbAkB,EAAAA,EAAAA,YAAU,KAEa,sBAAnBvB,EAASwB,OACTH,GACC3F,GACAuE,GAIHwB,GAAwB,GAEvB,CAACzB,EAASwB,QAER9F,EACH,OAAO,KAGTgG,eAAeC,IACb,MAAMC,EAA2C,CAAC,EAElD,GAAItB,EAAsB,CACxB,MAAMuB,EAAMf,KAAKgB,OAAM,IAAIC,MAAOC,UAAY,KACxCC,EAAc,OAEpBL,EAAQ1D,eAAiBoC,EAAqBxE,GAC9C8F,EAAQzD,wBAA0B0B,EAAQ3B,eAC1C0D,EAAQxD,wBAA0ByD,EAAMI,CAC1C,EAEAC,EAAAA,EAAAA,KAAkB9G,EAAAA,EAAAA,GAAE,uBACpB,IACE,MAAM+G,QAAiBpC,EAAIqC,eACxB,aAAYzC,EAAa0C,QAAQzC,KAClC,CACE0C,OAAQ,MACRC,KAAMX,KAGVY,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,gBAA8BN,GAC9BrC,GAGF,CAFE,OACA4C,EAAAA,EAAAA,IAAuBtH,EAAAA,EAAAA,GAAE,4BAC3B,CACF,CAEA,SAASqG,KACPkB,EAAAA,EAAAA,GAAiB,CACfC,aAAaxH,EAAAA,EAAAA,GAAE,WACfkG,WACAuB,UAAWlB,EACXmB,SACE,QAAC,EAAApF,SAAQ,YACP,QAAC,IAAS,WACR,4BAAStC,EAAAA,EAAAA,GAAE,kCAEb,QAAC,IAAS,WACPA,EAAAA,EAAAA,GACC,iGAGJ,QAAC,IAAS,YACR,4BAASA,EAAAA,EAAAA,GAAE,mBACX,eAAKgB,wBAAyB,CAACC,QAAQC,EAAAA,EAAAA,GAAO8D,UAEhD,QAAC,IAAS,WACR,QAAC,KAAK,CAAClF,KAAMgG,EAAU,SAAED,UAKnC,CAkBA,OACE,QAAC,KAAK,CAACnF,GAxHe,mBAwHO,WAC3B,QAAC,KAAW,WAAEV,EAAAA,EAAAA,GAAE,uBAChB,QAAC,IAAS,WACR,QAAC,IAAU,CACTD,OAAOC,EAAAA,EAAAA,GAAE,6BACTwB,MAAMV,EAAAA,EAAAA,IACJ,qIACA,CACE6G,WAAW,mBAGfC,UAAQ,YAER,yBACE,QAAC,KAAM,CACLC,QAASxB,EACTuB,UAAW/C,GAAyBoB,EACpC9B,MAjCNM,EAAQxB,oBACHjD,EAAAA,EAAAA,GAAE,mDAGN6E,EAIDoB,GACKjG,EAAAA,EAAAA,GAAE,8CADX,GAHSA,EAAAA,EAAAA,GAAE,qDA6BDkG,SAAUA,EAAS,UAElBlG,EAAAA,EAAAA,GAAE,uCAOjB,CAvISsE,EAAe,8BAyIxB,UE7IA,MAAMwD,UAA6B/D,EAAAA,EAAwB,+DAwBzCgD,IAEdM,EAAAA,EAAAA,gBAA8BN,EAAS,GACxC,CA1BD9C,WACE,MAAM,UAACO,GAAaJ,KAAK2D,MAAMC,OAE/B,OAAOC,EAAAA,EAAAA,IAAcjI,EAAAA,EAAAA,GAAE,kBAAmBwE,GAAW,EACvD,CAEA0D,kBACE,MAAO,IACFC,MAAMD,kBACT5H,gBAAiB,GAErB,CAEA8H,eACE,MAAM,aAAC7D,EAAY,QAAEE,GAAWL,KAAK2D,MACrC,MAAO,CACL,CACE,kBACC,aAAYxD,EAAa0C,QAAQxC,EAAQwC,0BAGhD,CAOAoB,aACE,MAAM,gBAAC/H,GAAmB8D,KAAKkE,OACzB,aAAC/D,EAAY,QAAEE,EAAO,OAAEuD,EAAM,SAAEpD,GAAYR,KAAK2D,MACjDQ,EAAY,aAAYhE,EAAa0C,QAAQxC,EAAQwC,QACrDnC,EAAS,IAAI0D,IAAIjE,EAAaO,QAC9B2D,EAAgB,CACpBC,qBAAsB,CACpBnE,eACAjE,mBAEFoB,SAAU,IAAI8G,IAAIjE,EAAa7C,UAC/BoD,SACA8C,UAAW9C,EAAOnD,IAAI,kBAGxB,OACE,QAAC,EAAAW,SAAQ,YACP,QAAC,IAAkB,CAAC6B,OAAOnE,EAAAA,EAAAA,GAAE,qBAE7B,QAAC,IAAS,WACPc,EAAAA,EAAAA,IACE,iKACD,CACE6H,MACE,QAAC,IAAY,CAACjG,KAAK,iFAM3B,QAAC,IAAI,CACHzC,YAAU,EACV2I,WAAS,EACTC,YAAapE,EACbqE,UAAU,MACVC,YAAaR,EACbS,gBAAiB5E,KAAK6E,aAAa,WAEnC,QAAC,IAAQ,IACHR,EACJtE,OAAOnE,EAAAA,EAAAA,GAAE,qBACT4B,OAAQ,CAACA,EAAAA,OAAAA,wBAGX,QAAC,IAAQ,IACH6G,EACJtE,OAAOnE,EAAAA,EAAAA,GAAE,qBACT4B,OAAQ,CAACA,EAAAA,OAAAA,yBAGX,QAAC,IAAO,CAACF,SAAU,CAAC,uBAAwB6C,aAAcA,EAAa,UACrE,QAAC,IAAQ,IACHkE,EACJtE,OAAOnE,EAAAA,EAAAA,GAAE,mBACT4B,OAAQ,CACNA,EAAAA,OAAAA,eACAA,EAAAA,OAAAA,wBACAA,EAAAA,OAAAA,8BAKN,QAAC,IAAQ,IACH6G,EACJtE,OAAOnE,EAAAA,EAAAA,GAAE,8BACT4B,OAAQ,CAACA,EAAAA,OAAAA,uBAGX,QAAC,EAAe,CACdtB,gBAAiBA,GAAmB,GACpCiE,aAAcA,EACdC,UAAWwD,EAAOxD,UAClBC,QAASA,EACTE,IAAKP,KAAKO,IACVD,UAAWN,KAAK8E,UAChBtE,SAAUA,SAKpB,EAGF,S","sources":["webpack:///./app/data/forms/projectIssueGrouping.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {GroupingConfigItem} from 'sentry/components/events/groupingInfo';\nimport {Field} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport marked from 'sentry/utils/marked';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/issue-grouping/';\n\nconst groupingConfigField: Field = {\n  name: 'groupingConfig',\n  type: 'select',\n  label: t('Grouping Config'),\n  saveOnBlur: false,\n  saveMessageAlertType: 'info',\n  saveMessage: t(\n    'Changing grouping config will apply to future events only (can take up to a minute).'\n  ),\n  selectionInfoFunction: args => {\n    const {groupingConfigs, value} = args;\n    const selection = groupingConfigs.find(({id}) => id === value);\n    const changelog = selection?.changelog || '';\n    if (!changelog) {\n      return null;\n    }\n    return (\n      <Changelog>\n        <ChangelogTitle>\n          {tct('New in version [version]', {version: selection.id})}:\n        </ChangelogTitle>\n        <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n      </Changelog>\n    );\n  },\n  choices: ({groupingConfigs}) =>\n    groupingConfigs.map(({id, hidden}) => [\n      id.toString(),\n      <GroupingConfigItem key={id} isHidden={hidden}>\n        {id}\n      </GroupingConfigItem>,\n    ]),\n  help: t('Sets the grouping algorithm to be used for new events.'),\n  visible: ({features}) => features.has('set-grouping-config'),\n};\n\nexport const fields: Record<string, Field> = {\n  fingerprintingRules: {\n    name: 'fingerprintingRules',\n    type: 'string',\n    label: t('Fingerprint Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'error.type:MyException -> fingerprint-value\\nstack.function:some_panic_function -> fingerprint-value'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing fingerprint rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to modify the fingerprint rules on the server with custom rules.\n        Rules follow the pattern [pattern]. To learn more about fingerprint rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob -&gt; fingerprint, values</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/fingerprint-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# force all errors of the same type to have the same fingerprint\nerror.type:DatabaseUnavailable -> system-down\n# force all memory allocation errors to be grouped together\nstack.function:malloc -> memory-allocation-error`}\n        </RuleExample>\n      </Fragment>\n    ),\n    visible: true,\n  },\n  groupingEnhancements: {\n    name: 'groupingEnhancements',\n    type: 'string',\n    label: t('Stack Trace Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'stack.function:raise_an_exception ^-group\\nstack.function:namespace::* +app'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing stack trace rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to enhance the grouping algorithm with custom rules.\n        Rules follow the pattern [pattern]. To learn more about stack trace rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob [v^]?[+-]flag</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/stack-trace-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# remove all frames above a certain function from grouping\nstack.function:panic_handler ^-group\n# mark all functions following a prefix in-app\nstack.function:mylibrary_* +app`}\n        </RuleExample>\n      </Fragment>\n    ),\n    validate: () => [],\n    visible: true,\n  },\n  groupingConfig: groupingConfigField,\n  secondaryGroupingConfig: {\n    ...groupingConfigField,\n    name: 'secondaryGroupingConfig',\n    label: t('Fallback/Secondary Grouping Config'),\n    help: t(\n      'Sets the secondary grouping algorithm that should be run in addition to avoid creating too many new groups. Controlled by expiration date below.'\n    ),\n    saveMessage: t(\n      'Changing the secondary grouping strategy will affect how many new issues are created.'\n    ),\n  },\n  secondaryGroupingExpiry: {\n    name: 'secondaryGroupingExpiry',\n    type: 'number',\n    label: t('Expiration date of secondary grouping'),\n    help: t(\n      'If this UNIX timestamp is in the past, the secondary grouping configuration stops applying automatically.'\n    ),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing the expiration date will affect how many new issues are created.'\n    ),\n  },\n  groupingAutoUpdate: {\n    name: 'groupingAutoUpdate',\n    type: 'boolean',\n    label: t('Automatically Update Grouping'),\n    saveOnBlur: false,\n    help: t(\n      'When enabled projects will in the future automatically update to the latest grouping algorithm. Right now this setting does nothing.'\n    ),\n    saveMessage: ({value}) =>\n      value\n        ? t(\n            'Enabling automatic upgrading will take effect on the next incoming event once auto updating has been rolled out.'\n          )\n        : t(\n            'Disabling auto updates will cause you to no longer receive improvements to the grouping algorithm.'\n          ),\n  },\n};\n\nconst RuleDescription = styled('div')`\n  margin-bottom: ${space(1)};\n  margin-top: -${space(1)};\n  margin-right: 36px;\n`;\n\nconst RuleExample = styled('pre')`\n  margin-bottom: ${space(1)};\n  margin-right: 36px;\n`;\n\nconst Changelog = styled('div')`\n  position: relative;\n  top: -1px;\n  margin-bottom: -1px;\n  padding: ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  background: ${p => p.theme.backgroundSecondary};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:last-child {\n    border: 0;\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ChangelogTitle = styled('h3')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.75)} !important;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport marked from 'sentry/utils/marked';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\nconst upgradeGroupingId = 'upgrade-grouping';\n\ntype Props = {\n  api: Client;\n  groupingConfigs: EventGroupingConfig[];\n  location: Location;\n  onUpgrade: () => void;\n  organization: Organization;\n  project: Project;\n  projectId: string;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n  location,\n}: Props) {\n  const hasProjectWriteAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = project.groupingAutoUpdate || !latestGroupingConfig;\n  const priority = riskLevel >= 2 ? 'danger' : 'primary';\n\n  useEffect(() => {\n    if (\n      location.hash !== `#${upgradeGroupingId}` ||\n      noUpdates ||\n      !groupingConfigs ||\n      !hasProjectWriteAccess\n    ) {\n      return;\n    }\n    handleOpenConfirmModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.hash]);\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  async function handleConfirmUpgrade() {\n    const newData: Record<string, string | number> = {};\n\n    if (latestGroupingConfig) {\n      const now = Math.floor(new Date().getTime() / 1000);\n      const ninety_days = 3600 * 24 * 90;\n\n      newData.groupingConfig = latestGroupingConfig.id;\n      newData.secondaryGroupingConfig = project.groupingConfig;\n      newData.secondaryGroupingExpiry = now + ninety_days;\n    }\n\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectsStore.onUpdateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  }\n\n  function handleOpenConfirmModal() {\n    openConfirmModal({\n      confirmText: t('Upgrade'),\n      priority,\n      onConfirm: handleConfirmUpgrade,\n      message: (\n        <Fragment>\n          <TextBlock>\n            <strong>{t('Upgrade Grouping Strategy')}</strong>\n          </TextBlock>\n          <TextBlock>\n            {t(\n              'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n            )}\n          </TextBlock>\n          <TextBlock>\n            <strong>{t('New Behavior')}</strong>\n            <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n          </TextBlock>\n          <TextBlock>\n            <Alert type={alertType}>{riskNote}</Alert>\n          </TextBlock>\n        </Fragment>\n      ),\n    });\n  }\n\n  function getButtonTitle() {\n    if (project.groupingAutoUpdate) {\n      return t('Disabled because automatic upgrading is enabled');\n    }\n\n    if (!hasProjectWriteAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id={upgradeGroupingId}>\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <FieldGroup\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <div>\n            <Button\n              onClick={handleOpenConfirmModal}\n              disabled={!hasProjectWriteAccess || noUpdates}\n              title={getButtonTitle()}\n              priority={priority}\n            >\n              {t('Upgrade Grouping Strategy')}\n            </Button>\n          </div>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {EventGroupingConfig, Project} from 'sentry/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  latestGroupingConfig: EventGroupingConfig | null;\n  riskLevel: number;\n  updateNotes: string;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(riskLevel: number): {\n  alertType: React.ComponentProps<typeof Alert>['type'];\n  riskNote: React.ReactNode;\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {fields} from 'sentry/data/forms/projectIssueGrouping';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & AsyncView['state'];\n\nclass ProjectIssueGrouping extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, project} = this.props;\n    return [\n      [\n        'groupingConfigs',\n        `/projects/${organization.slug}/${project.slug}/grouping-configs/`,\n      ],\n    ];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectsStore.onUpdateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params, location} = this.props;\n    const endpoint = `/projects/${organization.slug}/${project.slug}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Automatic Grouping Updates')}\n            fields={[fields.groupingAutoUpdate]}\n          />\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n            location={location}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectIssueGrouping;\n"],"names":["route","groupingConfigField","name","type","label","t","saveOnBlur","saveMessageAlertType","saveMessage","selectionInfoFunction","args","groupingConfigs","value","selection","find","id","changelog","Changelog","ChangelogTitle","tct","version","dangerouslySetInnerHTML","__html","marked","choices","map","hidden","toString","isHidden","help","visible","features","has","fields","fingerprintingRules","hideLabel","placeholder","multiline","monospace","autosize","inline","maxRows","formatMessageValue","Fragment","RuleDescription","pattern","docs","href","RuleExample","groupingEnhancements","validate","groupingConfig","secondaryGroupingConfig","secondaryGroupingExpiry","groupingAutoUpdate","space","p","theme","innerBorder","backgroundSecondary","fontSizeMedium","borderRadius","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","UpgradeGrouping","organization","projectId","project","onUpgrade","api","location","hasProjectWriteAccess","access","includes","updateNotes","riskLevel","latestGroupingConfig","byId","forEach","cfg","latest","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","undefined","getGroupingRisk","noUpdates","priority","useEffect","hash","handleOpenConfirmModal","async","handleConfirmUpgrade","newData","now","floor","Date","getTime","ninety_days","addLoadingMessage","response","requestPromise","slug","method","data","clearIndicators","ProjectsStore","handleXhrErrorResponse","openConfirmModal","confirmText","onConfirm","message","linebreak","disabled","onClick","ProjectIssueGrouping","props","params","routeTitleGen","getDefaultState","super","getEndpoints","renderBody","state","endpoint","Set","jsonFormProps","additionalFieldProps","link","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","handleSubmit","fetchData"],"sourceRoot":""}