{"version":3,"file":"chunks/app_components_modals_helpSearchModal_tsx-app_data_forms_accountEmails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/hook.tsx","webpack:///./app/utils/parseHtmlMarks.tsx","webpack:///./app/components/search/sources/helpSource.tsx","webpack:///./app/components/helpSearch.tsx","webpack:///./app/components/modals/helpSearchModal.tsx","webpack:///./app/data/forms/accountEmails.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {HookName, Hooks} from 'sentry/types/hooks';\n\ntype Props<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  name: H;\n  /**\n   * If children are provided as a function to the Hook, the hooks will be\n   * passed down as a render prop.\n   */\n  children?: (opts: {hooks: Array<Hooks[H]>}) => React.ReactNode;\n} & Omit<Parameters<Hooks[H]>[0], 'name'>;\n\ntype HookState<H extends HookName> = {\n  hooks: Array<Hooks[H]>;\n};\n\n/**\n * Instead of accessing the HookStore directly, use this.\n *\n * If the hook slot needs to perform anything w/ the hooks, you can pass a\n * function as a child and you will receive an object with a `hooks` key\n *\n * Example:\n *\n *   <Hook name=\"my-hook\">\n *     {({hooks}) => hooks.map(hook => (\n *       <Wrapper>{hook}</Wrapper>\n *     ))}\n *   </Hook>\n */\nfunction Hook<H extends HookName>({name, ...props}: Props<H>) {\n  class HookComponent extends Component<{}, HookState<H>> {\n    static displayName = `Hook(${name})`;\n\n    state = {\n      hooks: HookStore.get(name).map(cb => cb(props)),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    handleHooks(hookName: HookName, hooks: Array<Hooks[H]>) {\n      // Make sure that the incoming hook update matches this component's hook name\n      if (hookName !== name) {\n        return;\n      }\n\n      this.setState({hooks: hooks.map(cb => cb(props))});\n    }\n\n    unsubscribe = HookStore.listen(\n      (hookName: HookName, hooks: Array<Hooks[H]>) => this.handleHooks(hookName, hooks),\n      undefined\n    );\n\n    render() {\n      const {children} = props;\n\n      if (!this.state.hooks || !this.state.hooks.length) {\n        return null;\n      }\n\n      if (typeof children === 'function') {\n        return children({hooks: this.state.hooks});\n      }\n\n      return this.state.hooks;\n    }\n  }\n\n  return <HookComponent />;\n}\n\nexport default Hook;\n","import type {Fuse} from 'sentry/utils/fuzzySearch';\n\ntype Options = {\n  htmlString: string;\n  key: string;\n  markTags: {\n    highlightPostTag: string;\n    highlightPreTag: string;\n  };\n};\n\n/**\n * Parses the \"marked\" html strings into a {key, value, indices} (mimincing the\n * FuseResultMatch type) object, where the indices are a set of zero indexed\n * [start, end] indices for what should be highlighted.\n *\n * @param key The key of the field, this mimics the Fuse match object\n * @param htmlString The html string to parse\n * @param markTags.highlightPreTag The left tag\n * @param markTags.highlightPostTag The right tag\n */\nexport default function parseHtmlMarks({key, htmlString, markTags}: Options) {\n  const {highlightPreTag, highlightPostTag} = markTags;\n\n  const indices: [number, number][] = [];\n  let value = htmlString;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const openIndex = value.indexOf(highlightPreTag);\n    const openIndexEnd = openIndex + highlightPreTag.length;\n    if (openIndex === -1 || value.indexOf(highlightPostTag) === -1) {\n      break;\n    }\n    value = value.slice(0, openIndex) + value.slice(openIndexEnd);\n\n    const closeIndex = value.indexOf(highlightPostTag);\n    const closeIndexEnd = closeIndex + highlightPostTag.length;\n    value = value.slice(0, closeIndex) + value.slice(closeIndexEnd);\n\n    indices.push([openIndex, closeIndex - 1]);\n  }\n\n  return {key, value, indices} as Fuse.FuseResultMatch;\n}\n","import {Component} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport {\n  Result as SearchResult,\n  SentryGlobalSearch,\n  standardSDKSlug,\n} from '@sentry-internal/global-search';\nimport dompurify from 'dompurify';\nimport debounce from 'lodash/debounce';\n\nimport {Organization, Project} from 'sentry/types';\nimport parseHtmlMarks from 'sentry/utils/parseHtmlMarks';\nimport withLatestContext from 'sentry/utils/withLatestContext';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport {ChildProps, Result, ResultItem} from './types';\n\ntype Props = WithRouterProps & {\n  /**\n   * Render function that renders the global search result\n   */\n  children: (props: ChildProps) => React.ReactNode;\n  organization: Organization;\n  /**\n   * Specific platforms to filter results to\n   */\n  platforms: string[];\n  project: Project;\n  /**\n   * The string to search the navigation routes for\n   */\n  query: string;\n};\n\ntype State = {\n  loading: boolean;\n  results: Result[];\n};\n\nconst MARK_TAGS = {\n  highlightPreTag: '<mark>',\n  highlightPostTag: '</mark>',\n};\n\nclass HelpSource extends Component<Props, State> {\n  state: State = {\n    loading: false,\n    results: [],\n  };\n\n  componentDidMount() {\n    if (this.props.query !== undefined) {\n      this.doSearch(this.props.query);\n    }\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.query !== this.props.query) {\n      this.doSearch(nextProps.query);\n    }\n  }\n\n  search = new SentryGlobalSearch(['docs', 'help-center', 'develop', 'blog']);\n\n  async unbouncedSearch(query: string) {\n    this.setState({loading: true});\n    const {platforms = []} = this.props;\n\n    const searchResults = await this.search.query(query, {\n      platforms: platforms.map(platform => standardSDKSlug(platform)?.slug!),\n    });\n    const results = mapSearchResults(searchResults);\n\n    this.setState({loading: false, results});\n  }\n\n  doSearch = debounce(this.unbouncedSearch, 300);\n\n  render() {\n    return this.props.children({\n      isLoading: this.state.loading,\n      results: this.state.results,\n    });\n  }\n}\n\nfunction mapSearchResults(results: SearchResult[]) {\n  const items: Result[] = [];\n\n  results.forEach(section => {\n    const sectionItems = section.hits.map(hit => {\n      const title = parseHtmlMarks({\n        key: 'title',\n        htmlString: hit.title ?? '',\n        markTags: MARK_TAGS,\n      });\n      const description = parseHtmlMarks({\n        key: 'description',\n        htmlString: hit.text ?? '',\n        markTags: MARK_TAGS,\n      });\n\n      const item: ResultItem = {\n        ...hit,\n        sourceType: 'help',\n        resultType: `help-${hit.site}` as ResultItem['resultType'],\n        title: dompurify.sanitize(hit.title ?? ''),\n        extra: hit.context.context1,\n        description: hit.text ? dompurify.sanitize(hit.text) : undefined,\n        to: hit.url,\n      };\n\n      return {item, matches: [title, description], score: 1, refIndex: 0};\n    });\n\n    // The first element should indicate the section.\n    if (sectionItems.length > 0) {\n      sectionItems[0].item.sectionHeading = section.name;\n      sectionItems[0].item.sectionCount = sectionItems.length;\n\n      items.push(...sectionItems);\n      return;\n    }\n\n    // If we didn't have any results for this section mark it as empty\n    const emptyHeaderItem: ResultItem = {\n      sourceType: 'help',\n      resultType: `help-${section.site}` as ResultItem['resultType'],\n      title: `No results in ${section.name}`,\n      sectionHeading: section.name,\n      empty: true,\n    };\n\n    items.push({item: emptyHeaderItem, score: 1, refIndex: 0});\n  });\n\n  return items;\n}\n\nexport {HelpSource};\nexport default withLatestContext(withSentryRouter(HelpSource));\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Search} from 'sentry/components/search';\nimport SearchResult from 'sentry/components/search/searchResult';\nimport SearchResultWrapper from 'sentry/components/search/searchResultWrapper';\nimport HelpSource from 'sentry/components/search/sources/helpSource';\nimport {IconWindow} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ntype ItemRenderer = React.ComponentProps<typeof Search>['renderItem'];\n\nconst renderResult: ItemRenderer = ({item, matches, itemProps, highlighted}) => {\n  const sectionHeading =\n    item.sectionHeading !== undefined ? (\n      <SectionHeading>\n        <IconWindow />\n        {t('From %s', item.sectionHeading)}\n        <Count>{tn('%s result', '%s results', item.sectionCount ?? 0)}</Count>\n      </SectionHeading>\n    ) : null;\n\n  if (item.empty) {\n    return (\n      <Fragment>\n        {sectionHeading}\n        <Empty>{t('No results from %s', item.sectionHeading)}</Empty>\n      </Fragment>\n    );\n  }\n\n  return (\n    <Fragment>\n      {sectionHeading}\n      <SearchResultWrapper {...itemProps} highlighted={highlighted}>\n        <SearchResult highlighted={highlighted} item={item} matches={matches} />\n      </SearchResultWrapper>\n    </Fragment>\n  );\n};\n\ntype Props = Omit<\n  React.ComponentProps<typeof Search>,\n  'sources' | 'minSearch' | 'closeOnSelect' | 'renderItem'\n>;\n\n// TODO(ts): Type based on Search props once that has types\nconst HelpSearch = (props: Props) => (\n  <Search\n    {...props}\n    sources={[HelpSource]}\n    minSearch={3}\n    closeOnSelect={false}\n    renderItem={renderResult}\n  />\n);\n\nconst SectionHeading = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  gap: ${space(1)};\n  align-items: center;\n  background: ${p => p.theme.backgroundSecondary};\n  padding: ${space(1)} ${space(2)};\n\n  &:not(:first-of-type) {\n    border-top: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst Count = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray300};\n`;\n\nconst Empty = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(2)};\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  border-top: 1px solid ${p => p.theme.innerBorder};\n`;\n\nexport default HelpSearch;\n","import {ClassNames, css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport HelpSearch from 'sentry/components/helpSearch';\nimport Hook from 'sentry/components/hook';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = ModalRenderProps & {\n  organization: Organization;\n  placeholder?: string;\n};\n\nfunction HelpSearchModal({\n  Body,\n  closeModal,\n  organization,\n  placeholder = t('Search for documentation, FAQs, blog posts...'),\n  ...props\n}: Props) {\n  const theme = useTheme();\n\n  return (\n    <Body>\n      <ClassNames>\n        {({css: injectedCss}) => (\n          <HelpSearch\n            {...props}\n            entryPoint=\"sidebar_help\"\n            dropdownClassName={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n            renderInput={({getInputProps}) => (\n              <InputWrapper>\n                <Input autoFocus {...getInputProps({type: 'text', placeholder})} />\n              </InputWrapper>\n            )}\n            resultFooter={\n              <Hook name=\"help-modal:footer\" {...{organization, closeModal}} />\n            }\n          />\n        )}\n      </ClassNames>\n    </Body>\n  );\n}\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst Input = styled('input')`\n  width: 100%;\n  padding: ${space(1)};\n  border: none;\n  border-radius: 8px;\n  outline: none;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nexport default withOrganization(HelpSearchModal);\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('Add Secondary Emails'),\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: t('Additional Email'),\n        placeholder: t('e.g. secondary@example.com'),\n        help: t('Designate an alternative email for this account'),\n        saveOnBlur: false,\n        saveMessage: t('Add this new email address to your account?'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n"],"names":["Hook","name","props","HookComponent","Component","hooks","HookStore","map","cb","hookName","this","handleHooks","undefined","componentWillUnmount","unsubscribe","setState","render","children","state","length","parseHtmlMarks","key","htmlString","markTags","highlightPreTag","highlightPostTag","indices","value","openIndex","indexOf","openIndexEnd","slice","closeIndex","closeIndexEnd","push","MARK_TAGS","HelpSource","loading","results","SentryGlobalSearch","debounce","unbouncedSearch","componentDidMount","query","doSearch","componentDidUpdate","nextProps","async","platforms","items","forEach","section","sectionItems","hits","hit","title","description","text","item","sourceType","resultType","site","dompurify","extra","context","context1","to","url","matches","score","refIndex","sectionHeading","sectionCount","emptyHeaderItem","empty","mapSearchResults","search","platform","standardSDKSlug","slug","isLoading","withLatestContext","withSentryRouter","renderResult","itemProps","highlighted","SectionHeading","t","Count","tn","Fragment","Empty","HelpSearch","sources","minSearch","closeOnSelect","renderItem","space","p","theme","backgroundSecondary","innerBorder","fontSizeSmall","gray300","subText","fontSizeMedium","HelpSearchModal","Body","closeModal","organization","placeholder","useTheme","css","injectedCss","entryPoint","dropdownClassName","border","renderInput","getInputProps","InputWrapper","Input","autoFocus","type","resultFooter","modalCss","withOrganization","route","fields","label","help","saveOnBlur","saveMessage"],"sourceRoot":""}