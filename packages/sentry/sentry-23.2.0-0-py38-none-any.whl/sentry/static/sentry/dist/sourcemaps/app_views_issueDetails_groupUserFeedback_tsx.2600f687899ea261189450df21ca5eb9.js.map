{"version":3,"file":"chunks/app_views_issueDetails_groupUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/issueDetails/groupUserFeedback.tsx","webpack:///./app/views/issueDetails/utils.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {EventUserFeedback} from 'sentry/components/events/userFeedback';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {space} from 'sentry/styles/space';\nimport {Group, Organization, Project, UserReport} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport {UserFeedbackEmpty} from 'sentry/views/userFeedback/userFeedbackEmpty';\n\nimport {fetchGroupUserReports} from './utils';\n\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  environments: string[];\n  group: Group;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  reportList: UserReport[];\n  pageLinks?: string | null;\n};\n\nclass GroupUserFeedback extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    reportList: [],\n    pageLinks: '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      !isEqual(prevProps.params, this.props.params) ||\n      prevProps.location.pathname !== this.props.location.pathname ||\n      prevProps.location.search !== this.props.location.search\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchGroupUserReports(this.props.group.id, {\n      ...this.props.params,\n      cursor: this.props.location.query.cursor || '',\n    })\n      .then(([data, _, resp]) => {\n        this.setState({\n          error: false,\n          loading: false,\n          reportList: data,\n          pageLinks: resp?.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      });\n  };\n\n  render() {\n    const {reportList, loading, error} = this.state;\n    const {organization, group} = this.props;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (reportList.length) {\n      return (\n        <Layout.Body>\n          <Layout.Main>\n            {reportList.map((item, idx) => (\n              <StyledEventUserFeedback\n                key={idx}\n                report={item}\n                orgId={organization.slug}\n                issueId={group.id}\n              />\n            ))}\n            <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n          </Layout.Main>\n        </Layout.Body>\n      );\n    }\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <UserFeedbackEmpty projectIds={[group.project.id]} />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nconst StyledEventUserFeedback = styled(EventUserFeedback)`\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(GroupUserFeedback);\n","import orderBy from 'lodash/orderBy';\n\nimport {bulkUpdate} from 'sentry/actionCreators/group';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Group, GroupActivity} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\n\n/**\n * Fetches group data and mark as seen\n *\n * @param orgId organization slug\n * @param groupId groupId\n * @param eventId eventId or \"latest\" or \"oldest\"\n * @param envNames\n * @param projectId project slug required for eventId that is not latest or oldest\n */\nexport async function fetchGroupEvent(\n  api: Client,\n  orgId: string,\n  groupId: string,\n  eventId: string,\n  envNames: string[],\n  projectId?: string\n): Promise<Event> {\n  const url =\n    eventId === 'latest' || eventId === 'oldest'\n      ? `/issues/${groupId}/events/${eventId}/`\n      : `/projects/${orgId}/${projectId}/events/${eventId}/?group_id=${groupId}`;\n\n  const query: {environment?: string[]} = {};\n  if (envNames.length !== 0) {\n    query.environment = envNames;\n  }\n\n  const data = await api.requestPromise(url, {query});\n  return data;\n}\n\nexport function markEventSeen(\n  api: Client,\n  orgId: string,\n  projectId: string,\n  groupId: string\n) {\n  bulkUpdate(\n    api,\n    {\n      orgId,\n      projectId,\n      itemIds: [groupId],\n      failSilently: true,\n      data: {hasSeen: true},\n    },\n    {}\n  );\n}\n\nexport function fetchGroupUserReports(groupId: string, query: Record<string, string>) {\n  const api = new Client();\n\n  return api.requestPromise(`/issues/${groupId}/user-reports/`, {\n    includeAllArgs: true,\n    query,\n  });\n}\n\n/**\n * Returns the environment name for an event or null\n *\n * @param event\n */\nexport function getEventEnvironment(event: Event) {\n  const tag = event.tags.find(({key}) => key === 'environment');\n\n  return tag ? tag.value : null;\n}\n\nconst SUBSCRIPTION_REASONS = {\n  commented: t(\n    \"You're receiving workflow notifications because you have commented on this issue.\"\n  ),\n  assigned: t(\n    \"You're receiving workflow notifications because you were assigned to this issue.\"\n  ),\n  bookmarked: t(\n    \"You're receiving workflow notifications because you have bookmarked this issue.\"\n  ),\n  changed_status: t(\n    \"You're receiving workflow notifications because you have changed the status of this issue.\"\n  ),\n  mentioned: t(\n    \"You're receiving workflow notifications because you have been mentioned in this issue.\"\n  ),\n};\n\n/**\n * @param group\n * @param removeLinks add/remove links to subscription reasons text (default: false)\n * @returns Reason for subscription\n */\nexport function getSubscriptionReason(group: Group) {\n  if (group.subscriptionDetails && group.subscriptionDetails.disabled) {\n    return t('You have disabled workflow notifications for this project.');\n  }\n\n  if (!group.isSubscribed) {\n    return t('Subscribe to workflow notifications for this issue');\n  }\n\n  if (group.subscriptionDetails) {\n    const {reason} = group.subscriptionDetails;\n    if (reason === 'unknown') {\n      return t(\n        \"You're receiving workflow notifications because you are subscribed to this issue.\"\n      );\n    }\n\n    if (reason && SUBSCRIPTION_REASONS.hasOwnProperty(reason)) {\n      return SUBSCRIPTION_REASONS[reason];\n    }\n  }\n\n  return t(\n    \"You're receiving updates because you are subscribed to workflow notifications for this project.\"\n  );\n}\n\nexport function getGroupMostRecentActivity(activities: GroupActivity[]) {\n  // Most recent activity\n  return orderBy([...activities], ({dateCreated}) => new Date(dateCreated), ['desc'])[0];\n}\n\nexport enum ReprocessingStatus {\n  REPROCESSED_AND_HASNT_EVENT = 'reprocessed_and_hasnt_event',\n  REPROCESSED_AND_HAS_EVENT = 'reprocessed_and_has_event',\n  REPROCESSING = 'reprocessing',\n  NO_STATUS = 'no_status',\n}\n\n// Reprocessing Checks\nexport function getGroupReprocessingStatus(\n  group: Group,\n  mostRecentActivity?: GroupActivity\n) {\n  const {status, count, activity: activities} = group;\n  const groupCount = Number(count);\n\n  switch (status) {\n    case 'reprocessing':\n      return ReprocessingStatus.REPROCESSING;\n    case 'unresolved': {\n      const groupMostRecentActivity =\n        mostRecentActivity ?? getGroupMostRecentActivity(activities);\n      if (groupMostRecentActivity?.type === 'reprocess') {\n        if (groupCount === 0) {\n          return ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT;\n        }\n        return ReprocessingStatus.REPROCESSED_AND_HAS_EVENT;\n      }\n      return ReprocessingStatus.NO_STATUS;\n    }\n    default:\n      return ReprocessingStatus.NO_STATUS;\n  }\n}\n"],"names":["GroupUserFeedback","Component","loading","error","reportList","pageLinks","this","setState","fetchGroupUserReports","props","group","id","params","cursor","location","query","then","data","_","resp","getResponseHeader","catch","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","pathname","search","render","state","organization","onRetry","length","map","item","idx","StyledEventUserFeedback","report","orgId","slug","issueId","fullWidth","projectIds","project","EventUserFeedback","space","withOrganization","async","fetchGroupEvent","api","groupId","eventId","envNames","projectId","url","environment","requestPromise","markEventSeen","bulkUpdate","itemIds","failSilently","hasSeen","Client","includeAllArgs","getEventEnvironment","event","tag","tags","find","key","value","SUBSCRIPTION_REASONS","commented","t","assigned","bookmarked","changed_status","mentioned","getSubscriptionReason","subscriptionDetails","disabled","isSubscribed","reason","hasOwnProperty","getGroupMostRecentActivity","activities","orderBy","dateCreated","Date","ReprocessingStatus","getGroupReprocessingStatus","mostRecentActivity","status","count","activity","groupCount","Number","REPROCESSING","type","REPROCESSED_AND_HASNT_EVENT","REPROCESSED_AND_HAS_EVENT","NO_STATUS"],"sourceRoot":""}