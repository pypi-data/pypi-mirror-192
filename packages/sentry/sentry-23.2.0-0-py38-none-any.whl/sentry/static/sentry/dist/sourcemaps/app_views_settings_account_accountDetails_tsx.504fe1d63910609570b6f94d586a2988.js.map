{"version":3,"file":"chunks/app_views_settings_account_accountDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/accountDetails.tsx","webpack:///./app/data/forms/accountPreferences.tsx","webpack:///./app/data/languages.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountDetails.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\n\nexport const route = '/settings/account/details/';\n\n// For fields that are\nconst getUserIsManaged = ({user}) => user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Account Details',\n    fields: [\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Name',\n        placeholder: 'e.g. John Doe',\n        help: 'Your full name',\n      },\n      {\n        name: 'username',\n        type: 'string',\n        required: true,\n\n        autoComplete: 'username',\n        label: 'Username',\n        placeholder: 'e.g. name@example.com',\n        help: '',\n        disabled: getUserIsManaged,\n        visible: ({user}) => user.email !== user.username,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport languages from 'sentry/data/languages';\nimport {timezoneOptions} from 'sentry/data/timezones';\nimport {t} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/details/';\n\n// Called before sending API request, these fields need to be sent as an\n// `options` object\nconst transformOptions = (data: object) => ({options: data});\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Preferences',\n    fields: [\n      {\n        name: 'theme',\n        type: 'select',\n        label: t('Theme'),\n        help: t(\n          \"Select your theme preference. It can be synced to your system's theme, always light mode, or always dark mode.\"\n        ),\n        options: [\n          {value: 'light', label: t('Light')},\n          {value: 'dark', label: t('Dark')},\n          {value: 'system', label: t('Default to system')},\n        ],\n        getData: transformOptions,\n      },\n      {\n        name: 'language',\n        type: 'select',\n        label: t('Language'),\n        options: languages.map(([value, label]) => ({value, label})),\n        getData: transformOptions,\n      },\n      {\n        name: 'timezone',\n        type: 'select',\n        label: t('Timezone'),\n        options: timezoneOptions,\n        getData: transformOptions,\n      },\n      {\n        name: 'clock24Hours',\n        type: 'boolean',\n        label: t('Use a 24-hour clock'),\n        getData: transformOptions,\n      },\n      {\n        name: 'stacktraceOrder',\n        type: 'select',\n        required: false,\n        options: [\n          {value: -1, label: t('Default (let Sentry decide)')},\n          {value: 1, label: t('Most recent call last')},\n          {value: 2, label: t('Most recent call first')},\n        ],\n        label: t('Stack Trace Order'),\n        help: t('Choose the default ordering of frames in stack traces'),\n        getData: transformOptions,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","export default [\n  ['ja', 'Japanese'],\n  ['it', 'Italian'],\n  ['zh-tw', 'Traditional Chinese'],\n  ['cs', 'Czech'],\n  ['ru', 'Russian'],\n  ['zh-cn', 'Simplified Chinese'],\n  ['bg', 'Bulgarian'],\n  ['de', 'German'],\n  ['fi', 'Finnish'],\n  ['fr', 'French'],\n  ['es', 'Spanish'],\n  ['en', 'English'],\n] as const;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {updateUser} from 'sentry/actionCreators/account';\nimport {APIRequestMethod} from 'sentry/api';\nimport AvatarChooser from 'sentry/components/avatarChooser';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport accountDetailsFields from 'sentry/data/forms/accountDetails';\nimport accountPreferencesFields from 'sentry/data/forms/accountPreferences';\nimport {t} from 'sentry/locale';\nimport {User} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nconst ENDPOINT = '/users/me/';\n\nclass AccountDetails extends AsyncView {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    // local state is NOT updated when the form saves\n    return [['user', ENDPOINT]];\n  }\n\n  handleSubmitSuccess = (user: User) => {\n    // the updateUser method updates our Config Store\n    // No components listen to the ConfigStore, they just access it directly\n    updateUser(user);\n    // We need to update the state, because AvatarChooser is using it,\n    // otherwise it will flick\n    this.setState({\n      user,\n    });\n  };\n\n  renderBody() {\n    const user = this.state.user as User;\n\n    const formCommonProps: Partial<FormProps> = {\n      apiEndpoint: ENDPOINT,\n      apiMethod: 'PUT' as APIRequestMethod,\n      allowUndo: true,\n      saveOnBlur: true,\n      onSubmitSuccess: this.handleSubmitSuccess,\n    };\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Account Details')} />\n        <Form initialData={user} {...formCommonProps}>\n          <JsonForm forms={accountDetailsFields} additionalFieldProps={{user}} />\n        </Form>\n        <Form initialData={user.options} {...formCommonProps}>\n          <JsonForm forms={accountPreferencesFields} additionalFieldProps={{user}} />\n        </Form>\n        <AvatarChooser\n          endpoint=\"/users/me/avatar/\"\n          model={user}\n          onSave={resp => {\n            this.handleSubmitSuccess(resp as User);\n          }}\n          isUser\n        />\n      </div>\n    );\n  }\n}\n\nexport default AccountDetails;\n"],"names":["route","title","fields","name","type","required","label","placeholder","help","autoComplete","disabled","user","isManaged","visible","email","username","transformOptions","data","options","t","value","getData","map","timezoneOptions","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","ENDPOINT","AccountDetails","updateUser","setState","getEndpoints","renderBody","state","formCommonProps","apiEndpoint","apiMethod","allowUndo","saveOnBlur","onSubmitSuccess","handleSubmitSuccess","initialData","forms","accountDetailsFields","additionalFieldProps","accountPreferencesFields","endpoint","model","onSave","resp","isUser"],"sourceRoot":""}