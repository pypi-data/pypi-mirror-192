{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_monitors_monitorForm_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+XAMe,MAAMA,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,4oCCkB9B,MAAMO,EAA8C,CAClD,CAACC,MAAO,UAAWC,MAAO,WAC1B,CAACD,MAAO,WAAYC,MAAO,aAGvBC,EAAuB,WAyB7B,SAASC,EAAcC,EAA4BC,GACjD,OAAOA,EAAMC,OAAOC,SAASC,QAAwB,CAACC,EAAM,KAAW,IAAVC,EAAGC,GAAE,EAChE,OAA6B,IAAzBD,EAAEE,QAAQ,YACZH,EAAKC,GAAKC,EACHF,IAGJA,EAAKI,SACRJ,EAAKI,OAAS,CAAC,GAEP,8BAANH,GAA2C,6BAANA,GAClCI,MAAMC,QAAQN,EAAKI,OAAOG,YAC7BP,EAAKI,OAAOG,SAAW,CAAC,KAAM,OAIxB,8BAANN,EACFD,EAAKI,OAAQG,SAAU,GAAKC,SAASN,EAAa,IACnC,6BAAND,EACTD,EAAKI,OAAQG,SAAU,GAAKL,EAE5BF,EAAKI,OAAOH,EAAEQ,OAAO,IAAMP,EAGtBF,EAAI,GACV,CAAC,EACN,CAEA,MAAMU,UAAoBC,EAAAA,UAAiB,sDAClC,IAAIC,EAAAA,EAAU,CAAClB,kBAAe,CAErCmB,mBAAmBC,EAAoBV,GACrC,MAAMW,EAAK,CAAC,EAoBZ,MAlBO,aADCD,IAEJC,EAAG,wBAA0BX,EAAOY,cACpCD,EAAG,yBAA2BX,EAAOa,eACrCF,EAAG,sBAAwBX,EAAOc,YAG3B,aADCd,EAAOY,eAEXD,EAAG,6BAA+BX,EAAOG,SAAS,GAClDQ,EAAG,4BAA8BX,EAAOG,SAAS,KAIjDQ,EAAG,mBAAqBX,EAAOG,SAC/BQ,EAAG,mBAAqBX,EAAOe,WAKhCJ,CACT,CAEA7B,SACE,MAAM,QAACkC,EAAO,YAAEC,GAAejC,KAAKkC,MAC9BC,EAAoBnC,KAAKkC,MAAME,UAAUC,SAAS,GAClDC,EAAkBH,EACpBnC,KAAKkC,MAAMG,SAASE,MAAKC,GAAKA,EAAEC,KAAON,EAAoB,KAC3D,KACJ,OACE,QAAC,IAAI,CACHO,WAAS,EACTC,gBAAc,EACdC,YAAa5C,KAAKkC,MAAMU,YACxBC,UAAW7C,KAAKkC,MAAMW,UACtBrC,MAAOR,KAAK8C,KACZC,YACEf,EACI,CACEgB,KAAMhB,EAAQgB,KACdtB,KAAMM,EAAQN,MAAQrB,EACtB4C,QAASjB,EAAQiB,QAAQC,QACtBlD,KAAKyB,mBAAmBO,EAAQN,KAAMM,EAAQhB,SAEnD,CACEiC,QAASX,EAAkBA,EAAgBY,KAAO,KAClDxB,KAAMrB,GAGd8C,gBAAiBnD,KAAKkC,MAAMiB,gBAC5BlB,YAAaA,EAAY,WAEzB,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEmB,EAAAA,EAAAA,GAAE,cAEhB,QAAC,IAAS,WACPpB,IACC,QAAC,IAAU,CAAC5B,OAAOgD,EAAAA,EAAAA,GAAE,MAAM,UACzB,eAAKC,UAAU,WAAU,UACvB,QAAC,IAAa,UAAErB,EAAQS,UAI9B,QAAC,IAA0B,CACzBO,KAAK,UACL5C,OAAOgD,EAAAA,EAAAA,GAAE,WACTf,SAAUrC,KAAKkC,MAAMG,SAASiB,QAAOL,GAAWA,EAAQM,WACxDC,aAAW,EACXC,MAAML,EAAAA,EAAAA,GACJ,8EAEFM,UAAQ,KAEV,QAAC,IAAS,CACRV,KAAK,OACLW,aAAaP,EAAAA,EAAAA,GAAE,eACfhD,OAAOgD,EAAAA,EAAAA,GAAE,0BACTM,UAAQ,WAId,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEN,EAAAA,EAAAA,GAAE,aAEhB,QAAC,IAAS,gBACKQ,IAAZ5B,GAAyBA,EAAQ6B,cAChC,QAAC,KAAU,CAACnC,KAAK,OAAM,UACpBoC,EAAAA,EAAAA,IACC,sHACA,CACEC,aACE,4BACE,QAAC,IAAS,CAACC,KAAMhC,EAAQ6B,qBAOrC,QAAC,IAAW,CACVb,KAAK,qBACL5C,OAAOgD,EAAAA,EAAAA,GAAE,eACTK,MAAML,EAAAA,EAAAA,GACJ,6FAEFO,YAAY,aAEd,QAAC,IAAW,CACVX,KAAK,uBACL5C,OAAOgD,EAAAA,EAAAA,GAAE,iBACTa,QAAS/D,EACTwD,UAAQ,KAEV,QAAC,KAAQ,UACN,KACC,OAAQ1D,KAAK8C,KAAKoB,SAAS,yBACzB,IAAK,UACH,OACE,QAAC,EAAAC,SAAQ,YACP,QAAC,IAAS,CACRnB,KAAK,kBACL5C,OAAOgD,EAAAA,EAAAA,GAAE,YACTO,YAAY,cACZD,UAAQ,EACRD,MAAMK,EAAAA,EAAAA,IACJ,sGACA,CACEM,MACE,QAAC,IAAY,CAACC,KAAK,yCAIzBC,KAAG,QAAE,CAACC,MAAO,CAACC,WAAYC,EAAAA,GAAAA,KAAAA,aAA6B,UAEzD,QAAC,IAAW,CACVzB,KAAK,kBACL5C,OAAOgD,EAAAA,EAAAA,GAAE,YACTsB,aAAa,MACbT,QAASU,EAAAA,EACTlB,MAAMK,EAAAA,EAAAA,IACJ,sOACA,CAACc,MAAM,wBAGX,QAAC,IAAW,CACV5B,KAAK,wBACL5C,OAAOgD,EAAAA,EAAAA,GAAE,mBACTK,MAAML,EAAAA,EAAAA,GACJ,gMAEFO,YAAY,eAIpB,IAAK,WACH,OACE,QAAC,EAAAQ,SAAQ,YACP,QAACU,EAAa,YACZ,QAAC,IAAU,CACTzE,OAAOgD,EAAAA,EAAAA,GAAE,aACTK,MAAML,EAAAA,EAAAA,GACJ,0EAEF0B,SAAO,EACPpB,UAAQ,KAEV,QAACqB,EAAiB,CAChB/B,KAAK,4BACL5C,OAAOgD,EAAAA,EAAAA,GAAE,aACTO,YAAY,SACZqB,WAAS,EACTtB,UAAQ,KAEV,QAACuB,EAAiB,CAChBjC,KAAK,2BACL5C,OAAOgD,EAAAA,EAAAA,GAAE,YACTa,SAvONiB,EAwOQC,OAAOnF,KAAK8C,KAAKoB,SAAS,8BAAgC,GAxO7B,CACzD,CAAC/D,MAAO,SAAUC,OAAOgF,EAAAA,EAAAA,IAAG,SAAU,UAAWF,IACjD,CAAC/E,MAAO,OAAQC,OAAOgF,EAAAA,EAAAA,IAAG,OAAQ,QAASF,IAC3C,CAAC/E,MAAO,MAAOC,OAAOgF,EAAAA,EAAAA,IAAG,MAAO,OAAQF,IACxC,CAAC/E,MAAO,OAAQC,OAAOgF,EAAAA,EAAAA,IAAG,OAAQ,QAASF,IAC3C,CAAC/E,MAAO,QAASC,OAAOgF,EAAAA,EAAAA,IAAG,QAAS,SAAUF,IAC9C,CAAC/E,MAAO,OAAQC,OAAOgF,EAAAA,EAAAA,IAAG,OAAQ,QAASF,MAoOjBF,WAAS,EACTtB,UAAQ,QAGZ,QAAC,IAAW,CACVV,KAAK,wBACL5C,OAAOgD,EAAAA,EAAAA,GAAE,mBACTK,MAAML,EAAAA,EAAAA,GACJ,gMAEFO,YAAY,eAIpB,QACE,OAAO,KAzPLuB,KAyPU,YAQ9B,EA9MI5D,EAAW,0BAiNjB,MAAMuD,GAAgB,OAAO,MAAK,oBAAZ,CAAa,8FAINrC,GAAKA,EAAE6C,MAAMC,aAAW,KAG/CP,GAAoB,OAAOQ,EAAAA,EAAW,oBAAlB,CAAmB,uDAKvCN,GAAoB,OAAOO,EAAAA,EAAW,oBAAlB,CAAmB,0CAI7C,GAAeC,EAAAA,EAAAA,IAAgBC,EAAAA,EAAAA,GAAapE,G","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/monitorForm.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Observer} from 'mobx-react';\n\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport NumberField from 'sentry/components/forms/fields/numberField';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport SentryProjectSelectorField from 'sentry/components/forms/fields/sentryProjectSelectorField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport TimeSince from 'sentry/components/timeSince';\nimport {timezoneOptions} from 'sentry/data/timezones';\nimport {t, tct, tn} from 'sentry/locale';\nimport {PageFilters, Project, SelectValue} from 'sentry/types';\nimport commonTheme from 'sentry/utils/theme';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {Monitor, MonitorConfig, MonitorTypes, ScheduleType} from './types';\n\nconst SCHEDULE_TYPES: SelectValue<ScheduleType>[] = [\n  {value: 'crontab', label: 'Crontab'},\n  {value: 'interval', label: 'Interval'},\n];\n\nconst DEFAULT_MONITOR_TYPE = 'cron_job';\n\nconst getIntervals = (n: number): SelectValue<string>[] => [\n  {value: 'minute', label: tn('minute', 'minutes', n)},\n  {value: 'hour', label: tn('hour', 'hours', n)},\n  {value: 'day', label: tn('day', 'days', n)},\n  {value: 'week', label: tn('week', 'weeks', n)},\n  {value: 'month', label: tn('month', 'months', n)},\n  {value: 'year', label: tn('year', 'years', n)},\n];\n\ntype Props = {\n  apiEndpoint: string;\n  apiMethod: FormProps['apiMethod'];\n  onSubmitSuccess: FormProps['onSubmitSuccess'];\n  projects: Project[];\n  selection: PageFilters;\n  monitor?: Monitor;\n  submitLabel?: string;\n};\n\ntype TransformedData = {\n  config?: Partial<MonitorConfig>;\n};\n\nfunction transformData(_data: Record<string, any>, model: FormModel) {\n  return model.fields.toJSON().reduce<TransformedData>((data, [k, v]) => {\n    if (k.indexOf('config.') !== 0) {\n      data[k] = v;\n      return data;\n    }\n\n    if (!data.config) {\n      data.config = {};\n    }\n    if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n      if (!Array.isArray(data.config.schedule)) {\n        data.config.schedule = [null, null];\n      }\n    }\n\n    if (k === 'config.schedule.frequency') {\n      data.config!.schedule![0] = parseInt(v as string, 10);\n    } else if (k === 'config.schedule.interval') {\n      data.config!.schedule![1] = v;\n    } else {\n      data.config[k.substr(7)] = v;\n    }\n\n    return data;\n  }, {});\n}\n\nclass MonitorForm extends Component<Props> {\n  form = new FormModel({transformData});\n\n  formDataFromConfig(type: MonitorTypes, config: MonitorConfig) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n            rv['config.timezone'] = config.timezone;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  render() {\n    const {monitor, submitLabel} = this.props;\n    const selectedProjectId = this.props.selection.projects[0];\n    const selectedProject = selectedProjectId\n      ? this.props.projects.find(p => p.id === selectedProjectId + '')\n      : null;\n    return (\n      <Form\n        allowUndo\n        requireChanges\n        apiEndpoint={this.props.apiEndpoint}\n        apiMethod={this.props.apiMethod}\n        model={this.form}\n        initialData={\n          monitor\n            ? {\n                name: monitor.name,\n                type: monitor.type ?? DEFAULT_MONITOR_TYPE,\n                project: monitor.project.slug,\n                ...this.formDataFromConfig(monitor.type, monitor.config),\n              }\n            : {\n                project: selectedProject ? selectedProject.slug : null,\n                type: DEFAULT_MONITOR_TYPE,\n              }\n        }\n        onSubmitSuccess={this.props.onSubmitSuccess}\n        submitLabel={submitLabel}\n      >\n        <Panel>\n          <PanelHeader>{t('Details')}</PanelHeader>\n\n          <PanelBody>\n            {monitor && (\n              <FieldGroup label={t('ID')}>\n                <div className=\"controls\">\n                  <TextCopyInput>{monitor.id}</TextCopyInput>\n                </div>\n              </FieldGroup>\n            )}\n            <SentryProjectSelectorField\n              name=\"project\"\n              label={t('Project')}\n              projects={this.props.projects.filter(project => project.isMember)}\n              valueIsSlug\n              help={t(\n                \"Select the project which contains the recurring job you'd like to monitor.\"\n              )}\n              required\n            />\n            <TextField\n              name=\"name\"\n              placeholder={t('My Cron Job')}\n              label={t('Name your cron monitor')}\n              required\n            />\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Config')}</PanelHeader>\n\n          <PanelBody>\n            {monitor !== undefined && monitor.nextCheckIn && (\n              <PanelAlert type=\"info\">\n                {tct(\n                  'Any changes you make to the execution schedule will only be applied after the next expected check-in [nextCheckin].',\n                  {\n                    nextCheckin: (\n                      <strong>\n                        <TimeSince date={monitor.nextCheckIn} />\n                      </strong>\n                    ),\n                  }\n                )}\n              </PanelAlert>\n            )}\n            <NumberField\n              name=\"config.max_runtime\"\n              label={t('Max Runtime')}\n              help={t(\n                \"Set the number of minutes a recurring job is allowed to run before it's considered failed\"\n              )}\n              placeholder=\"e.g. 30\"\n            />\n            <SelectField\n              name=\"config.schedule_type\"\n              label={t('Schedule Type')}\n              options={SCHEDULE_TYPES}\n              required\n            />\n            <Observer>\n              {() => {\n                switch (this.form.getValue('config.schedule_type')) {\n                  case 'crontab':\n                    return (\n                      <Fragment>\n                        <TextField\n                          name=\"config.schedule\"\n                          label={t('Schedule')}\n                          placeholder=\"*/5 * * * *\"\n                          required\n                          help={tct(\n                            'Any schedule changes will be applied to the next check-in. See [link:Wikipedia] for crontab syntax.',\n                            {\n                              link: (\n                                <ExternalLink href=\"https://en.wikipedia.org/wiki/Cron\" />\n                              ),\n                            }\n                          )}\n                          css={{input: {fontFamily: commonTheme.text.familyMono}}}\n                        />\n                        <SelectField\n                          name=\"config.timezone\"\n                          label={t('Timezone')}\n                          defaultValue=\"UTC\"\n                          options={timezoneOptions}\n                          help={tct(\n                            \"The timezone of your execution environment. Be sure to set this correctly, otherwise the schedule may be mismatched and check-ins will be marked as missed! Use [code:timedatectl] or similar to determine your machine's timezone.\",\n                            {code: <code />}\n                          )}\n                        />\n                        <NumberField\n                          name=\"config.checkin_margin\"\n                          label={t('Check-in Margin')}\n                          help={t(\n                            \"The max error margin (in minutes) before a check-in is considered missed. If you don't expect your job to start immediately at the scheduled time, expand this margin to account for delays.\"\n                          )}\n                          placeholder=\"e.g. 30\"\n                        />\n                      </Fragment>\n                    );\n                  case 'interval':\n                    return (\n                      <Fragment>\n                        <CombinedField>\n                          <FieldGroup\n                            label={t('Frequency')}\n                            help={t(\n                              'The amount of time between each job execution. Example, every 5 hours.'\n                            )}\n                            stacked\n                            required\n                          />\n                          <StyledNumberField\n                            name=\"config.schedule.frequency\"\n                            label={t('Frequency')}\n                            placeholder=\"e.g. 1\"\n                            hideLabel\n                            required\n                          />\n                          <StyledSelectField\n                            name=\"config.schedule.interval\"\n                            label={t('Interval')}\n                            options={getIntervals(\n                              Number(this.form.getValue('config.schedule.frequency') ?? 1)\n                            )}\n                            hideLabel\n                            required\n                          />\n                        </CombinedField>\n                        <NumberField\n                          name=\"config.checkin_margin\"\n                          label={t('Check-in Margin')}\n                          help={t(\n                            \"The max error margin (in minutes) before a check-in is considered missed. If you don't expect your job to start immediately at the scheduled time, expand this margin to account for delays.\"\n                          )}\n                          placeholder=\"e.g. 30\"\n                        />\n                      </Fragment>\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </Observer>\n          </PanelBody>\n        </Panel>\n      </Form>\n    );\n  }\n}\n\nconst CombinedField = styled('div')`\n  display: grid;\n  grid-template-columns: 50% 1fr 1fr;\n  align-items: center;\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n`;\n\nconst StyledNumberField = styled(NumberField)`\n  padding: 0;\n  border-bottom: none;\n`;\n\nconst StyledSelectField = styled(SelectField)`\n  padding-left: 0;\n`;\n\nexport default withPageFilters(withProjects(MonitorForm));\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","SCHEDULE_TYPES","value","label","DEFAULT_MONITOR_TYPE","transformData","_data","model","fields","toJSON","reduce","data","k","v","indexOf","config","Array","isArray","schedule","parseInt","substr","MonitorForm","Component","FormModel","formDataFromConfig","type","rv","schedule_type","checkin_margin","max_runtime","timezone","monitor","submitLabel","props","selectedProjectId","selection","projects","selectedProject","find","p","id","allowUndo","requireChanges","apiEndpoint","apiMethod","form","initialData","name","project","slug","onSubmitSuccess","t","className","filter","isMember","valueIsSlug","help","required","placeholder","undefined","nextCheckIn","tct","nextCheckin","date","options","getValue","Fragment","link","href","css","input","fontFamily","commonTheme","defaultValue","timezoneOptions","code","CombinedField","stacked","StyledNumberField","hideLabel","StyledSelectField","n","Number","tn","theme","innerBorder","NumberField","SelectField","withPageFilters","withProjects"],"sourceRoot":""}