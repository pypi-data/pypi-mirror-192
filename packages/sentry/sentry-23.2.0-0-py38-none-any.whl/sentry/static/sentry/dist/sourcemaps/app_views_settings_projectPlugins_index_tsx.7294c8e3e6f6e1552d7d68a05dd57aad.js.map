{"version":3,"file":"chunks/app_views_settings_projectPlugins_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectPlugins/projectPluginRow.tsx","webpack:///./app/views/settings/projectPlugins/projectPlugins.tsx","webpack:///./app/views/settings/projectPlugins/index.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginsStore.onUpdate(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginsStore.onUpdateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginsStore.onUpdateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginsStore.onFetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginsStore.onFetchAllSuccess(data, {\n        pageLinks: resp?.getResponseHeader('Link') ?? undefined,\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginsStore.onFetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Plugin} from 'sentry/types';\n\ninterface InternalDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\ninterface PluginStoreDefinition extends StoreDefinition, InternalDefinition {\n  onFetchAll: (options?: {resetLoading?: boolean}) => void;\n  onFetchAllError: (err) => void;\n  onFetchAllSuccess: (data: Plugin[], links: {pageLinks?: string}) => void;\n\n  onUpdate: (id: string, updateObj: Partial<Plugin>) => void;\n  onUpdateError: (id: string, _updateObj: Partial<Plugin>, err) => void;\n  onUpdateSuccess: (id: string, _updateObj: Partial<Plugin>) => void;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.reset();\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data, {pageLinks}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(storeConfig);\nexport default PluginStore;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, keyof 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {PureComponent} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst grayText = css`\n  color: #979ba0;\n`;\n\ntype Props = {\n  onChange: (id: string, enabled: boolean) => void;\n  organization: Organization;\n  project: Project;\n} & Plugin &\n  Pick<RouteComponentProps<{}, {}>, 'params' | 'routes'>;\n\nclass ProjectPluginRow extends PureComponent<Props> {\n  handleChange = () => {\n    const {onChange, id, enabled} = this.props;\n    onChange(id, !enabled);\n    const eventKey = !enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: id,\n      integration_type: 'plugin',\n      view: 'legacy_integrations',\n      organization: this.props.organization,\n    });\n  };\n\n  render() {\n    const {id, name, slug, version, author, hasConfiguration, enabled, canDisable} =\n      this.props;\n\n    const configureUrl = recreateRoute(id, this.props);\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => {\n          const LinkOrSpan = hasAccess ? Link : 'span';\n\n          return (\n            <PluginItem key={id} className={slug}>\n              <PluginInfo>\n                <StyledPluginIcon size={48} pluginId={id} />\n                <PluginDescription>\n                  <PluginName>\n                    {`${name} `}\n                    {getDynamicText({\n                      value: (\n                        <Version>{version ? `v${version}` : <em>{t('n/a')}</em>}</Version>\n                      ),\n                      fixed: <Version>v10</Version>,\n                    })}\n                  </PluginName>\n                  <div>\n                    {author && (\n                      <ExternalLink css={grayText} href={author.url}>\n                        {author.name}\n                      </ExternalLink>\n                    )}\n                    {hasConfiguration && (\n                      <span>\n                        {' '}\n                        &middot;{' '}\n                        <LinkOrSpan css={grayText} to={configureUrl}>\n                          {t('Configure plugin')}\n                        </LinkOrSpan>\n                      </span>\n                    )}\n                  </div>\n                </PluginDescription>\n              </PluginInfo>\n              <Switch\n                size=\"lg\"\n                isDisabled={!hasAccess || !canDisable}\n                isActive={enabled}\n                toggle={this.handleChange}\n              />\n            </PluginItem>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nexport default withOrganization(ProjectPluginRow);\n\nconst PluginItem = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst PluginDescription = styled('div')`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst PluginInfo = styled('div')`\n  display: flex;\n  flex: 1;\n  line-height: 24px;\n`;\n\nconst PluginName = styled('div')`\n  font-size: 16px;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: 16px;\n`;\n\n// Keeping these colors the same from old integrations page\nconst Version = styled('span')`\n  color: #babec2;\n`;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Access from 'sentry/components/acl/access';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport RouteError from 'sentry/views/routeError';\n\nimport ProjectPluginRow from './projectPluginRow';\n\ntype Props = {\n  error: React.ComponentProps<typeof RouteError>['error'];\n  loading: boolean;\n  onChange: React.ComponentProps<typeof ProjectPluginRow>['onChange'];\n  organization: Organization;\n  plugins: Plugin[];\n  project: Project;\n} & RouteComponentProps<{}, {}>;\n\nclass ProjectPlugins extends Component<Props> {\n  render() {\n    const {plugins, loading, error, onChange, routes, organization, project} = this.props;\n    const hasError = error;\n    const isLoading = !hasError && loading;\n\n    if (hasError) {\n      return <RouteError error={error} />;\n    }\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    const params = {orgId: organization.slug, projectId: project.slug};\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <div>{t('Legacy Integration')}</div>\n          <div>{t('Enabled')}</div>\n        </PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"warning\">\n            <Access access={['org:integrations']}>\n              {({hasAccess}) =>\n                hasAccess\n                  ? tct(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available. Visit the [link:organization integrations] settings to manage them.\",\n                      {\n                        link: <Link to={`/settings/${organization.slug}/integrations`} />,\n                      }\n                    )\n                  : t(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available.\"\n                    )\n              }\n            </Access>\n          </PanelAlert>\n\n          {plugins\n            .filter(p => {\n              return !p.isHidden;\n            })\n            .map(plugin => (\n              <PanelItem key={plugin.id}>\n                <ProjectPluginRow\n                  params={params}\n                  routes={routes}\n                  project={project}\n                  {...plugin}\n                  onChange={onChange}\n                />\n              </PanelItem>\n            ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default ProjectPlugins;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {disablePlugin, enablePlugin, fetchPlugins} from 'sentry/actionCreators/plugins';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport ProjectPlugins from './projectPlugins';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  plugins: {\n    error: React.ComponentProps<typeof ProjectPlugins>['error'];\n    loading: boolean;\n    plugins: Plugin[];\n  };\n  project: Project;\n};\n\nclass ProjectPluginsContainer extends Component<Props> {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    const {organization, params} = this.props;\n\n    const plugins = await fetchPlugins({...params, orgId: organization.slug});\n    const installCount = plugins.filter(\n      plugin => plugin.hasConfiguration && plugin.enabled\n    ).length;\n    trackIntegrationAnalytics(\n      'integrations.index_viewed',\n      {\n        integrations_installed: installCount,\n        view: 'legacy_integrations',\n        organization: this.props.organization,\n      },\n      {startSession: true}\n    );\n  };\n\n  handleChange = (pluginId: string, shouldEnable: boolean) => {\n    const {organization, params} = this.props;\n\n    const actionCreator = shouldEnable ? enablePlugin : disablePlugin;\n    actionCreator({projectId: params.projectId, orgId: organization.slug, pluginId});\n  };\n\n  render() {\n    const {loading, error, plugins} = this.props.plugins || {};\n    const {organization} = this.props;\n\n    const title = t('Legacy Integrations');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} orgSlug={organization.slug} />\n        <SettingsPageHeader title={title} />\n        <PermissionAlert />\n\n        <ProjectPlugins\n          {...this.props}\n          onChange={this.handleChange}\n          loading={loading}\n          error={error}\n          plugins={plugins}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport {ProjectPluginsContainer};\n\nexport default withPlugins(ProjectPluginsContainer);\n"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginsStore","request","requestPromise","then","catch","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","_","pageLinks","getResponseHeader","undefined","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","defaultState","loading","plugins","error","storeConfig","state","updating","Map","reset","this","getInitialState","getState","_plugins","Array","from","values","init","triggerState","trigger","onFetchAll","resetLoading","onFetchAllSuccess","map","plugin","id","onFetchAllError","onUpdate","updateObj","get","newPlugin","set","onUpdateSuccess","_updateObj","delete","onUpdateError","origPlugin","createStore","WrappedComponent","WithPlugins","Component","setState","componentDidMount","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","props","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","render","getDisplayName","withOrganization","withProject","PermissionAlert","access","hasAccess","type","grayText","ProjectPluginRow","PureComponent","onChange","eventKey","trackIntegrationAnalytics","integration","integration_type","view","name","version","author","hasConfiguration","canDisable","configureUrl","recreateRoute","LinkOrSpan","Link","PluginItem","className","PluginInfo","StyledPluginIcon","size","PluginDescription","PluginName","getDynamicText","value","Version","fixed","css","href","url","to","isDisabled","isActive","toggle","handleChange","PluginIcon","ProjectPlugins","routes","isLoading","tct","link","filter","p","isHidden","ProjectPluginsContainer","async","installCount","length","integrations_installed","startSession","shouldEnable","fetchData","title","Fragment","orgSlug","withPlugins"],"sourceRoot":""}