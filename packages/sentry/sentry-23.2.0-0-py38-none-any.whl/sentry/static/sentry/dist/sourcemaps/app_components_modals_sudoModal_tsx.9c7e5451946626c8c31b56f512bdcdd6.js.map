{"version":3,"file":"chunks/app_components_modals_sudoModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/account.tsx","webpack:///./app/components/hook.tsx","webpack:///./app/components/modals/sudoModal.tsx","webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/constants/superuserAccessErrors.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {User, UserIdentityConfig} from 'sentry/types';\n\nexport async function disconnectIdentity(\n  identity: UserIdentityConfig,\n  onSuccess: {(): void}\n) {\n  const api = new Client();\n\n  try {\n    await api.requestPromise(\n      `/users/me/user-identities/${identity.category}/${identity.id}/`,\n      {\n        method: 'DELETE',\n      }\n    );\n  } catch {\n    addErrorMessage('Error disconnecting identity');\n    return;\n  }\n\n  addSuccessMessage(`Disconnected ${identity.provider.name}`);\n  onSuccess();\n}\n\nexport function updateUser(user: User) {\n  const previousUser = ConfigStore.get('user');\n\n  // If the user changed their theme preferences, we should also update\n  // the config store\n  if (\n    previousUser.options.theme !== user.options.theme &&\n    user.options.theme !== 'system'\n  ) {\n    ConfigStore.set('theme', user.options.theme);\n  }\n\n  // Ideally we'd fire an action but this is gonna get refactored soon anyway\n  ConfigStore.set('user', user);\n}\n\nexport function logout(api: Client) {\n  return api.requestPromise('/auth/', {method: 'DELETE'});\n}\n\nexport function removeAuthenticator(api: Client, userId: string, authId: string) {\n  return api.requestPromise(`/users/${userId}/authenticators/${authId}/`, {\n    method: 'DELETE',\n  });\n}\n","import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {HookName, Hooks} from 'sentry/types/hooks';\n\ntype Props<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  name: H;\n  /**\n   * If children are provided as a function to the Hook, the hooks will be\n   * passed down as a render prop.\n   */\n  children?: (opts: {hooks: Array<Hooks[H]>}) => React.ReactNode;\n} & Omit<Parameters<Hooks[H]>[0], 'name'>;\n\ntype HookState<H extends HookName> = {\n  hooks: Array<Hooks[H]>;\n};\n\n/**\n * Instead of accessing the HookStore directly, use this.\n *\n * If the hook slot needs to perform anything w/ the hooks, you can pass a\n * function as a child and you will receive an object with a `hooks` key\n *\n * Example:\n *\n *   <Hook name=\"my-hook\">\n *     {({hooks}) => hooks.map(hook => (\n *       <Wrapper>{hook}</Wrapper>\n *     ))}\n *   </Hook>\n */\nfunction Hook<H extends HookName>({name, ...props}: Props<H>) {\n  class HookComponent extends Component<{}, HookState<H>> {\n    static displayName = `Hook(${name})`;\n\n    state = {\n      hooks: HookStore.get(name).map(cb => cb(props)),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    handleHooks(hookName: HookName, hooks: Array<Hooks[H]>) {\n      // Make sure that the incoming hook update matches this component's hook name\n      if (hookName !== name) {\n        return;\n      }\n\n      this.setState({hooks: hooks.map(cb => cb(props))});\n    }\n\n    unsubscribe = HookStore.listen(\n      (hookName: HookName, hooks: Array<Hooks[H]>) => this.handleHooks(hookName, hooks),\n      undefined\n    );\n\n    render() {\n      const {children} = props;\n\n      if (!this.state.hooks || !this.state.hooks.length) {\n        return null;\n      }\n\n      if (typeof children === 'function') {\n        return children({hooks: this.state.hooks});\n      }\n\n      return this.state.hooks;\n    }\n  }\n\n  return <HookComponent />;\n}\n\nexport default Hook;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {logout} from 'sentry/actionCreators/account';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport SecretField from 'sentry/components/forms/fields/secretField';\nimport Form from 'sentry/components/forms/form';\nimport Hook from 'sentry/components/hook';\nimport U2fContainer from 'sentry/components/u2f/u2fContainer';\nimport {ErrorCodes} from 'sentry/constants/superuserAccessErrors';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = WithRouterProps &\n  Pick<ModalRenderProps, 'Body' | 'Header'> & {\n    api: Client;\n    closeModal: () => void;\n    /**\n     * User is a superuser without an active su session\n     */\n    isSuperuser?: boolean;\n    needsReload?: boolean;\n    /**\n     * expects a function that returns a Promise\n     */\n    retryRequest?: () => Promise<any>;\n  };\n\ntype State = {\n  authenticators: Array<Authenticator>;\n  busy: boolean;\n  error: boolean;\n  errorType: string;\n  showAccessForms: boolean;\n  superuserAccessCategory: string;\n  superuserReason: string;\n};\n\nclass SudoModal extends Component<Props, State> {\n  state: State = {\n    authenticators: [],\n    busy: false,\n    error: false,\n    errorType: '',\n    showAccessForms: true,\n    superuserAccessCategory: '',\n    superuserReason: '',\n  };\n\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  handleSubmitCOPS = () => {\n    this.setState({\n      superuserAccessCategory: 'cops_csm',\n      superuserReason: 'COPS and CSM use',\n    });\n  };\n\n  handleSubmit = async data => {\n    const {api, isSuperuser} = this.props;\n    const {superuserAccessCategory, superuserReason, authenticators} = this.state;\n    const disableU2FForSUForm = ConfigStore.get('disableU2FForSUForm');\n\n    const suAccessCategory = superuserAccessCategory || data.superuserAccessCategory;\n\n    const suReason = superuserReason || data.superuserReason;\n\n    if (!authenticators.length && !disableU2FForSUForm) {\n      this.handleError(ErrorCodes.noAuthenticator);\n      return;\n    }\n\n    if (this.state.showAccessForms && isSuperuser && !disableU2FForSUForm) {\n      this.setState({\n        showAccessForms: false,\n        superuserAccessCategory: suAccessCategory,\n        superuserReason: suReason,\n      });\n    } else {\n      try {\n        await api.requestPromise('/auth/', {method: 'PUT', data});\n        this.handleSuccess();\n      } catch (err) {\n        this.handleError(err);\n      }\n    }\n  };\n\n  handleSuccess = () => {\n    const {closeModal, isSuperuser, location, needsReload, router, retryRequest} =\n      this.props;\n\n    if (!retryRequest) {\n      closeModal();\n      return;\n    }\n\n    if (isSuperuser) {\n      router.replace({pathname: location.pathname, state: {forceUpdate: new Date()}});\n      if (needsReload) {\n        window.location.reload();\n      }\n      return;\n    }\n\n    this.setState({busy: true}, () => {\n      retryRequest().then(() => {\n        this.setState({busy: false, showAccessForms: true}, closeModal);\n      });\n    });\n  };\n\n  handleError = err => {\n    let errorType = '';\n    if (err.status === 403) {\n      if (err.responseJSON.detail.code === 'no_u2f') {\n        errorType = ErrorCodes.noAuthenticator;\n      } else {\n        errorType = ErrorCodes.invalidPassword;\n      }\n    } else if (err.status === 401) {\n      errorType = ErrorCodes.invalidSSOSession;\n    } else if (err.status === 400) {\n      errorType = ErrorCodes.invalidAccessCategory;\n    } else if (err === ErrorCodes.noAuthenticator) {\n      errorType = ErrorCodes.noAuthenticator;\n    } else {\n      errorType = ErrorCodes.unknownError;\n    }\n    this.setState({\n      busy: false,\n      error: true,\n      errorType,\n      showAccessForms: true,\n    });\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    this.setState({busy: true});\n\n    const {api, isSuperuser} = this.props;\n\n    try {\n      data.isSuperuserModal = isSuperuser;\n      data.superuserAccessCategory = this.state.superuserAccessCategory;\n      data.superuserReason = this.state.superuserReason;\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({busy: false});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  handleLogout = async () => {\n    const {api} = this.props;\n    try {\n      await logout(api);\n    } catch {\n      // ignore errors\n    }\n    window.location.assign(`/auth/login/?next=${encodeURIComponent(location.pathname)}`);\n  };\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  renderBodyContent() {\n    const {isSuperuser} = this.props;\n    const {authenticators, error, errorType, showAccessForms} = this.state;\n    const user = ConfigStore.get('user');\n    const isSelfHosted = ConfigStore.get('isSelfHosted');\n    const validateSUForm = ConfigStore.get('validateSUForm');\n\n    if (errorType === ErrorCodes.invalidSSOSession) {\n      this.handleLogout();\n      return null;\n    }\n\n    if (\n      (!user.hasPasswordAuth && authenticators.length === 0) ||\n      (isSuperuser && !isSelfHosted && validateSUForm)\n    ) {\n      return (\n        <Fragment>\n          <StyledTextBlock>\n            {isSuperuser\n              ? t(\n                  'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n                )\n              : t('You will need to reauthenticate to continue')}\n          </StyledTextBlock>\n          {error && (\n            <StyledAlert type=\"error\" showIcon>\n              {errorType}\n            </StyledAlert>\n          )}\n          {isSuperuser ? (\n            <Form\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/auth/\"\n              submitLabel={showAccessForms ? t('Continue') : t('Re-authenticate')}\n              onSubmit={this.handleSubmit}\n              onSubmitSuccess={this.handleSuccess}\n              onSubmitError={this.handleError}\n              initialData={{isSuperuserModal: isSuperuser}}\n              extraButton={\n                <BackWrapper>\n                  <Button type=\"submit\" onClick={this.handleSubmitCOPS}>\n                    {t('COPS/CSM')}\n                  </Button>\n                </BackWrapper>\n              }\n              resetOnError\n            >\n              {!isSelfHosted && showAccessForms && (\n                <Hook name=\"component:superuser-access-category\" />\n              )}\n              {!isSelfHosted && !showAccessForms && (\n                <U2fContainer\n                  authenticators={authenticators}\n                  displayMode=\"sudo\"\n                  onTap={this.handleU2fTap}\n                />\n              )}\n            </Form>\n          ) : (\n            <Button\n              priority=\"primary\"\n              href={`/auth/login/?next=${encodeURIComponent(location.pathname)}`}\n            >\n              {t('Continue')}\n            </Button>\n          )}\n        </Fragment>\n      );\n    }\n\n    return (\n      <Fragment>\n        <StyledTextBlock>\n          {isSuperuser\n            ? t(\n                'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n              )\n            : t('Help us keep your account safe by confirming your identity.')}\n        </StyledTextBlock>\n\n        {error && (\n          <StyledAlert type=\"error\" showIcon>\n            {errorType}\n          </StyledAlert>\n        )}\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/auth/\"\n          submitLabel={t('Confirm Password')}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={this.handleError}\n          hideFooter={!user.hasPasswordAuth && authenticators.length === 0}\n          initialData={{isSuperuserModal: isSuperuser}}\n          resetOnError\n        >\n          {user.hasPasswordAuth && (\n            <StyledSecretField\n              inline={false}\n              label={t('Password')}\n              name=\"password\"\n              autoFocus\n              flexibleControlStateSize\n            />\n          )}\n\n          <U2fContainer\n            authenticators={authenticators}\n            displayMode=\"sudo\"\n            onTap={this.handleU2fTap}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body} = this.props;\n\n    return (\n      <Fragment>\n        <Header closeButton>{t('Confirm Password to Continue')}</Header>\n        <Body>{this.renderBodyContent()}</Body>\n      </Fragment>\n    );\n  }\n}\n\nexport default withSentryRouter(withApi(SudoModal));\nexport {SudoModal};\n\nconst StyledTextBlock = styled(TextBlock)`\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledSecretField = styled(SecretField)`\n  padding-left: 0;\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n\nconst BackWrapper = styled('div')`\n  width: 100%;\n  margin-left: ${space(4)};\n`;\n","import {Authenticator} from 'sentry/types';\n\nimport U2fSign from './u2fsign';\n\ntype U2FSignProps = React.ComponentProps<typeof U2fSign>;\n\ntype Props = {\n  authenticators: Array<Authenticator>;\n  onTap: U2FSignProps['onTap'];\n  className?: string;\n  displayMode?: U2FSignProps['displayMode'];\n};\n\nfunction U2fContainer({className, authenticators, ...props}: Props) {\n  if (!authenticators.length) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      {authenticators.map(auth =>\n        auth.id === 'u2f' && auth.challenge ? (\n          <U2fSign key={auth.id} {...props} challengeData={auth.challenge} />\n        ) : null\n      )}\n    </div>\n  );\n}\n\nexport default U2fContainer;\n","// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import {Component} from 'react';\nimport * as Sentry from '@sentry/react';\nimport * as cbor from 'cbor-web';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype TapParams = {\n  challenge: string;\n  response: string;\n  isSuperuserModal?: boolean;\n  superuserAccessCategory?: string;\n  superuserReason?: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  onTap: ({\n    response,\n    challenge,\n    isSuperuserModal,\n    superuserAccessCategory,\n    superuserReason,\n  }: TapParams) => Promise<void>;\n  organization: Organization;\n  silentIfUnsupported: boolean;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  challengeElement: HTMLInputElement | null;\n  deviceFailure: string | null;\n  failCount: number;\n  formElement: HTMLFormElement | null;\n  hasBeenTapped: boolean;\n  isSafari: boolean;\n  isSupported: boolean | null;\n  responseElement: HTMLInputElement | null;\n};\n\nclass U2fInterface extends Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n    isSafari: false,\n    failCount: 0,\n  };\n\n  componentDidMount() {\n    const supported = !!window.PublicKeyCredential;\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    const isSafari =\n      navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n\n    if (isSafari) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        deviceFailure: 'safari: requires interaction',\n        isSafari,\n        hasBeenTapped: false,\n      });\n    }\n\n    if (supported && !isSafari) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    if (this.props.flowMode === 'sign') {\n      const authenticatorData = {\n        keyHandle: data.id,\n        clientData: bufferToBase64url(data.response.clientDataJSON),\n        signatureData: bufferToBase64url(data.response.signature),\n        authenticatorData: bufferToBase64url(data.response.authenticatorData),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n    if (this.props.flowMode === 'enroll') {\n      const authenticatorData = {\n        id: data.id,\n        rawId: bufferToBase64url(data.rawId),\n        response: {\n          attestationObject: bufferToBase64url(data.response.attestationObject),\n          clientDataJSON: bufferToBase64url(data.response.clientDataJSON),\n        },\n        type: bufferToBase64url(data.type),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n\n    throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n          failCount: this.state.failCount + 1,\n        });\n      });\n  }\n\n  webAuthnSignIn(publicKeyCredentialRequestOptions) {\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  webAuthnRegister(publicKey) {\n    const promise = navigator.credentials.create({\n      publicKey,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    if (this.props.flowMode === 'sign') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnAuthenticationData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      challenge\n        .then(data => {\n          this.webAuthnSignIn(data);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else if (this.props.flowMode === 'enroll') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnRegisterData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      // challenge contains a PublicKeyCredentialRequestOptions object for webauthn registration\n      challenge\n        .then(data => {\n          this.webAuthnRegister(data.publicKey);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderSafariWebAuthn = () => {\n    return (\n      <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n        {this.props.flowMode === 'enroll'\n          ? t('Enroll with WebAuthn')\n          : t('Sign in with WebAuthn')}\n      </a>\n    );\n  };\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    if (this.state.isSafari && this.state.failCount === 0) {\n      return this.renderSafariWebAuthn();\n    }\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                `[p1:The Sentry server administrator modified the device\n                 registrations.] [p2:You need to remove and re-add the device to continue using\n                 your U2F device. Use a different sign-in method or contact [support] for\n                 assistance.]`,\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure\n            ? this.state.failCount === 0 && this.state.isSafari\n              ? ' loading-dots'\n              : ' device-failure'\n            : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default withOrganization(U2fInterface);\n","import {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = React.ComponentProps<typeof U2fInterface>;\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode?: 'signin' | 'enroll' | 'sudo';\n};\n\nfunction U2fSign({displayMode = 'signin', ...props}: Props) {\n  const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n\n  return (\n    <U2fInterface\n      {...props}\n      silentIfUnsupported={displayMode === 'sudo'}\n      flowMode={flowMode}\n    >\n      <p>{MESSAGES[displayMode] ?? null}</p>\n    </U2fInterface>\n  );\n}\n\nexport default U2fSign;\n","// TODO(epurkhiser): These can't be translated with `t()` because they're an\n// Enum. We should probably just use a regular map\nexport enum ErrorCodes {\n  invalidPassword = 'Incorrect password',\n  invalidSSOSession = 'Your SSO Session has expired, please reauthenticate',\n  invalidAccessCategory = 'Please fill out the access category and reason correctly',\n  noAuthenticator = 'Please add a U2F authenticator to your account',\n  unknownError = 'An error ocurred, please try again',\n}\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'sentry/api';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useApi from 'sentry/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["async","disconnectIdentity","identity","onSuccess","api","Client","requestPromise","category","id","method","addErrorMessage","addSuccessMessage","provider","name","updateUser","user","ConfigStore","options","theme","logout","removeAuthenticator","userId","authId","Hook","props","HookComponent","Component","hooks","HookStore","map","cb","hookName","this","handleHooks","undefined","componentWillUnmount","unsubscribe","setState","render","children","state","length","SudoModal","authenticators","busy","error","errorType","showAccessForms","superuserAccessCategory","superuserReason","isSuperuser","disableU2FForSUForm","suAccessCategory","data","suReason","handleSuccess","err","handleError","ErrorCodes","closeModal","location","needsReload","router","retryRequest","replace","pathname","forceUpdate","Date","window","reload","then","status","responseJSON","detail","code","isSuperuserModal","assign","encodeURIComponent","componentDidMount","getAuthenticators","renderBodyContent","isSelfHosted","validateSUForm","handleLogout","hasPasswordAuth","Fragment","StyledTextBlock","t","StyledAlert","type","showIcon","apiMethod","apiEndpoint","submitLabel","onSubmit","handleSubmit","onSubmitSuccess","onSubmitError","initialData","extraButton","BackWrapper","onClick","handleSubmitCOPS","resetOnError","displayMode","onTap","handleU2fTap","priority","href","hideFooter","StyledSecretField","inline","label","autoFocus","flexibleControlStateSize","Header","Body","closeButton","withSentryRouter","withApi","TextBlock","space","SecretField","Alert","U2fContainer","className","auth","challenge","challengeData","base64urlToBuffer","baseurl64String","padding","slice","base64String","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","isSafari","failCount","invokeU2fFlow","ref","form","value","JSON","stringify","onTryAgain","flowMode","supportMail","support","renderSafariWebAuthn","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","supported","PublicKeyCredential","navigator","userAgent","includes","getU2FResponse","response","authenticatorData","keyHandle","clientData","clientDataJSON","signatureData","signature","rawId","attestationObject","Error","submitU2fResponse","promise","u2fResponse","catch","submit","failure","metaData","Sentry","webAuthnSignIn","publicKeyCredentialRequestOptions","credentials","get","publicKey","webAuthnRegister","create","challengeArray","webAuthnAuthenticationData","cbor","decodeFirst","webAuthnRegisterData","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","renderPrompt","bindChallengeElement","bindResponseElement","withOrganization","MESSAGES","signin","sudo","enroll","U2fSign","persistInFlight","providedApi","localApi","useRef","current","clearOnUnmount","useCallback","clear","useEffect","WrappedComponent","WithApi","propsApi","useApi","displayName","getDisplayName"],"sourceRoot":""}