{"version":3,"file":"chunks/SuperuserAccessForm.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/superuserAccessForm.tsx","webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/constants/superuserAccessErrors.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {logout} from 'sentry/actionCreators/account';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport Hook from 'sentry/components/hook';\nimport ThemeAndStyleProvider from 'sentry/components/themeAndStyleProvider';\nimport U2fContainer from 'sentry/components/u2f/u2fContainer';\nimport {ErrorCodes} from 'sentry/constants/superuserAccessErrors';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = {\n  api: Client;\n};\n\ntype State = {\n  authenticators: Array<Authenticator>;\n  error: boolean;\n  errorType: string;\n  showAccessForms: boolean;\n  superuserAccessCategory: string;\n  superuserReason: string;\n};\n\nclass SuperuserAccessForm extends Component<Props, State> {\n  state: State = {\n    authenticators: [],\n    error: false,\n    errorType: '',\n    showAccessForms: true,\n    superuserAccessCategory: '',\n    superuserReason: '',\n  };\n\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  handleSubmitCOPS = () => {\n    this.setState({\n      superuserAccessCategory: 'cops_csm',\n      superuserReason: 'COPS and CSM use',\n    });\n  };\n\n  handleSubmit = async data => {\n    const {api} = this.props;\n    const {superuserAccessCategory, superuserReason, authenticators} = this.state;\n    const disableU2FForSUForm = ConfigStore.get('disableU2FForSUForm');\n\n    const suAccessCategory = superuserAccessCategory || data.superuserAccessCategory;\n\n    const suReason = superuserReason || data.superuserReason;\n\n    if (!authenticators.length && !disableU2FForSUForm) {\n      this.handleError(ErrorCodes.noAuthenticator);\n      return;\n    }\n\n    if (this.state.showAccessForms && !disableU2FForSUForm) {\n      this.setState({\n        showAccessForms: false,\n        superuserAccessCategory: suAccessCategory,\n        superuserReason: suReason,\n      });\n    } else {\n      try {\n        await api.requestPromise('/auth/', {method: 'PUT', data});\n        this.handleSuccess();\n      } catch (err) {\n        this.handleError(err);\n      }\n    }\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    const {api} = this.props;\n    try {\n      data.isSuperuserModal = true;\n      data.superuserAccessCategory = this.state.superuserAccessCategory;\n      data.superuserReason = this.state.superuserReason;\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({showAccessForms: true});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  handleSuccess = () => {\n    window.location.reload();\n  };\n\n  handleError = err => {\n    let errorType = '';\n    if (err.status === 403) {\n      if (err.responseJSON.detail.code === 'no_u2f') {\n        errorType = ErrorCodes.noAuthenticator;\n      } else {\n        errorType = ErrorCodes.invalidPassword;\n      }\n    } else if (err.status === 401) {\n      errorType = ErrorCodes.invalidSSOSession;\n    } else if (err.status === 400) {\n      errorType = ErrorCodes.invalidAccessCategory;\n    } else if (err === ErrorCodes.noAuthenticator) {\n      errorType = ErrorCodes.noAuthenticator;\n    } else {\n      errorType = ErrorCodes.unknownError;\n    }\n    this.setState({\n      error: true,\n      errorType,\n      showAccessForms: true,\n    });\n  };\n\n  handleLogout = async () => {\n    const {api} = this.props;\n    try {\n      await logout(api);\n    } catch {\n      // ignore errors\n    }\n    window.location.assign('/auth/login/');\n  };\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  render() {\n    const {authenticators, error, errorType, showAccessForms} = this.state;\n    if (errorType === ErrorCodes.invalidSSOSession) {\n      this.handleLogout();\n      return null;\n    }\n    return (\n      <ThemeAndStyleProvider>\n        <Form\n          submitLabel={t('Continue')}\n          onSubmit={this.handleSubmit}\n          initialData={{isSuperuserModal: true}}\n          extraButton={\n            <BackWrapper>\n              <Button type=\"submit\" onClick={this.handleSubmitCOPS}>\n                {t('COPS/CSM')}\n              </Button>\n            </BackWrapper>\n          }\n          resetOnError\n        >\n          {error && (\n            <StyledAlert type=\"error\" showIcon>\n              {errorType}\n            </StyledAlert>\n          )}\n          {showAccessForms && <Hook name=\"component:superuser-access-category\" />}\n          {!showAccessForms && (\n            <U2fContainer\n              authenticators={authenticators}\n              displayMode=\"sudo\"\n              onTap={this.handleU2fTap}\n            />\n          )}\n        </Form>\n      </ThemeAndStyleProvider>\n    );\n  }\n}\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n\nconst BackWrapper = styled('div')`\n  width: 100%;\n  margin-left: ${space(4)};\n`;\n\nexport default withApi(SuperuserAccessForm);\n","import {Authenticator} from 'sentry/types';\n\nimport U2fSign from './u2fsign';\n\ntype U2FSignProps = React.ComponentProps<typeof U2fSign>;\n\ntype Props = {\n  authenticators: Array<Authenticator>;\n  onTap: U2FSignProps['onTap'];\n  className?: string;\n  displayMode?: U2FSignProps['displayMode'];\n};\n\nfunction U2fContainer({className, authenticators, ...props}: Props) {\n  if (!authenticators.length) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      {authenticators.map(auth =>\n        auth.id === 'u2f' && auth.challenge ? (\n          <U2fSign key={auth.id} {...props} challengeData={auth.challenge} />\n        ) : null\n      )}\n    </div>\n  );\n}\n\nexport default U2fContainer;\n","// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import {Component} from 'react';\nimport * as Sentry from '@sentry/react';\nimport * as cbor from 'cbor-web';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype TapParams = {\n  challenge: string;\n  response: string;\n  isSuperuserModal?: boolean;\n  superuserAccessCategory?: string;\n  superuserReason?: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  onTap: ({\n    response,\n    challenge,\n    isSuperuserModal,\n    superuserAccessCategory,\n    superuserReason,\n  }: TapParams) => Promise<void>;\n  organization: Organization;\n  silentIfUnsupported: boolean;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  challengeElement: HTMLInputElement | null;\n  deviceFailure: string | null;\n  failCount: number;\n  formElement: HTMLFormElement | null;\n  hasBeenTapped: boolean;\n  isSafari: boolean;\n  isSupported: boolean | null;\n  responseElement: HTMLInputElement | null;\n};\n\nclass U2fInterface extends Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n    isSafari: false,\n    failCount: 0,\n  };\n\n  componentDidMount() {\n    const supported = !!window.PublicKeyCredential;\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    const isSafari =\n      navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n\n    if (isSafari) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        deviceFailure: 'safari: requires interaction',\n        isSafari,\n        hasBeenTapped: false,\n      });\n    }\n\n    if (supported && !isSafari) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    if (this.props.flowMode === 'sign') {\n      const authenticatorData = {\n        keyHandle: data.id,\n        clientData: bufferToBase64url(data.response.clientDataJSON),\n        signatureData: bufferToBase64url(data.response.signature),\n        authenticatorData: bufferToBase64url(data.response.authenticatorData),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n    if (this.props.flowMode === 'enroll') {\n      const authenticatorData = {\n        id: data.id,\n        rawId: bufferToBase64url(data.rawId),\n        response: {\n          attestationObject: bufferToBase64url(data.response.attestationObject),\n          clientDataJSON: bufferToBase64url(data.response.clientDataJSON),\n        },\n        type: bufferToBase64url(data.type),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n\n    throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n          failCount: this.state.failCount + 1,\n        });\n      });\n  }\n\n  webAuthnSignIn(publicKeyCredentialRequestOptions) {\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  webAuthnRegister(publicKey) {\n    const promise = navigator.credentials.create({\n      publicKey,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    if (this.props.flowMode === 'sign') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnAuthenticationData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      challenge\n        .then(data => {\n          this.webAuthnSignIn(data);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else if (this.props.flowMode === 'enroll') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnRegisterData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      // challenge contains a PublicKeyCredentialRequestOptions object for webauthn registration\n      challenge\n        .then(data => {\n          this.webAuthnRegister(data.publicKey);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderSafariWebAuthn = () => {\n    return (\n      <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n        {this.props.flowMode === 'enroll'\n          ? t('Enroll with WebAuthn')\n          : t('Sign in with WebAuthn')}\n      </a>\n    );\n  };\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    if (this.state.isSafari && this.state.failCount === 0) {\n      return this.renderSafariWebAuthn();\n    }\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                `[p1:The Sentry server administrator modified the device\n                 registrations.] [p2:You need to remove and re-add the device to continue using\n                 your U2F device. Use a different sign-in method or contact [support] for\n                 assistance.]`,\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure\n            ? this.state.failCount === 0 && this.state.isSafari\n              ? ' loading-dots'\n              : ' device-failure'\n            : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default withOrganization(U2fInterface);\n","import {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = React.ComponentProps<typeof U2fInterface>;\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode?: 'signin' | 'enroll' | 'sudo';\n};\n\nfunction U2fSign({displayMode = 'signin', ...props}: Props) {\n  const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n\n  return (\n    <U2fInterface\n      {...props}\n      silentIfUnsupported={displayMode === 'sudo'}\n      flowMode={flowMode}\n    >\n      <p>{MESSAGES[displayMode] ?? null}</p>\n    </U2fInterface>\n  );\n}\n\nexport default U2fSign;\n","// TODO(epurkhiser): These can't be translated with `t()` because they're an\n// Enum. We should probably just use a regular map\nexport enum ErrorCodes {\n  invalidPassword = 'Incorrect password',\n  invalidSSOSession = 'Your SSO Session has expired, please reauthenticate',\n  invalidAccessCategory = 'Please fill out the access category and reason correctly',\n  noAuthenticator = 'Please add a U2F authenticator to your account',\n  unknownError = 'An error ocurred, please try again',\n}\n"],"names":["SuperuserAccessForm","Component","authenticators","error","errorType","showAccessForms","superuserAccessCategory","superuserReason","this","setState","async","api","props","state","disableU2FForSUForm","ConfigStore","suAccessCategory","data","suReason","length","requestPromise","method","handleSuccess","err","handleError","ErrorCodes","isSuperuserModal","window","location","reload","status","responseJSON","detail","code","logout","assign","componentDidMount","getAuthenticators","render","handleLogout","submitLabel","t","onSubmit","handleSubmit","initialData","extraButton","BackWrapper","type","onClick","handleSubmitCOPS","resetOnError","StyledAlert","showIcon","name","displayMode","onTap","handleU2fTap","Alert","space","withApi","U2fContainer","className","map","auth","id","challenge","challengeData","base64urlToBuffer","baseurl64String","padding","slice","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","isSafari","failCount","invokeU2fFlow","ref","form","value","JSON","stringify","onTryAgain","flowMode","supportMail","support","href","renderSafariWebAuthn","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","supported","PublicKeyCredential","navigator","userAgent","includes","getU2FResponse","response","authenticatorData","keyHandle","clientData","clientDataJSON","signatureData","signature","rawId","attestationObject","Error","submitU2fResponse","promise","then","u2fResponse","catch","submit","failure","metaData","Sentry","webAuthnSignIn","publicKeyCredentialRequestOptions","credentials","get","publicKey","webAuthnRegister","create","challengeArray","webAuthnAuthenticationData","cbor","decodeFirst","webAuthnRegisterData","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","children","renderPrompt","bindChallengeElement","bindResponseElement","withOrganization","MESSAGES","signin","sudo","enroll","U2fSign"],"sourceRoot":""}