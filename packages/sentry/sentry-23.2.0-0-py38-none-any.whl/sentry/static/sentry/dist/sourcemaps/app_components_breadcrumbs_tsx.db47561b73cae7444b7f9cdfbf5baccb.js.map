{"version":3,"file":"chunks/app_components_breadcrumbs_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/crumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/divider.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css, Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport {IconChevron} from 'sentry/icons';\nimport {space} from 'sentry/styles/space';\nimport BreadcrumbDropdown, {\n  BreadcrumbDropdownProps,\n} from 'sentry/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\n\nconst BreadcrumbList = styled('nav')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nexport interface Crumb {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n\n  /**\n   * It will keep the page filter values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preservePageFilters?: boolean;\n\n  /**\n   * Link of the crumb\n   */\n  to?: LinkProps['to'] | null;\n}\n\nexport interface CrumbDropdown {\n  /**\n   * Items of the crumb dropdown\n   */\n  items: BreadcrumbDropdownProps['items'];\n\n  /**\n   * Name of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Callback function for when an item is selected\n   */\n  onSelect: BreadcrumbDropdownProps['onSelect'];\n}\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: (Crumb | CrumbDropdown)[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n}\n\nfunction isCrumbDropdown(crumb: Crumb | CrumbDropdown): crumb is CrumbDropdown {\n  return (crumb as CrumbDropdown).items !== undefined;\n}\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    const lastCrumb = crumbs[crumbs.length - 1];\n    if (!isCrumbDropdown(lastCrumb)) {\n      lastCrumb.to = null;\n    }\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map((crumb, index) => {\n        if (isCrumbDropdown(crumb)) {\n          const {label, ...crumbProps} = crumb;\n          return (\n            <BreadcrumbDropdown\n              key={index}\n              isLast={index >= crumbs.length - 1}\n              route={{}}\n              name={label}\n              {...crumbProps}\n            />\n          );\n        }\n        const {label, to, preservePageFilters, key} = crumb;\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink\n                to={to}\n                preservePageFilters={preservePageFilters}\n                data-test-id=\"breadcrumb-link\"\n              >\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => css`\n  ${p.theme.overflowEllipsis}\n  color: ${p.theme.subText};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\ninterface BreadcrumbLinkProps {\n  to: LinkProps['to'];\n  children?: React.ReactNode;\n  preservePageFilters?: boolean;\n}\n\nconst BreadcrumbLink = styled(\n  ({preservePageFilters, to, ...props}: BreadcrumbLinkProps) =>\n    preservePageFilters ? (\n      <GlobalSelectionLink to={to as LocationDescriptor} {...props} />\n    ) : (\n      <Link to={to} {...props} />\n    )\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n  max-width: 400px;\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.subText};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import {useState} from 'react';\n\nimport DropdownAutoCompleteMenu from 'sentry/components/dropdownAutoComplete/menu';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport Crumb from 'sentry/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'sentry/views/settings/components/settingsBreadcrumb/divider';\n\nimport {RouteWithName} from './types';\n\ninterface AdditionalDropdownProps\n  extends Pick<\n    React.ComponentProps<typeof DropdownAutoCompleteMenu>,\n    'onChange' | 'busyItemsStillVisible'\n  > {}\n\nexport interface BreadcrumbDropdownProps extends AdditionalDropdownProps {\n  items: Item[];\n  name: React.ReactNode;\n  onSelect: (item: Item) => void;\n  route: RouteWithName;\n  hasMenu?: boolean;\n  isLast?: boolean;\n}\n\nfunction BreadcrumbDropdown({\n  hasMenu,\n  route,\n  isLast,\n  name,\n  onSelect,\n  ...dropdownProps\n}: BreadcrumbDropdownProps) {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <DropdownAutoCompleteMenu\n      blendCorner={false}\n      isOpen={isActive}\n      virtualizedHeight={41}\n      onSelect={item => {\n        setIsActive(false);\n        onSelect(item);\n      }}\n      menuProps={{\n        onMouseEnter: () => setIsActive(true),\n        onMouseLeave: () => setIsActive(false),\n      }}\n      {...dropdownProps}\n    >\n      {({getActorProps, isOpen}) => (\n        <Crumb\n          {...getActorProps({\n            onClick: () => setIsActive(false),\n            onMouseEnter: () => setIsActive(true),\n            onMouseLeave: () => setIsActive(false),\n          })}\n        >\n          <span>{name || route.name} </span>\n          <Divider isHover={hasMenu && isOpen} isLast={isLast} />\n        </Crumb>\n      )}\n    </DropdownAutoCompleteMenu>\n  );\n}\n\nexport default BreadcrumbDropdown;\n","import styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\nconst Crumb = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  color: ${p => p.theme.subText};\n  padding-right: ${space(1)};\n  cursor: pointer;\n  white-space: nowrap;\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default Crumb;\n","import styled from '@emotion/styled';\n\nimport {IconChevron} from 'sentry/icons';\n\ntype Props = {\n  isHover?: boolean;\n  isLast?: boolean;\n};\n\nconst Divider = ({isHover, isLast}: Props) =>\n  isLast ? null : (\n    <StyledDivider>\n      <StyledIconChevron direction={isHover ? 'down' : 'right'} legacySize=\"14px\" />\n    </StyledDivider>\n  );\n\nconst StyledIconChevron = styled(IconChevron)`\n  display: block;\n`;\n\nconst StyledDivider = styled('span')`\n  display: inline-block;\n  margin-left: 6px;\n  color: ${p => p.theme.gray200};\n  position: relative;\n`;\n\nexport default Divider;\n"],"names":["BreadcrumbList","space","isCrumbDropdown","crumb","undefined","items","Breadcrumbs","crumbs","linkLastItem","props","length","lastCrumb","to","map","index","label","crumbProps","isLast","route","name","preservePageFilters","key","labelKey","mapKey","Fragment","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","css","theme","overflowEllipsis","subText","textColor","IconChevron","BreadcrumbDropdown","hasMenu","onSelect","dropdownProps","isActive","setIsActive","useState","blendCorner","isOpen","virtualizedHeight","item","menuProps","onMouseEnter","onMouseLeave","getActorProps","onClick","isHover","StyledIconChevron","StyledDivider","gray200","legacySize"],"sourceRoot":""}