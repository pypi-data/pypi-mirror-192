{"version":3,"file":"chunks/app_views_monitors_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4sBAsBA,MAAMA,UAAoBC,EAAAA,EAAwB,2DAUpCC,GACVC,KAAKC,UAASC,IAAS,CAAEC,QAAS,IAAID,EAAMC,WAAYJ,UAAQ,+BAE/CA,GACjBK,EAAAA,eAAAA,MAAoBC,EAAAA,EAAAA,GAAc,kBAAiBL,KAAKM,iBAAiBP,EAAKQ,SAAO,CAbnFD,cACF,OAAON,KAAKQ,MAAMC,aAAaC,IACjC,CAEAC,eACE,MAAM,OAACC,GAAUZ,KAAKQ,MACtB,MAAO,CAAC,CAAC,UAAY,kBAAiBR,KAAKM,oBAAoBM,EAAOC,cACxE,CAQAC,WACE,OAAId,KAAKE,MAAMC,QACL,GAAEH,KAAKE,MAAMC,QAAQY,kBAAkBf,KAAKM,UAE9C,WAAUN,KAAKM,SACzB,CAEAU,aACE,MAAM,QAACb,GAAWH,KAAKE,MAEvB,OAAgB,OAAZC,EACK,MAIP,QAAC,KAAW,YACV,QAAC,KAAa,WACZ,QAAC,KAAoB,YACnB,QAAC,IAAW,CACVc,OAAQ,CACN,CACEC,OAAOC,EAAAA,EAAAA,GAAE,SACTC,GAAK,kBAAiBpB,KAAKM,kBAE7B,CACEY,OAAOC,EAAAA,EAAAA,GAAE,aAAchB,EAAQY,WAIrC,QAAC,KAAY,WAAEI,EAAAA,EAAAA,GAAE,wBAGrB,QAAC,KAAW,WACV,QAAC,KAAW,CAACE,WAAS,YACpB,QAAC,IAAW,CACVlB,QAASA,EACTmB,UAAU,MACVC,YAAc,kBAAiBvB,KAAKM,oBAAoBH,EAAQI,MAChEiB,gBAAiBxB,KAAKwB,wBAMlC,EAGF,SAAeC,EAAAA,EAAAA,GAAiB5B,E","sources":["webpack:///./app/views/monitors/edit.tsx"],"sourcesContent":["import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport MonitorForm from './monitorForm';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{monitorId: string}, {}> & {\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nclass EditMonitor extends AsyncView<Props, State> {\n  get orgSlug() {\n    return this.props.organization.slug;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    return [['monitor', `/organizations/${this.orgSlug}/monitors/${params.monitorId}/`]];\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  onSubmitSuccess = (data: Monitor) =>\n    browserHistory.push(normalizeUrl(`/organizations/${this.orgSlug}/crons/${data.id}/`));\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Crons - ${this.orgSlug}`;\n    }\n    return `Crons - ${this.orgSlug}`;\n  }\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <Layout.Page>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: t('Crons'),\n                  to: `/organizations/${this.orgSlug}/crons/`,\n                },\n                {\n                  label: t('Editing %s', monitor.name),\n                },\n              ]}\n            />\n            <Layout.Title>{t('Edit Monitor')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <MonitorForm\n              monitor={monitor}\n              apiMethod=\"PUT\"\n              apiEndpoint={`/organizations/${this.orgSlug}/monitors/${monitor.id}/`}\n              onSubmitSuccess={this.onSubmitSuccess}\n            />\n          </Layout.Main>\n        </Layout.Body>\n      </Layout.Page>\n    );\n  }\n}\n\nexport default withOrganization(EditMonitor);\n"],"names":["EditMonitor","AsyncView","data","this","setState","state","monitor","browserHistory","normalizeUrl","orgSlug","id","props","organization","slug","getEndpoints","params","monitorId","getTitle","name","renderBody","crumbs","label","t","to","fullWidth","apiMethod","apiEndpoint","onSubmitSuccess","withOrganization"],"sourceRoot":""}