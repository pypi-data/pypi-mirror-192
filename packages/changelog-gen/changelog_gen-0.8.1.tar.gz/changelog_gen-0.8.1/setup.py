# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['changelog_gen', 'changelog_gen.cli']

package_data = \
{'': ['*']}

install_requires = \
['bump2version>=1.0.1,<2.0.0', 'click>=8.0,<9.0', 'requests>=2.27.1,<3.0.0']

entry_points = \
{'console_scripts': ['changelog-gen = changelog_gen.cli.command:gen',
                     'changelog-init = changelog_gen.cli.command:init']}

setup_kwargs = {
    'name': 'changelog-gen',
    'version': '0.8.1',
    'description': 'Changelog generation tool',
    'long_description': '# Changelog Generator - v0.8.1\n[![image](https://img.shields.io/pypi/v/changelog_gen.svg)](https://pypi.org/project/changelog_gen/)\n[![image](https://img.shields.io/pypi/l/changelog_gen.svg)](https://pypi.org/project/changelog_gen/)\n[![image](https://img.shields.io/pypi/pyversions/changelog_gen.svg)](https://pypi.org/project/changelog_gen/)\n![style](https://github.com/EdgyEdgemond/changelog-gen/workflows/style/badge.svg)\n![tests](https://github.com/EdgyEdgemond/changelog-gen/workflows/tests/badge.svg)\n[![codecov](https://codecov.io/gh/EdgyEdgemond/changelog-gen/branch/master/graph/badge.svg)](https://codecov.io/gh/EdgyEdgemond/changelog-gen)\n\n`changelog-gen` is a CHANGELOG generator intended to be used in conjunction\nwith [bumpversion](https://github.com/c4urself/bump2version) to generate\nchangelogs and create release tags.\n\n## Installation\n\n```bash\npip install changelog-gen\n```\n\nor clone this repo and install with poetry.\n\n```bash\npoetry install\n```\n\n## Usage\n\n`changelog-gen` currently only supports reading changes from a `release_notes` folder.\n\nFiles in the folder should use the format `{issue_number}.{type}`.\n\nBy default supported types are currently `fix` and `feat`. Additional types can be configured\nto map to these initial types.\n\nThe contents of each file is used to populate the changelog file. If the type\nends with a `!` it denotes a breaking change has been made, this will lead to a\nmajor release being suggested.\n\n```bash\n$ ls release_notes\n  4.fix  7.fix\n\n$ changelog-gen\n\n## v0.2.1\n\n### Bug fixes\n\n- Raise errors from internal classes, don\'t use click.echo() [#4]\n- Update changelog line format to include issue number at the end. [#7]\n\nWrite CHANGELOG for suggested version 0.2.1 [y/N]: y\n```\n\n## Configuration\n\nOf the command line arguments, most of them can be configured in `setup.cfg` to remove\nthe need to pass them in every time.\n\nExample `setup.cfg`:\n\n```ini\n[changelog_gen]\ncommit = true\nrelease = true\nallow_dirty = false\n```\n\n### Configuration file -- Global configuration\n\nGeneral configuration is grouped in a `[changelog_gen]` section.\n\n#### `commit = (True | False)`\n  _**[optional]**_<br />\n  **default**: False\n\n  Commit changes to the changelog after writing.\n\n  Also available as `--commit` (e.g. `changelog-gen --commit`)\n\n#### `release = (True | False)`\n  _**[optional]**_<br />\n  **default**: False\n\n  Use bumpversion to tag the release\n\n  Also available as `--release` (e.g. `changelog-gen --release`)\n\n#### `allow_dirty = (True | False)`\n  _**[optional]**_<br />\n  **default**: False\n\n  Don\'t abort if the current branch contains uncommitted changes\n\n  Also available as `--allow-dirty` (e.g. `changelog-gen --allow-dirty`)\n\n#### `issue_link =`\n  _**[optional]**_<br />\n  **default**: None\n\n  Create links in the CHANGELOG to the originating issue. A url that contains an\n  `{issue_ref}` for formatting.\n\n  Example:\n\n```ini\n[changelog_gen]\nissue_link = http://github.com/EdgyEdgemond/changelog-gen/issues/{issue_ref}\n```\n\n#### `date_format =`\n  _**[optional]**_<br />\n  **default**: None\n\n  Add a date on the version line, use [strftime and strptime format codes](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes).\n  The format string can include any character, a space is included between the version tag and the date tag.\n\n  When using in `setup.cfg` be sure to protect the `%` signs (see example below) and be mindful about spacing as the string is taken straight from the `=` sign.\n\n  Also available as `--date-format` (e.g. `--date-format \'%Y-%m-%d\'`).\n\n  Example:\n\n```ini\n[changelog_gen]\ndate_format =on %%Y-%m-%d\n```\n\n\n#### `allowed_branches =`\n  _**[optional]**_<br />\n  **default**: None\n\n  Prevent changelog being generated if the current branch is not in the supplied list. By\n  default all branches are allowed.\n\n  Example:\n\n```ini\n[changelog_gen]\nallowed_branches =\n  master\n  develop\n```\n\n#### `sections =`\n  _**[optional]**_<br />\n  **default**: None\n\n  Define custom headers or new sections/headers, new sections will require a matching\n  section_mapping configuration.\n\n  Example:\n\n```ini\n[changelog_gen]\nsections =\n  feat=New Features\n  change=Changes\n  remove=Removals\n  fix=Bugfixes\n```\n\n#### `section_mapping =`\n  _**[optional]**_<br />\n  **default**: None\n\n  Configure additional supported release_note extensions to supported changelog\n  sections.\n\n  Example:\n\n```ini\n[changelog_gen]\nsection_mapping =\n  test=fix\n  bugfix=fix\n  docs=fix\n  new=feat\n```\n\n#### `post_process =`\n  _**[optional]**_<br />\n  **default**: None\n\n  Configure a REST API to contact when a release is made\n\n  See example on Jira configuration information.\n\n `.url=`<br />\n  _**[required]**_<br />\n  **default**: None<br />\n  The url to contact.\n  Can have the variables `{issue_ref}` and `{new_version}`.\n\n  `.verb=`<br />\n  _**[optional]**_<br />\n  **default**: POST<br />\n  HTTP method to use.\n\n  `.body=`<br />\n  _**[optional]**_<br />\n  **default**: `{{"body": "Released on v{new_version}"}}`<br />\n  The text to send to the API.\n  Can have the variables `{issue_ref}` and `{new_version}`.\n\n  `.auth_env =`<br />\n  _**[optional]**_<br />\n  **default**: None<br />\n  Name of the environment variable to use to extract the basic auth information to contact the API.\n  The content of the variable should be `{user}:{api key}`.\n\n  Example to post to JIRA:\n\n```ini\n[changelog_gen]\npost_process =\n  url=https://your-domain.atlassian.net/rest/api/2/issue/ISSUE-{issue_ref}/comment\n  verb=POST\n  body={{"body": "Released on v{new_version}"}}\n  auth_env=JIRA_AUTH\n```\n  This assumes an environment variable `JIRA_AUTH` with the content `user@domain.com:{api_key}`.\n  See [manage-api-tokens-for-your-atlassian-account](https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/) to generate a key.\n\n  Note: spaces around `=` will not be stripped, be sure to use `<field>=<value>`.\n\n  Also partially available as `--post-process-url` and `--post-process-auth-env` (e.g. `changelog-gen --post-process-url \'http://my-api-url.domain/comment{issue_ref}\' --post-process-auth-env MY_API_AUTH`)\n\n## Contributing\n\nThis project uses pre-commit hooks, please run `pre-commit install` after cloning and installing dev dependencies.\n',
    'author': 'Daniel Edgecombe',
    'author_email': 'edgy.edgemond@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/EdgyEdgemond/changelog-gen/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
