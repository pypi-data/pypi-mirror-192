Metadata-Version: 2.1
Name: combadge
Version: 0.1.0.dev2
Summary: Generic API client based on Pydantic
Home-page: https://github.com/kpn/combadge
License: Apache-2.0
Keywords: api,api-client,pydantic
Author: Pavel Perestoronin
Author-email: pavel.perestoronin@kpn.com
Requires-Python: >=3.8.1,<4.0.0
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Internet
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: System
Classifier: Topic :: System :: Networking
Classifier: Typing :: Typed
Provides-Extra: httpx
Provides-Extra: zeep
Requires-Dist: get-annotations (>=0.1.2,<0.2.0) ; python_version < "3.10"
Requires-Dist: httpx (>=0.23.3,<0.24.0) ; extra == "httpx"
Requires-Dist: pydantic (>=1.10.4,<2.0.0)
Requires-Dist: typing-extensions (>=4.4.0,<5.0.0)
Requires-Dist: zeep (>=4.2.1,<5.0.0) ; extra == "zeep"
Project-URL: Repository, https://github.com/kpn/combadge
Description-Content-Type: text/markdown

# `combadge`

> üìª Application to the service, please respond!

[![Checks](https://img.shields.io/github/checks-status/kpn/combadge/main)](https://github.com/kpn/combadge/actions/workflows/check.yaml)
[![Coverage](https://codecov.io/gh/kpn/combadge/branch/main/graph/badge.svg?token=ZAqYAaTXwE)](https://codecov.io/gh/kpn/combadge)
![Code style](https://img.shields.io/badge/code%20style-black-000000.svg)
[![License](https://img.shields.io/github/license/kpn/combadge)](LICENSE)

## Features

- [**Pydantic**](https://docs.pydantic.dev/)-based request and response models
- Automatically derived exception classes
- Using [**Protocol**](https://peps.python.org/pep-0544/)s to define service classes
- Built-in backends:
  - [HTTPX](https://www.python-httpx.org/), sync and async
  - [Zeep](https://docs.python-zeep.org/en/master/), sync and async
- Pluggable backends

## üöÄ Quickstart

‚ÑπÔ∏è This `README` is [tested](tests/integration/test_readme.py) and should run ¬´as is¬ª.

### ü¶ã [HTTPX](https://www.python-httpx.org/) backend

```python
# test_id=quickstart_httpx

from typing import List

from httpx import Client
from pydantic import BaseModel, Field
from typing_extensions import Annotated, Protocol

from combadge.core.binder import bind
from combadge.support.httpx.backends.sync import HttpxBackend
from combadge.support.rest.marks import QueryParam, method, path


# 1Ô∏è‚É£ Declare the response models:
class CurrentCondition(BaseModel):
    humidity: int
    temperature: Annotated[float, Field(alias="temp_C")]


class Weather(BaseModel):
    current: Annotated[List[CurrentCondition], Field(alias="current_condition")]


# 2Ô∏è‚É£ Declare the protocol:
class SupportsWttrIn(Protocol):
    @method("GET")
    @path("/{in_}")
    def get_weather(
        self,
        *,
        in_: str,
        format_: Annotated[str, QueryParam("format")] = "j1",
    ) -> Weather:
        raise NotImplementedError


# 3Ô∏è‚É£ Bind the service:
backend = HttpxBackend(Client(base_url="https://wttr.in"))
service = bind(SupportsWttrIn, backend)

# üöÄ Call the service:
response = service.get_weather(in_="amsterdam")
assert response.current[0].humidity == 71
assert response.current[0].temperature == 8.0
```

### üßº [Zeep](https://docs.python-zeep.org/en/master/) backend

```python
# test_id=quickstart_zeep

from typing import Literal, Union

import zeep
from pydantic import BaseModel, Field
from pytest import raises
from typing_extensions import Annotated

from combadge.core.interfaces import SupportsService
from combadge.core.response import FaultyResponse, SuccessfulResponse
from combadge.support.http.marks import Body
from combadge.support.soap.marks import operation_name
from combadge.support.zeep.backends.sync import ZeepBackend


# 1Ô∏è‚É£ Declare the request model:
class NumberToWordsRequest(BaseModel, allow_population_by_field_name=True):
    number: Annotated[int, Field(alias="ubiNum")]


# 2Ô∏è‚É£ Declare the response model:
class NumberToWordsResponse(SuccessfulResponse):
    __root__: str


# 3Ô∏è‚É£ Optionally, declare the error response models:
class NumberTooLargeResponse(FaultyResponse):
    __root__: Literal["number too large"]


# 4Ô∏è‚É£ Declare the interface:
class SupportsNumberConversion(SupportsService):
    @operation_name("NumberToWords")
    def number_to_words(self, request: Body[NumberToWordsRequest]) -> Union[NumberTooLargeResponse, NumberToWordsResponse]:
        ...


# 5Ô∏è‚É£ Bind the service:
client = zeep.Client(wsdl="tests/integration/wsdl/NumberConversion.wsdl")
service = SupportsNumberConversion.bind(ZeepBackend(client.service))

# üöÄ Call the service:
response = service.number_to_words(NumberToWordsRequest(number=42))
assert response.unwrap().__root__ == "forty two "

# ‚ò¢Ô∏è Error classes are automatically derived for error models:
response = service.number_to_words(NumberToWordsRequest(number=-1))
with raises(NumberTooLargeResponse.Error):
    response.raise_for_result()
```

