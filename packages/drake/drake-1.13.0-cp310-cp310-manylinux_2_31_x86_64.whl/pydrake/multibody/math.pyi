from typing import Any, ClassVar, List

from typing import overload
import numpy
import pydrake.autodiffutils
import pydrake.common.cpp_template
import pydrake.common.value
import pydrake.math
import pydrake.symbolic
SpatialAcceleration_: pydrake.common.cpp_template.TemplateClass
SpatialForce_: pydrake.common.cpp_template.TemplateClass
SpatialMomentum_: pydrake.common.cpp_template.TemplateClass
SpatialVelocity_: pydrake.common.cpp_template.TemplateClass
_add_repr_functions: function
_indented_repr: function
_pretty_class_name: function
_remove_float_suffix: function
_spatial_vector_repr: function

class SpatialAcceleration:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[numpy.float64[3,1]], a: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣float𝓤, acceleration_of_moving_frame: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def SetZero(self) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __copy__(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __mul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __neg__(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...

class SpatialAcceleration_𝓣AutoDiffXd𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣AutoDiffXd𝓤, acceleration_of_moving_frame: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...

class SpatialAcceleration_𝓣Expression𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣Expression𝓤, acceleration_of_moving_frame: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣Expression𝓤: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...

class SpatialAcceleration_𝓣float𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[numpy.float64[3,1]], a: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣float𝓤, acceleration_of_moving_frame: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def SetZero(self) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __copy__(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __mul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __neg__(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...

class SpatialForce:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[numpy.float64[3,1]], f: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def SetZero(self) -> SpatialForce_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialForce_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣float𝓤) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __copy__(self) -> SpatialForce_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __neg__(self) -> SpatialForce_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...

class SpatialForce_𝓣AutoDiffXd𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣AutoDiffXd𝓤) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...

class SpatialForce_𝓣Expression𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialForce_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣Expression𝓤) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialForce_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialForce_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...

class SpatialForce_𝓣float𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[numpy.float64[3,1]], f: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def SetZero(self) -> SpatialForce_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialForce_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣float𝓤) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __copy__(self) -> SpatialForce_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __neg__(self) -> SpatialForce_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...

class SpatialMomentum:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[numpy.float64[3,1]], l: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def SetZero(self) -> SpatialMomentum_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialMomentum_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣float𝓤) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __copy__(self) -> SpatialMomentum_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __neg__(self) -> SpatialMomentum_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...

class SpatialMomentum_𝓣AutoDiffXd𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣AutoDiffXd𝓤) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...

class SpatialMomentum_𝓣Expression𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣Expression𝓤) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...

class SpatialMomentum_𝓣float𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[numpy.float64[3,1]], l: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def SetZero(self) -> SpatialMomentum_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialMomentum_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣float𝓤) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __copy__(self) -> SpatialMomentum_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __neg__(self) -> SpatialMomentum_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...

class SpatialVelocity:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[numpy.float64[3,1]], v: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def SetZero(self) -> SpatialVelocity_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialVelocity_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __copy__(self) -> SpatialVelocity_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __neg__(self) -> SpatialVelocity_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...

class SpatialVelocity_𝓣AutoDiffXd𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...

class SpatialVelocity_𝓣Expression𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...

class SpatialVelocity_𝓣float𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[numpy.float64[3,1]], v: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def SetZero(self) -> SpatialVelocity_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialVelocity_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __copy__(self) -> SpatialVelocity_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __neg__(self) -> SpatialVelocity_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...

class _MangledName:
    UNICODE_COMMA: ClassVar[str] = ...
    UNICODE_LEFT_BRACKET: ClassVar[str] = ...
    UNICODE_PERIOD: ClassVar[str] = ...
    UNICODE_RIGHT_BRACKET: ClassVar[str] = ...
    def demangle(self, *args, **kwargs) -> Any: ...
    def mangle(self, name) -> Any: ...
    def module_getattr(self, 
module_name = ..., module_globals = ..., name = ...) -> Any: ...

class _TemporaryName_N5drake5ValueINS_9multibody12SpatialForceIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def get_value(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def set_value(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody12SpatialForceINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialForce_𝓣Expression𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialForce_𝓣Expression𝓤: ...
    def get_value(self) -> SpatialForce_𝓣Expression𝓤: ...
    def set_value(self, arg0: SpatialForce_𝓣Expression𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody12SpatialForceIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialForce_𝓣float𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialForce_𝓣float𝓤: ...
    def get_value(self) -> SpatialForce_𝓣float𝓤: ...
    def set_value(self, arg0: SpatialForce_𝓣float𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialMomentumIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def get_value(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def set_value(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialMomentumINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    def get_value(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    def set_value(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialMomentumIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialMomentum_𝓣float𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialMomentum_𝓣float𝓤: ...
    def get_value(self) -> SpatialMomentum_𝓣float𝓤: ...
    def set_value(self, arg0: SpatialMomentum_𝓣float𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialVelocityIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def get_value(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def set_value(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialVelocityINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    def get_value(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    def set_value(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialVelocityIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialVelocity_𝓣float𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialVelocity_𝓣float𝓤: ...
    def get_value(self) -> SpatialVelocity_𝓣float𝓤: ...
    def set_value(self, arg0: SpatialVelocity_𝓣float𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody19SpatialAccelerationIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def get_value(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def set_value(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody19SpatialAccelerationINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def get_value(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def set_value(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody19SpatialAccelerationIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def get_value(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def set_value(self, arg0: SpatialAcceleration_𝓣float𝓤) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody12SpatialForceIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialForce_𝓣AutoDiffXd𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialForce_𝓣AutoDiffXd𝓤]: ...
    def set_value(self, arg0: List[SpatialForce_𝓣AutoDiffXd𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody12SpatialForceINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialForce_𝓣Expression𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialForce_𝓣Expression𝓤]: ...
    def set_value(self, arg0: List[SpatialForce_𝓣Expression𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody12SpatialForceIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialForce_𝓣float𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialForce_𝓣float𝓤]: ...
    def set_value(self, arg0: List[SpatialForce_𝓣float𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialMomentumIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialMomentum_𝓣AutoDiffXd𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialMomentum_𝓣AutoDiffXd𝓤]: ...
    def set_value(self, arg0: List[SpatialMomentum_𝓣AutoDiffXd𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialMomentumINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialMomentum_𝓣Expression𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialMomentum_𝓣Expression𝓤]: ...
    def set_value(self, arg0: List[SpatialMomentum_𝓣Expression𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialMomentumIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialMomentum_𝓣float𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialMomentum_𝓣float𝓤]: ...
    def set_value(self, arg0: List[SpatialMomentum_𝓣float𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialVelocityIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialVelocity_𝓣AutoDiffXd𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialVelocity_𝓣AutoDiffXd𝓤]: ...
    def set_value(self, arg0: List[SpatialVelocity_𝓣AutoDiffXd𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialVelocityINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialVelocity_𝓣Expression𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialVelocity_𝓣Expression𝓤]: ...
    def set_value(self, arg0: List[SpatialVelocity_𝓣Expression𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialVelocityIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialVelocity_𝓣float𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialVelocity_𝓣float𝓤]: ...
    def set_value(self, arg0: List[SpatialVelocity_𝓣float𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody19SpatialAccelerationIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialAcceleration_𝓣AutoDiffXd𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialAcceleration_𝓣AutoDiffXd𝓤]: ...
    def set_value(self, arg0: List[SpatialAcceleration_𝓣AutoDiffXd𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody19SpatialAccelerationINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialAcceleration_𝓣Expression𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialAcceleration_𝓣Expression𝓤]: ...
    def set_value(self, arg0: List[SpatialAcceleration_𝓣Expression𝓤]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody19SpatialAccelerationIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialAcceleration_𝓣float𝓤]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialAcceleration_𝓣float𝓤]: ...
    def set_value(self, arg0: List[SpatialAcceleration_𝓣float𝓤]) -> None: ...

class _TemporaryName_N5drake9multibody12SpatialForceIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣AutoDiffXd𝓤) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_𝓣AutoDiffXd𝓤) -> SpatialForce_𝓣AutoDiffXd𝓤: ...

class _TemporaryName_N5drake9multibody12SpatialForceINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialForce_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣Expression𝓤) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialForce_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialForce_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_𝓣Expression𝓤) -> SpatialForce_𝓣Expression𝓤: ...

class _TemporaryName_N5drake9multibody12SpatialForceIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[numpy.float64[3,1]], f: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def SetZero(self) -> SpatialForce_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialForce_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣float𝓤) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __copy__(self) -> SpatialForce_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __neg__(self) -> SpatialForce_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialForce_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_𝓣float𝓤) -> SpatialForce_𝓣float𝓤: ...

class _TemporaryName_N5drake9multibody15SpatialMomentumIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣AutoDiffXd𝓤) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_𝓣AutoDiffXd𝓤) -> SpatialMomentum_𝓣AutoDiffXd𝓤: ...

class _TemporaryName_N5drake9multibody15SpatialMomentumINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣Expression𝓤) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_𝓣Expression𝓤) -> SpatialMomentum_𝓣Expression𝓤: ...

class _TemporaryName_N5drake9multibody15SpatialMomentumIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[numpy.float64[3,1]], l: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def SetZero(self) -> SpatialMomentum_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialMomentum_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_𝓣float𝓤) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __copy__(self) -> SpatialMomentum_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __neg__(self) -> SpatialMomentum_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialMomentum_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_𝓣float𝓤) -> SpatialMomentum_𝓣float𝓤: ...

class _TemporaryName_N5drake9multibody15SpatialVelocityIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_𝓣AutoDiffXd𝓤) -> SpatialVelocity_𝓣AutoDiffXd𝓤: ...

class _TemporaryName_N5drake9multibody15SpatialVelocityINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_𝓣Expression𝓤) -> SpatialVelocity_𝓣Expression𝓤: ...

class _TemporaryName_N5drake9multibody15SpatialVelocityIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[numpy.float64[3,1]], v: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def SetZero(self) -> SpatialVelocity_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialVelocity_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __copy__(self) -> SpatialVelocity_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __neg__(self) -> SpatialVelocity_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialVelocity_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_𝓣float𝓤) -> SpatialVelocity_𝓣float𝓤: ...

class _TemporaryName_N5drake9multibody19SpatialAccelerationIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣AutoDiffXd𝓤, acceleration_of_moving_frame: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def SetZero(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __copy__(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __isub__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __neg__(self) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_𝓣AutoDiffXd𝓤) -> SpatialAcceleration_𝓣AutoDiffXd𝓤: ...

class _TemporaryName_N5drake9multibody19SpatialAccelerationINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣Expression𝓤, acceleration_of_moving_frame: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def SetZero(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣Expression𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_𝓣Expression𝓤: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __copy__(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __isub__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __neg__(self) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_𝓣Expression𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_𝓣Expression𝓤) -> SpatialAcceleration_𝓣Expression𝓤: ...

class _TemporaryName_N5drake9multibody19SpatialAccelerationIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[numpy.float64[3,1]], a: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_𝓣float𝓤, acceleration_of_moving_frame: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def SetZero(self) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_𝓣float𝓤: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __copy__(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_𝓣float𝓤: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __imul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __isub__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
    def __mul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __neg__(self) -> SpatialAcceleration_𝓣float𝓤: ...
    def __rmul__(self, arg0: float) -> SpatialAcceleration_𝓣float𝓤: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_𝓣float𝓤) -> SpatialAcceleration_𝓣float𝓤: ...
