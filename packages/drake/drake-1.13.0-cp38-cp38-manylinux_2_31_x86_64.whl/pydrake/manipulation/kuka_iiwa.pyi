from typing import Any, ClassVar, Dict, Optional

import numpy
import pydrake.lcm
import pydrake.multibody.parsing
import pydrake.multibody.plant
import pydrake.multibody.tree
import pydrake.systems.framework
import pydrake.systems.lcm
kIiwaArmNumJoints: int
kIiwaLcmStatusPeriod: float

class IiwaCommandReceiver(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self, num_joints: int = ..., control_mode: IiwaControlMode = ...) -> None: ...
    def get_commanded_position_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_commanded_torque_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_message_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_position_measured_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_time_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...

class IiwaCommandSender(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self, num_joints: int = ..., control_mode: IiwaControlMode = ...) -> None: ...
    def get_position_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_time_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_torque_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...

class IiwaControlMode:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kPositionAndTorque: ClassVar[IiwaControlMode] = ...
    kPositionOnly: ClassVar[IiwaControlMode] = ...
    kTorqueOnly: ClassVar[IiwaControlMode] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class IiwaDriver:
    __fields__: ClassVar[tuple] = ...  # read-only
    control_mode: str
    ext_joint_filter_tau: float
    hand_model_name: str
    lcm_bus: str
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> IiwaDriver: ...
    def __deepcopy__(self, arg0: dict) -> IiwaDriver: ...

class IiwaStatusReceiver(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self, num_joints: int = ...) -> None: ...
    def get_position_commanded_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_position_measured_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_time_measured_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_torque_commanded_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_torque_external_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_torque_measured_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_velocity_estimated_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...

class IiwaStatusSender(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self, num_joints: int = ...) -> None: ...
    def get_position_commanded_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_position_measured_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_time_measured_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_torque_commanded_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_torque_external_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_torque_measured_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_velocity_estimated_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...

def ApplyDriverConfig(driver_config: IiwaDriver, model_instance_name: str, sim_plant: pydrake.multibody.plant.MultibodyPlant_𝓣float𝓤, models_from_directives: Dict[str,pydrake.multibody.parsing.ModelInstanceInfo], lcms: pydrake.systems.lcm.LcmBuses, builder: pydrake.systems.framework.DiagramBuilder_𝓣float𝓤) -> None: ...
def BuildIiwaControl(plant: pydrake.multibody.plant.MultibodyPlant_𝓣float𝓤, iiwa_instance: pydrake.multibody.tree.ModelInstanceIndex, controller_plant: pydrake.multibody.plant.MultibodyPlant_𝓣float𝓤, lcm: pydrake.lcm.DrakeLcmInterface, builder: pydrake.systems.framework.DiagramBuilder_𝓣float𝓤, ext_joint_filter_tau: float = ..., desired_iiwa_kp_gains: Optional[numpy.ndarray[numpy.float64[m,1]]] = ..., control_mode: IiwaControlMode = ...) -> None: ...
def ParseIiwaControlMode(control_mode: str) -> IiwaControlMode: ...
def get_iiwa_max_joint_velocities() -> numpy.ndarray[numpy.float64[m,1]]: ...
def position_enabled(control_mode: IiwaControlMode) -> bool: ...
def torque_enabled(control_mode: IiwaControlMode) -> bool: ...
