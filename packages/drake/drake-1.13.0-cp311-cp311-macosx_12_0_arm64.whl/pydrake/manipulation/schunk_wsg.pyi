from typing import ClassVar, Dict, Optional

import numpy
import pydrake.lcm
import pydrake.multibody.parsing
import pydrake.multibody.plant
import pydrake.multibody.tree
import pydrake.systems.framework
import pydrake.systems.lcm
import pydrake.systems.primitives

class SchunkWsgCommandReceiver(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self, initial_position: float = ..., initial_force: float = ...) -> None: ...
    def get_force_limit_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_position_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...

class SchunkWsgCommandSender(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self, default_force_limit: float = ...) -> None: ...
    def get_command_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_force_limit_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_position_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...

class SchunkWsgController(pydrake.systems.framework.Diagram_𝓣float𝓤):
    def __init__(self, kp: float = ..., ki: float = ..., kd: float = ...) -> None: ...

class SchunkWsgDriver:
    __fields__: ClassVar[tuple] = ...  # read-only
    lcm_bus: str
    pid_gains: numpy.ndarray[numpy.float64[3,1]]
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> SchunkWsgDriver: ...
    def __deepcopy__(self, arg0: dict) -> SchunkWsgDriver: ...

class SchunkWsgPositionController(pydrake.systems.framework.Diagram_𝓣float𝓤):
    def __init__(self, time_step: float = ..., kp_command: float = ..., kd_command: float = ..., kp_constraint: float = ..., kd_constraint: float = ..., default_force_limit: float = ...) -> None: ...
    def get_desired_position_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_force_limit_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_generalized_force_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_grip_force_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_state_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...

class SchunkWsgStatusReceiver(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self) -> None: ...
    def get_force_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_state_output_port(self) -> pydrake.systems.framework.OutputPort_𝓣float𝓤: ...
    def get_status_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...

class SchunkWsgStatusSender(pydrake.systems.framework.LeafSystem_𝓣float𝓤):
    def __init__(self) -> None: ...
    def get_force_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...
    def get_state_input_port(self) -> pydrake.systems.framework.InputPort_𝓣float𝓤: ...

def ApplyDriverConfig(driver_config: SchunkWsgDriver, model_instance_name: str, sim_plant: pydrake.multibody.plant.MultibodyPlant_𝓣float𝓤, models_from_directives: Dict[str,pydrake.multibody.parsing.ModelInstanceInfo], lcms: pydrake.systems.lcm.LcmBuses, builder: pydrake.systems.framework.DiagramBuilder_𝓣float𝓤) -> None: ...
def BuildSchunkWsgControl(plant: pydrake.multibody.plant.MultibodyPlant_𝓣float𝓤, wsg_instance: pydrake.multibody.tree.ModelInstanceIndex, lcm: pydrake.lcm.DrakeLcmInterface, builder: pydrake.systems.framework.DiagramBuilder_𝓣float𝓤, pid_gains: Optional[numpy.ndarray[numpy.float64[3,1]]] = ...) -> None: ...
def GetSchunkWsgOpenPosition() -> numpy.ndarray[numpy.float64[m,1]]: ...
def MakeMultibodyForceToWsgForceSystem() -> pydrake.systems.framework.VectorSystem_𝓣float𝓤: ...
def MakeMultibodyStateToWsgStateSystem() -> pydrake.systems.primitives.MatrixGain_𝓣float𝓤: ...
