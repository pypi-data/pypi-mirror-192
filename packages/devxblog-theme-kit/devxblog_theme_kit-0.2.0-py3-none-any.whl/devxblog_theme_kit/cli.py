import base64
import json
import os
import os.path
import pathlib
import subprocess
import sys
from typing import Union

import click
import requests
import rich.console
import yaml
from requests import Response
from yaml import Loader

API_URL = os.environ.get('DEVXBLOG_API_SERVER', 'https://devxblog.com')

rich_console = rich.console.Console()
print = rich_console.log


@click.group
def main():
    pass


BASE_THEME_YAML = """
# a unique identifier for the theme
id: com.example.mytheme
name: My theme
description_short: Lorem Ipsum
description_long:
  file: description.html
live: yes
"""

BASE_REQUIREMENTS_TXT = """
django>=4
click>=8
rich
requests
pyyaml
"""

MANAGE_PY = '''
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'devxblog_theme.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
'''

DESCRIPTION_HTML = """
Lorem Ipsum Dolor Amet
"""

GITIGNORE = """
db.sqlite3
.idea
__pycache__/
*.pyc
"""

DEVXBLOG_THEME_WSGI_PY = '''
"""
WSGI config for devxblog_theme project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'devxblog_theme.settings')

application = get_wsgi_application()
'''

DEVXBLOG_THEME_ASGI_PY = '''
"""
ASGI config for devxblog_theme project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'devxblog_theme.settings')

application = get_asgi_application()
'''

DEVXBLOG_TEMPLATES_BASE_HTML = """
{% load static %}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static "css/style.css" %}">
</head>
<body>
{% block content %}
{% endblock %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2"
        crossorigin="anonymous"></script>
</body>
</html>
"""

DEVXBLOG_TEMPLATES_PAGE_VIEW_HTML = '''
{% extends "_base.html" %}

{% block content %}
    <h1>{{ page.title }}</h1>
    {{ page.content|safe }}
{% endblock %}
'''

DEVXBLOG_TEMPLATES_POST_VIEW_HTML = '''
{% extends "_base.html" %}

{% block content %}
    <h1>Post</h1>
{% endblock %}
'''

DEVXBLOG_TEMPLATES_POST_LIST_HTML = '''
{% extends "_base.html" %}

{% block content %}
    <h1>Posts</h1>
{% endblock %}
'''

DEVXBLOG_STATIC_CSS_STYLE_CSS = """
body {
    background-color: mediumpurple;
}
"""

DEVXBLOG_SETTINGS_PY = '''
"""
Django settings for devxblog_theme project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tljh9ec!wq3incec3wq9&)0gw*_a_u(bk#=^kf9-1asjgi-fgm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'devxblog_theme.urls'

print(BASE_DIR / ' devxblog_theme' / 'templates')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'devxblog_theme' / 'templates'
        ],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'devxblog_theme.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / 'devxblog_theme' / 'static'
]
'''

DEVXBLOG_URLS = '''
from django.conf.urls.static import static
from django.urls import path
from devxblog_theme_kit.views import ThemePostList, ThemePostView, ThemePageView

urlpatterns = [
                  path('', ThemePostList.as_view(), name='post_list'),
                  path('post', ThemePostView.as_view(), name='post_view'),
                  path('page', ThemePageView.as_view(), name='page_view'),
              ] + static('/static', document_root='devxblog_theme/static')
'''

template_files = {
    'theme.yaml': BASE_THEME_YAML,
    'requirements.txt': BASE_REQUIREMENTS_TXT,
    'manage.py': MANAGE_PY,
    'description.html': DESCRIPTION_HTML,
    '.gitignore': GITIGNORE,
    'devxblog_theme/__init__.py': "",
    'devxblog_theme/wsgi.py': DEVXBLOG_THEME_WSGI_PY,
    'devxblog_theme/asgi.py': DEVXBLOG_THEME_ASGI_PY,
    'devxblog_theme/settings.py': DEVXBLOG_SETTINGS_PY,
    'devxblog_theme/urls.py': DEVXBLOG_URLS,
    'devxblog_theme/static/css/style.css': DEVXBLOG_STATIC_CSS_STYLE_CSS,
    'devxblog_theme/templates/_base.html': DEVXBLOG_TEMPLATES_BASE_HTML,
    'devxblog_theme/templates/page_view.html': DEVXBLOG_TEMPLATES_PAGE_VIEW_HTML,
    'devxblog_theme/templates/post_view.html': DEVXBLOG_TEMPLATES_POST_VIEW_HTML,
    'devxblog_theme/templates/post_list.html': DEVXBLOG_TEMPLATES_POST_LIST_HTML,
}


@main.command('init-theme')
@click.argument('folder')
def init_theme(folder):
    abs_dir = pathlib.Path(os.path.abspath(folder))
    print(f'Initializing theme at {abs_dir}')

    os.makedirs(abs_dir)

    for file_path, content in template_files.items():
        dir = os.path.dirname(abs_dir / file_path)
        print(f'Creating {abs_dir / file_path}')
        os.makedirs(dir, exist_ok=True)
        with open(abs_dir / file_path, 'w') as f:
            f.write(content.strip())

    subprocess.call(['pip', 'install', '-r', f'requirements.txt'], cwd=folder)


@main.command('start')
@click.option('--port', '-p', default=8000, type=click.INT)
@click.option('--vars', '-v', default='{}')
def start_theme_dev(port, vars):
    workdir = os.getcwd()
    kwargs = dict(env={'DEVXBLOG_VARS': vars})
    executable = sys.executable
    subprocess.call([executable, 'manage.py', 'makemigrations'], **kwargs)
    subprocess.call([executable, 'manage.py', 'migrate'], **kwargs)
    subprocess.call([executable, 'manage.py', 'runserver', str(port)], **kwargs)


def resolve_description(param):
    if isinstance(param, str):
        return param
    if isinstance(param, dict) and 'file' in param:
        return open(param['file'], 'r').read()
    raise ValueError(f"Invalid description format: {param}. Can not resolve to a valid string.")


class Api:
    def __init__(self, root, api_key):
        self.root = root.rstrip('/')
        self.api_key = api_key

    def make_request(self, method, url, body=None, files=None, error_status_ok=None):
        try:
            if files:
                kwargs = {'data': body, 'files': files}
            else:
                kwargs = {'json': body}
            resp = requests.request(
                method,
                url,
                headers={
                    'Authorization': f'ThemePublish {self.api_key}'
                },
                **kwargs
            )
            resp.raise_for_status()
            return resp.status_code, resp.json() if resp.content else {}
        except Exception as e:
            response = None
            if isinstance(e, Response):
                response = e
            elif hasattr(e, 'response') and e.response is not None:
                response = e.response

            if response is not None:
                if error_status_ok and response.status_code in error_status_ok:
                    status = response.status_code
                    content = response.json() if response.content else {}
                    return status, content
                else:
                    if response.content:
                        e = response.content.decode()
                    else:
                        e = 'No response'
            raise Exception(e)

    def update_theme(self, id, data):
        data = {
            'id': data['id'],
            'name': data['name'],
            'description_short': data['description_short'],
            'description_long': resolve_description(data['description_long']),
            'live': data['live']
        }

        status, body = self.make_request(
            'patch',
            self.root + f'/api/v1/addon_themes/{id}/',
            data,
            error_status_ok=(404,)
        )
        print(f'status={status}')
        if status == 404:
            status, body = self.make_request(
                'post',
                self.root + f'/api/v1/addon_themes/',
                data,
            )
            print(f'status={status}')

    def upload_theme_file(self, theme_id, fname, fpath, content: Union[str, bytes], update_id=None, kind='template'):
        if isinstance(content, bytes):
            content = base64.b64encode(content).decode()
            encoding = 'base64'
        else:
            encoding = 'raw'

        if update_id:
            print(f'Updating {fpath} ({encoding})')
            status, body = self.make_request(
                'patch',
                self.root + f'/api/v1/addon_themes/files/{str(update_id)}/',
                {'content': content, 'kind': kind, 'encoding': encoding}
            )
        else:
            print(f'Creating {fpath} ({encoding})')
            status, body = self.make_request(
                'post',
                self.root + '/api/v1/addon_themes/files/',
                {'theme': theme_id, 'filename': fpath, 'content': content, 'kind': kind, 'encoding': encoding}
            )
        print(f'status={status}')
        return body['id']

    def get_theme_files(self, theme_id):
        status, body = self.make_request(
            'get',
            self.root + f'/api/v1/addon_themes/files/?theme={theme_id}',
        )
        data = {}
        for item in body['results']:
            data[item['filename']] = item['id']
        return data

    def remove_theme_file(self, file_id):
        status, body = self.make_request(
            'delete',
            self.root + f'/api/v1/addon_themes/files/{file_id}/',
        )
        print(f'status={status}')


@main.command('publish')
@click.option('--api-server', default=API_URL)
def publish(api_server):
    """You can change the API server by setting the DEVXBLOG_API_SERVER environment variable or --api-server"""
    with open('./theme.yaml', 'r') as f:
        config = yaml.load(f, Loader=Loader)

    api_key = os.environ.get('DEVXBLOG_THEME_PUBLISH_KEY')
    if not api_key:
        api_key = click.prompt(
            'Enter publish key (to avoid this prompt, set the key via DEVXBLOG_THEME_PUBLISH_KEY)',
            hide_input=True
        )

    api = Api(api_server, api_key)
    with rich_console.status(f'[bold green] Publishing {config["id"]}[/bold green]') as status:
        try:
            print('[yellow]Updating general information')
            api.update_theme(config['id'], config),
            print('Success')
        except Exception as e:
            rich_console.log(f'[bold red]Failed: {e}[/bold red]')
            return

        # theme files
        theme_files = api.get_theme_files(config['id'])

        template_files = []
        static_files = []
        for root, dirs, files in os.walk('devxblog_theme/templates'):
            for fname in files:
                fpath = os.path.join(root, fname)
                with open(fpath) as f:
                    relative_fpath = fpath.replace('devxblog_theme/templates/', '')
                    template_files.append({
                        'name': fname,
                        'path': relative_fpath,
                        'content': f.read(),
                        'id': theme_files.get(relative_fpath),
                        'kind': 'template'
                    })

        for root, dirs, files in os.walk('devxblog_theme/static'):
            for fname in files:
                fpath = os.path.join(root, fname)
                print(f'Loading static file {fpath}')
                with open(fpath, 'rb') as f:
                    relative_fpath = fpath.replace('devxblog_theme/static/', '')
                    static_files.append({
                        'name': fname,
                        'path': relative_fpath,
                        'content': f.read(),
                        'id': theme_files.get(relative_fpath),
                        'kind': 'static'
                    })

        files_from_server = set(theme_files.keys())
        for f in template_files + static_files:
            id = api.upload_theme_file(config['id'], f['name'], f['path'], f['content'], update_id=f['id'],
                                       kind=f['kind'])
            if f['path'] in files_from_server:
                files_from_server.remove(f['path'])
            theme_files[f['name']] = id

        for old_file in files_from_server:
            print(f'Deleting old file {old_file}')
            api.remove_theme_file(theme_files[old_file])
