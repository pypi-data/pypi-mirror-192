"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class bno055_t(object):
    __slots__ = ["utime", "rph", "quaternion", "angRate", "accel", "magField", "gravity", "lin_accel", "temperature"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, [3], [4], [3], [3], [3], [3], [3], None]

    def __init__(self):
        self.utime = 0
        self.rph = [ 0.0 for dim0 in range(3) ]
        self.quaternion = [ 0.0 for dim0 in range(4) ]
        self.angRate = [ 0.0 for dim0 in range(3) ]
        self.accel = [ 0.0 for dim0 in range(3) ]
        self.magField = [ 0.0 for dim0 in range(3) ]
        self.gravity = [ 0.0 for dim0 in range(3) ]
        self.lin_accel = [ 0.0 for dim0 in range(3) ]
        self.temperature = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(bno055_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        buf.write(struct.pack('>3d', *self.rph[:3]))
        buf.write(struct.pack('>4d', *self.quaternion[:4]))
        buf.write(struct.pack('>3d', *self.angRate[:3]))
        buf.write(struct.pack('>3d', *self.accel[:3]))
        buf.write(struct.pack('>3d', *self.magField[:3]))
        buf.write(struct.pack('>3d', *self.gravity[:3]))
        buf.write(struct.pack('>3d', *self.lin_accel[:3]))
        buf.write(struct.pack(">d", self.temperature))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != bno055_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return bno055_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = bno055_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.rph = struct.unpack('>3d', buf.read(24))
        self.quaternion = struct.unpack('>4d', buf.read(32))
        self.angRate = struct.unpack('>3d', buf.read(24))
        self.accel = struct.unpack('>3d', buf.read(24))
        self.magField = struct.unpack('>3d', buf.read(24))
        self.gravity = struct.unpack('>3d', buf.read(24))
        self.lin_accel = struct.unpack('>3d', buf.read(24))
        self.temperature = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if bno055_t in parents: return 0
        tmphash = (0xb95bfc2151bb1f23) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if bno055_t._packed_fingerprint is None:
            bno055_t._packed_fingerprint = struct.pack(">Q", bno055_t._get_hash_recursive([]))
        return bno055_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", bno055_t._get_packed_fingerprint())[0]

