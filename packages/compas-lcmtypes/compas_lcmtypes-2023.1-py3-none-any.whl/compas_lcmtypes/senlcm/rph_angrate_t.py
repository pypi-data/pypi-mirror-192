"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class rph_angrate_t(object):
    __slots__ = ["utime", "rph", "angRate", "flags"]

    __typenames__ = ["int64_t", "double", "double", "int16_t"]

    __dimensions__ = [None, [3], [3], None]

    FLAG_NEW_MEASUREMENT = 1
    FLAG_OLD_MEASUREMENT = 0

    def __init__(self):
        self.utime = 0
        self.rph = [ 0.0 for dim0 in range(3) ]
        self.angRate = [ 0.0 for dim0 in range(3) ]
        self.flags = 0

    def encode(self):
        buf = BytesIO()
        buf.write(rph_angrate_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        buf.write(struct.pack('>3d', *self.rph[:3]))
        buf.write(struct.pack('>3d', *self.angRate[:3]))
        buf.write(struct.pack(">h", self.flags))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rph_angrate_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rph_angrate_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rph_angrate_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.rph = struct.unpack('>3d', buf.read(24))
        self.angRate = struct.unpack('>3d', buf.read(24))
        self.flags = struct.unpack(">h", buf.read(2))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if rph_angrate_t in parents: return 0
        tmphash = (0x3d3d7b58d3024ddf) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rph_angrate_t._packed_fingerprint is None:
            rph_angrate_t._packed_fingerprint = struct.pack(">Q", rph_angrate_t._get_hash_recursive([]))
        return rph_angrate_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", rph_angrate_t._get_packed_fingerprint())[0]

