"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import compas_lcmtypes.senlcm.sig_bool_t

import compas_lcmtypes.senlcm.sig_double_t

import compas_lcmtypes.senlcm.sig_long_t

class generic_t(object):
    __slots__ = ["publisher", "timestamp", "sentence", "num_doubles", "sig_doubles", "num_long", "sig_longs", "num_bools", "sig_bools"]

    __typenames__ = ["string", "double", "string", "int16_t", "compas_lcmtypes.senlcm.sig_double_t", "int16_t", "compas_lcmtypes.senlcm.sig_long_t", "int16_t", "compas_lcmtypes.senlcm.sig_bool_t"]

    __dimensions__ = [None, None, None, None, ["num_doubles"], None, ["num_long"], None, ["num_bools"]]

    def __init__(self):
        self.publisher = ""
        self.timestamp = 0.0
        self.sentence = ""
        self.num_doubles = 0
        self.sig_doubles = []
        self.num_long = 0
        self.sig_longs = []
        self.num_bools = 0
        self.sig_bools = []

    def encode(self):
        buf = BytesIO()
        buf.write(generic_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __publisher_encoded = self.publisher.encode('utf-8')
        buf.write(struct.pack('>I', len(__publisher_encoded)+1))
        buf.write(__publisher_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.timestamp))
        __sentence_encoded = self.sentence.encode('utf-8')
        buf.write(struct.pack('>I', len(__sentence_encoded)+1))
        buf.write(__sentence_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">h", self.num_doubles))
        for i0 in range(self.num_doubles):
            assert self.sig_doubles[i0]._get_packed_fingerprint() == compas_lcmtypes.senlcm.sig_double_t._get_packed_fingerprint()
            self.sig_doubles[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.num_long))
        for i0 in range(self.num_long):
            assert self.sig_longs[i0]._get_packed_fingerprint() == compas_lcmtypes.senlcm.sig_long_t._get_packed_fingerprint()
            self.sig_longs[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.num_bools))
        for i0 in range(self.num_bools):
            assert self.sig_bools[i0]._get_packed_fingerprint() == compas_lcmtypes.senlcm.sig_bool_t._get_packed_fingerprint()
            self.sig_bools[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != generic_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return generic_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = generic_t()
        __publisher_len = struct.unpack('>I', buf.read(4))[0]
        self.publisher = buf.read(__publisher_len)[:-1].decode('utf-8', 'replace')
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        __sentence_len = struct.unpack('>I', buf.read(4))[0]
        self.sentence = buf.read(__sentence_len)[:-1].decode('utf-8', 'replace')
        self.num_doubles = struct.unpack(">h", buf.read(2))[0]
        self.sig_doubles = []
        for i0 in range(self.num_doubles):
            self.sig_doubles.append(compas_lcmtypes.senlcm.sig_double_t._decode_one(buf))
        self.num_long = struct.unpack(">h", buf.read(2))[0]
        self.sig_longs = []
        for i0 in range(self.num_long):
            self.sig_longs.append(compas_lcmtypes.senlcm.sig_long_t._decode_one(buf))
        self.num_bools = struct.unpack(">h", buf.read(2))[0]
        self.sig_bools = []
        for i0 in range(self.num_bools):
            self.sig_bools.append(compas_lcmtypes.senlcm.sig_bool_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if generic_t in parents: return 0
        newparents = parents + [generic_t]
        tmphash = (0x1f28d7454bcebb69+ compas_lcmtypes.senlcm.sig_double_t._get_hash_recursive(newparents)+ compas_lcmtypes.senlcm.sig_long_t._get_hash_recursive(newparents)+ compas_lcmtypes.senlcm.sig_bool_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if generic_t._packed_fingerprint is None:
            generic_t._packed_fingerprint = struct.pack(">Q", generic_t._get_hash_recursive([]))
        return generic_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", generic_t._get_packed_fingerprint())[0]

