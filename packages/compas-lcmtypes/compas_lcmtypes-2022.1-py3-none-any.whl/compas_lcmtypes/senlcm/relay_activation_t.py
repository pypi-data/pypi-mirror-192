"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class relay_activation_t(object):
    __slots__ = ["utime", "cam_1", "cam_2", "dvl", "bp_oculus", "laser", "led", "odroid"]

    __typenames__ = ["int64_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    ON = 1
    OFF = 0

    def __init__(self):
        self.utime = 0
        self.cam_1 = 0
        self.cam_2 = 0
        self.dvl = 0
        self.bp_oculus = 0
        self.laser = 0
        self.led = 0
        self.odroid = 0

    def encode(self):
        buf = BytesIO()
        buf.write(relay_activation_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhhhhhhh", self.utime, self.cam_1, self.cam_2, self.dvl, self.bp_oculus, self.laser, self.led, self.odroid))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != relay_activation_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return relay_activation_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = relay_activation_t()
        self.utime, self.cam_1, self.cam_2, self.dvl, self.bp_oculus, self.laser, self.led, self.odroid = struct.unpack(">qhhhhhhh", buf.read(22))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if relay_activation_t in parents: return 0
        tmphash = (0xce51f04b6f7132fd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if relay_activation_t._packed_fingerprint is None:
            relay_activation_t._packed_fingerprint = struct.pack(">Q", relay_activation_t._get_hash_recursive([]))
        return relay_activation_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", relay_activation_t._get_packed_fingerprint())[0]

