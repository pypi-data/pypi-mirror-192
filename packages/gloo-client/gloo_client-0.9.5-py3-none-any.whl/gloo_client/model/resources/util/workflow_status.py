# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class WorkflowStatus(str, enum.Enum):
    NOT_SUPPORTED = "NOT_SUPPORTED"
    PENDING = "PENDING"
    QUEUED = "QUEUED"
    RUNNING = "RUNNING"
    READY = "READY"
    ERROR = "ERROR"

    def visit(
        self,
        not_supported: typing.Callable[[], T_Result],
        pending: typing.Callable[[], T_Result],
        queued: typing.Callable[[], T_Result],
        running: typing.Callable[[], T_Result],
        ready: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is WorkflowStatus.NOT_SUPPORTED:
            return not_supported()
        if self is WorkflowStatus.PENDING:
            return pending()
        if self is WorkflowStatus.QUEUED:
            return queued()
        if self is WorkflowStatus.RUNNING:
            return running()
        if self is WorkflowStatus.READY:
            return ready()
        if self is WorkflowStatus.ERROR:
            return error()
