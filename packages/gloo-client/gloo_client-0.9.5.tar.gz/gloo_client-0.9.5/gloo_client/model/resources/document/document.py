# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime
from ..util.document_group_id import DocumentGroupId
from ..util.document_id import DocumentId
from .document_chunk_metadata import DocumentChunkMetadata
from .document_metadata import DocumentMetadata


class Document(pydantic.BaseModel):
    document_id: DocumentId
    document_group_id: DocumentGroupId
    name: str
    tags: typing.List[str]
    chunks: typing.List[DocumentChunkMetadata]
    metadata: DocumentMetadata

    class Partial(typing_extensions.TypedDict):
        document_id: typing_extensions.NotRequired[DocumentId]
        document_group_id: typing_extensions.NotRequired[DocumentGroupId]
        name: typing_extensions.NotRequired[str]
        tags: typing_extensions.NotRequired[typing.List[str]]
        chunks: typing_extensions.NotRequired[typing.List[DocumentChunkMetadata]]
        metadata: typing_extensions.NotRequired[DocumentMetadata]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
