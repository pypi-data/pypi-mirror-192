# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def complete(self, value: str) -> Content:
        return Content(__root__=_Content.Complete(type="complete", value=value))

    def chunked(self, value: typing.List[str]) -> Content:
        return Content(__root__=_Content.Chunked(type="chunked", value=value))


class Content(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(self) -> typing.Union[_Content.Complete, _Content.Chunked]:
        return self.__root__

    def visit(
        self, complete: typing.Callable[[str], T_Result], chunked: typing.Callable[[typing.List[str]], T_Result]
    ) -> T_Result:
        if self.__root__.type == "complete":
            return complete(self.__root__.value)
        if self.__root__.type == "chunked":
            return chunked(self.__root__.value)

    __root__: typing_extensions.Annotated[
        typing.Union[_Content.Complete, _Content.Chunked], pydantic.Field(discriminator="type")
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}


class _Content:
    class Complete(pydantic.BaseModel):
        type: typing_extensions.Literal["complete"]
        value: str

        class Config:
            frozen = True

    class Chunked(pydantic.BaseModel):
        type: typing_extensions.Literal["chunked"]
        value: typing.List[str]

        class Config:
            frozen = True


Content.update_forward_refs()
