[build-system]
requires = ["setuptools~=62.3", "wheel~=0.37.1"]
build-backend = "setuptools.build_meta"

[project]
name        = "hahomematic"
version     = "2023.2.9"
license     = {text = "MIT License"}
description = "Homematic interface for Home Assistant running on Python 3."
readme      = "README.md"
authors     = [
    {name = "Daniel Perna", email = "danielperna84@gmail.com"},
    {name = "SukramJ", email = "sukramj@icloud.com"},
]
keywords    = ["home", "automation", "homematic"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Home Automation",
]
requires-python = ">=3.10.0"
dependencies    = [
    "aiohttp>=3.8.1",
    "python-slugify>=4.0.1",
    "voluptuous>=0.13.1",
]

[project.urls]
"Source Code" = "https://github.com/danielperna84/hahomematic"
"Bug Reports" = "https://github.com/danielperna84/hahomematic/issues"
"Docs: Dev"   = "https://github.com/danielperna84/hahomematic"
"Forum"       = "https://github.com/danielperna84/hahomematic/discussions"

[options.entry_points."console_scripts"]
hahomematic = "hahomematic.hmcli:main"

[tool.setuptools]
platforms = ["any"]
zip-safe  = false
include-package-data = true

[tool.setuptools.packages.find]
include = ["hahomematic*"]
exclude = ["tests", "tests.*", "dist", "build"]

[tool.setuptools.package-data]
hahomematic = ["py.typed", "rega_scripts/*.fn"]

[tool.black]
target-version = ["py310", "py311"]
exclude = 'generated'
line-length = 99

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "hahomematic",
    "tests",
]
forced_separate = [
    "tests",
]
combine_as_imports = true

[tool.pylint.MAIN]
py-version = "3.10"
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 2
init-hook = """\
    from pathlib import Path; \
    import sys; \

    from pylint.config import find_default_config_files; \

    sys.path.append( \
        str(Path(next(find_default_config_files())).parent.joinpath('pylint/plugins'))
    ); \
    sys.path.append(".") \
    """
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
    "pylint_strict_informational",
]
persistent = false
extension-pkg-allow-list = [
    "av.audio.stream",
    "av.stream",
    "ciso8601",
    "cv2",
]

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
    "_",
    "ev",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "Run",
    "ip",
    "T",
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Enable once current issues are fixed:
# consider-using-namedtuple-or-dataclass (Pylint CodeStyle extension)
# consider-using-assignment-expr (Pylint CodeStyle extension)
disable = [
    "format",
    "abstract-method",
    "broad-except",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
    "consider-using-f-string",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-assignment-expr",
]
enable = [
    #"useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]
mixin-class-rgx = ".*[Mm]ix[Ii]n"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtins.Exception",
]

[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.CODE_STYLE]
max-line-length-suggestions = 99

[tool.pytest.ini_options]
pythonpath = [
    ".",
    "hahomematic",
]
testpaths = [
    "tests",
]
norecursedirs = [
    ".git",
    "testing_config",
]
asyncio_mode = "auto"

[tool.ruff]
target-version = "py310"
line-length = 99


select = [
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "G",  # flake8-logging-format
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PIE",  # flake8-pie
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "RET",  # unnecessary-return-none
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF100", # unused-noqa
    "SIM",  # flake8-simplify
    "T20",  # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D212",  # Multi-line docstring summary should start at the first line
    "E731",  # do not assign a lambda expression, use a def
    "PIE804", # Unnecessary `dict` kwargs
    "RET501",  # Do not explicitly return None in function if it is the only possible return value
    "RET502", # Do not implicitly return None in function able to return non-None value
    "RET503", # Missing explicit return at the end of function able to return non-None value
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.per-file-ignores]
"script/*" = ["T20"]

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = ["hahomematic"]

[tool.ruff.mccabe]
max-complexity = 25
