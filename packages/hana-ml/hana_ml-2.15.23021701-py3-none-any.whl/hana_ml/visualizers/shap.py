"""
This module provides some explainers for Shapley values.

The following classes are available:

    * :class:`ShapleyExplainer`
    * :class:`TimeSeriesExplainer`
"""

# pylint: disable=pointless-string-statement
# pylint: disable=too-few-public-methods
# pylint: disable=too-many-lines
# pylint: disable=line-too-long
# pylint: disable=too-many-locals
# pylint: disable=too-many-statements
# pylint: disable=too-many-arguments
# pylint: disable=missing-docstring
# pylint: disable=consider-using-enumerate
# pylint: disable=too-many-instance-attributes
# pylint: disable=no-member
# pylint: disable=too-many-branches
# pylint: disable=invalid-name
# pylint: disable=unsubscriptable-object
# pylint: disable=too-many-function-args
# pylint: disable=no-self-use
# pylint: disable=broad-except
# pylint: disable=no-else-continue
# pylint: disable=consider-using-f-string
# pylint: disable=pointless-statement
# pylint: disable=unused-argument
# pylint: disable=too-many-nested-blocks
# pylint: disable=consider-iterating-dictionary

import uuid
import json
import platform
import math
import numpy as np
from matplotlib import font_manager
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.cm as cm
import pandas
from hana_ml import dataframe
from hana_ml.visualizers.model_report import TemplateUtil
from hana_ml.visualizers.ui_components import HTMLFrameUtils
from hana_ml.algorithms.pal.tsa import additive_model_forecast
# from hana_ml.algorithms.pal.tsa.auto_arima import AutoARIMA
from hana_ml.visualizers.ui_components import ChartBuilder, ChartConfig, unify_min_max_value_of_yAxis


def matplotlib_to_match_chinese_font():
    if platform.system() == "Windows":
        plt.rcParams['font.family'] = 'Microsoft YaHei'
    else:
        si_yuan_font = 'Source Han Sans SC'
        font_path = font_manager.findfont(si_yuan_font)
        if font_path.find(si_yuan_font) >= 0:
            plt.rcParams['font.family'] = si_yuan_font
        else:
            print('\033[31m{}'.format('If you need to use Chinese, you must configure the Chinese font for Matplotlib.'))


matplotlib_to_match_chinese_font()


# colormap
reds = [(0.0, 0.0, 0.0), (0.010101010101010102, 0.0, 0.0), (0.020202020202020204, 0.0, 0.0),
        (0.030303030303030304, 0.0, 0.0), (0.04040404040404041, 0.0, 0.0), (0.05050505050505051, 0.0, 0.0),
        (0.06060606060606061, 0.0, 0.0), (0.07070707070707072, 0.0, 0.0), (0.08080808080808081, 0.0, 0.0),
        (0.09090909090909091, 0.0, 0.0), (0.10101010101010102, 0.0, 0.0), (0.11111111111111112, 0.0, 0.0),
        (0.12121212121212122, 0.0, 0.0), (0.13131313131313133, 0.0, 0.0), (0.14141414141414144, 0.0, 0.0),
        (0.15151515151515152, 0.0, 0.0), (0.16161616161616163, 0.0, 0.0), (0.17171717171717174, 0.0, 0.0),
        (0.18181818181818182, 0.0, 0.0), (0.19191919191919193, 0.09513573642340581, 0.09513573642340581),
        (0.20202020202020204, 0.149977589486231, 0.149977589486231),
        (0.21212121212121213, 0.18984519975143163, 0.18984519975143163),
        (0.22222222222222224, 0.22250813305266026, 0.22250813305266026),
        (0.23232323232323235, 0.2507439769341872, 0.2507439769341872),
        (0.24242424242424243, 0.27591253749866157, 0.27591253749866157),
        (0.25252525252525254, 0.2987945452333293, 0.2987945452333293),
        (0.26262626262626265, 0.319884700277949, 0.319884700277949),
        (0.27272727272727276, 0.33951833591398445, 0.33951833591398445),
        (0.2828282828282829, 0.35793420555815375, 0.35793420555815375),
        (0.29292929292929293, 0.37530877141013624, 0.37530877141013624),
        (0.30303030303030304, 0.39177633889131064, 0.39177633889131064),
        (0.31313131313131315, 0.4074415678597366, 0.4074415678597366),
        (0.32323232323232326, 0.4223876084051232, 0.4223876084051232),
        (0.33333333333333337, 0.43668159286466907, 0.43668159286466907),
        (0.3434343434343435, 0.45037846107241947, 0.45037846107241947),
        (0.3535353535353536, 0.46352369658733245, 0.46352369658733245),
        (0.36363636363636365, 0.47615532936061705, 0.47615532936061705),
        (0.37373737373737376, 0.48830543109409946, 0.48830543109409946),
        (0.38383838383838387, 0.5000012515995729, 0.5000012515995729),
        (0.393939393939394, 0.5112660959139618, 0.5112660959139618),
        (0.4040404040404041, 0.5221200108096996, 0.5221200108096996),
        (0.4141414141414142, 0.5325803288951875, 0.5325803288951875),
        (0.42424242424242425, 0.5426621047639536, 0.5426621047639536),
        (0.43434343434343436, 0.5523784682355345, 0.5523784682355345),
        (0.4444444444444445, 0.5617409131594352, 0.5617409131594352),
        (0.4545454545454546, 0.570759535590984, 0.570759535590984),
        (0.4646464646464647, 0.5794432317900741, 0.5794432317900741),
        (0.4747474747474748, 0.5877998640422818, 0.5877998640422818),
        (0.48484848484848486, 0.5958364004893894, 0.5958364004893894),
        (0.494949494949495, 0.6035590338007161, 0.6035590338007161),
        (0.5050505050505051, 0.614160334315636, 0.614160334315636),
        (0.5151515151515152, 0.6276746892224632, 0.6276746892224632),
        (0.5252525252525253, 0.6409319791289025, 0.6409319791289025),
        (0.5353535353535354, 0.6539388754166644, 0.6539388754166644),
        (0.5454545454545455, 0.6667011295242296, 0.6667011295242296),
        (0.5555555555555556, 0.679223697846038, 0.679223697846038),
        (0.5656565656565657, 0.6915108475219496, 0.6915108475219496),
        (0.5757575757575758, 0.7035662465596244, 0.7035662465596244),
        (0.5858585858585859, 0.7153930410245223, 0.7153930410245223),
        (0.595959595959596, 0.7269939214865447, 0.7269939214865447),
        (0.6060606060606061, 0.7383711804880513, 0.7383711804880513),
        (0.6161616161616162, 0.7495267624654789, 0.7495267624654789),
        (0.6262626262626263, 0.7604623072942532, 0.7604623072942532),
        (0.6363636363636365, 0.7711791884178997, 0.7711791884178997),
        (0.6464646464646465, 0.7816785463551588, 0.7816785463551588),
        (0.6565656565656566, 0.791961318244306, 0.791961318244306),
        (0.6666666666666667, 0.8020282639748206, 0.8020282639748206),
        (0.6767676767676768, 0.8118799893677009, 0.8118799893677009),
        (0.686868686868687, 0.8215169667929548, 0.8215169667929548),
        (0.696969696969697, 0.8309395535528831, 0.8309395535528831),
        (0.7070707070707072, 0.8401480083102517, 0.8401480083102517),
        (0.7171717171717172, 0.8491425057992789, 0.8491425057992789),
        (0.7272727272727273, 0.8579231500230392, 0.8579231500230392),
        (0.7373737373737375, 0.8664899861121106, 0.8664899861121106),
        (0.7474747474747475, 0.8748430109951181, 0.8748430109951181),
        (0.7575757575757577, 0.8829821830113882, 0.8829821830113882),
        (0.7676767676767677, 0.8909074305786606, 0.8909074305786606),
        (0.7777777777777778, 0.898618660014075, 0.898618660014075),
        (0.787878787878788, 0.9061157625941483, 0.9061157625941483),
        (0.797979797979798, 0.9133986209287152, 0.9133986209287152),
        (0.8080808080808082, 0.9204671147146254, 0.9204671147146254),
        (0.8181818181818182, 0.927321125927079, 0.927321125927079),
        (0.8282828282828284, 0.9339605434996562, 0.9339605434996562),
        (0.8383838383838385, 0.9403852675382112, 0.9403852675382112),
        (0.8484848484848485, 0.9465952131086689, 0.9465952131086689),
        (0.8585858585858587, 0.952590313634344, 0.952590313634344),
        (0.8686868686868687, 0.9583705239345074, 0.9583705239345074),
        (0.8787878787878789, 0.963935822932566, 0.963935822932566),
        (0.888888888888889, 0.9692862160592569, 0.9692862160592569),
        (0.8989898989898991, 0.9744217373736676, 0.9744217373736676),
        (0.9090909090909092, 0.9793424514226171, 0.9793424514226171),
        (0.9191919191919192, 0.984048454856926, 0.984048454856926),
        (0.9292929292929294, 0.9885398778213396, 0.9885398778213396),
        (0.9393939393939394, 0.9928168851332914, 0.9928168851332914),
        (0.9494949494949496, 0.9968796772643155, 0.9968796772643155), (0.9595959595959597, 1.0, 1.0),
        (0.9696969696969697, 1.0, 1.0), (0.9797979797979799, 1.0, 1.0), (0.98989898989899, 1.0, 1.0), (1.0, 1.0, 1.0)]
greens = [(0.0, 0.5433775692459109, 0.5433775692459109), (0.010101010101010102, 0.5380131056774171, 0.5380131056774171),
          (0.020202020202020204, 0.5325860918458792, 0.5325860918458792),
          (0.030303030303030304, 0.5270951836490804, 0.5270951836490804),
          (0.04040404040404041, 0.5215389952499119, 0.5215389952499119),
          (0.05050505050505051, 0.5159160961012919, 0.5159160961012919),
          (0.06060606060606061, 0.5102250075906866, 0.5102250075906866),
          (0.07070707070707072, 0.5044641992574468, 0.5044641992574468),
          (0.08080808080808081, 0.49863208452972313, 0.49863208452972313),
          (0.09090909090909091, 0.49272701592021345, 0.49272701592021345),
          (0.10101010101010102, 0.48674727961120084, 0.48674727961120084),
          (0.11111111111111112, 0.48069108934903176, 0.48069108934903176),
          (0.12121212121212122, 0.4745565795560263, 0.4745565795560263),
          (0.13131313131313133, 0.46834179755347544, 0.46834179755347544),
          (0.14141414141414144, 0.46204469477233273, 0.46204469477233273),
          (0.15151515151515152, 0.4556631168079472, 0.4556631168079472),
          (0.16161616161616163, 0.44919479215093744, 0.44919479215093744),
          (0.17171717171717174, 0.442637319397201, 0.442637319397201),
          (0.18181818181818182, 0.4359881527049545, 0.4359881527049545),
          (0.19191919191919193, 0.4292445852241681, 0.4292445852241681),
          (0.20202020202020204, 0.42240373017198285, 0.42240373017198285),
          (0.21212121212121213, 0.41546249916431627, 0.41546249916431627),
          (0.22222222222222224, 0.4084175773358868, 0.4084175773358868),
          (0.23232323232323235, 0.4012653946843772, 0.4012653946843772),
          (0.24242424242424243, 0.3940020929542758, 0.3940020929542758),
          (0.25252525252525254, 0.38662348722534373, 0.38662348722534373),
          (0.26262626262626265, 0.3791250211806309, 0.3791250211806309),
          (0.27272727272727276, 0.37150171478743294, 0.37150171478743294),
          (0.2828282828282829, 0.36374810281522496, 0.36374810281522496),
          (0.29292929292929293, 0.3558581622150453, 0.3558581622150453),
          (0.30303030303030304, 0.34782522586415576, 0.34782522586415576),
          (0.31313131313131315, 0.33964187949491365, 0.33964187949491365),
          (0.32323232323232326, 0.33129983771651894, 0.33129983771651894),
          (0.33333333333333337, 0.3227897938151304, 0.3227897938151304),
          (0.3434343434343435, 0.314101236354367, 0.314101236354367),
          (0.3535353535353536, 0.3052222233064608, 0.3052222233064608),
          (0.36363636363636365, 0.29613910124198817, 0.29613910124198817),
          (0.37373737373737376, 0.28683615256161693, 0.28683615256161693),
          (0.38383838383838387, 0.27729514719353315, 0.27729514719353315),
          (0.393939393939394, 0.2674947655319573, 0.2674947655319573),
          (0.4040404040404041, 0.2574098449023472, 0.2574098449023472),
          (0.4141414141414142, 0.24701037956520555, 0.24701037956520555),
          (0.42424242424242425, 0.23626016912275577, 0.23626016912275577),
          (0.43434343434343436, 0.22511495305887125, 0.22511495305887125),
          (0.4444444444444445, 0.21351977306184167, 0.21351977306184167),
          (0.4545454545454546, 0.20140513673702382, 0.20140513673702382),
          (0.4646464646464647, 0.1886812486090198, 0.1886812486090198),
          (0.4747474747474748, 0.17522897929561718, 0.17522897929561718),
          (0.48484848484848486, 0.1608850147424279, 0.1608850147424279),
          (0.494949494949495, 0.1454158731826717, 0.1454158731826717),
          (0.5050505050505051, 0.13267718995513128, 0.13267718995513128),
          (0.5151515151515152, 0.12322916323897495, 0.12322916323897495),
          (0.5252525252525253, 0.11302241933496515, 0.11302241933496515),
          (0.5353535353535354, 0.10188535650391536, 0.10188535650391536),
          (0.5454545454545455, 0.08956178519454805, 0.08956178519454805),
          (0.5555555555555556, 0.07564038887394883, 0.07564038887394883),
          (0.5656565656565657, 0.059385815269280266, 0.059385815269280266),
          (0.5757575757575758, 0.039217108398018743, 0.039217108398018743),
          (0.5858585858585859, 0.01625008613001264, 0.01625008613001264), (0.595959595959596, 0.0, 0.0),
          (0.6060606060606061, 0.0, 0.0), (0.6161616161616162, 0.0, 0.0), (0.6262626262626263, 0.0, 0.0),
          (0.6363636363636365, 0.0, 0.0), (0.6464646464646465, 0.0, 0.0), (0.6565656565656566, 0.0, 0.0),
          (0.6666666666666667, 0.0, 0.0), (0.6767676767676768, 0.0, 0.0), (0.686868686868687, 0.0, 0.0),
          (0.696969696969697, 0.0, 0.0), (0.7070707070707072, 0.0, 0.0), (0.7171717171717172, 0.0, 0.0),
          (0.7272727272727273, 0.0, 0.0), (0.7373737373737375, 0.0, 0.0), (0.7474747474747475, 0.0, 0.0),
          (0.7575757575757577, 0.0, 0.0), (0.7676767676767677, 0.0, 0.0), (0.7777777777777778, 0.0, 0.0),
          (0.787878787878788, 0.0, 0.0), (0.797979797979798, 0.0, 0.0), (0.8080808080808082, 0.0, 0.0),
          (0.8181818181818182, 0.0, 0.0), (0.8282828282828284, 0.0, 0.0), (0.8383838383838385, 0.0, 0.0),
          (0.8484848484848485, 0.0, 0.0), (0.8585858585858587, 0.0, 0.0), (0.8686868686868687, 0.0, 0.0),
          (0.8787878787878789, 0.0, 0.0), (0.888888888888889, 0.0, 0.0), (0.8989898989898991, 0.0, 0.0),
          (0.9090909090909092, 0.0, 0.0), (0.9191919191919192, 0.0, 0.0), (0.9292929292929294, 0.0, 0.0),
          (0.9393939393939394, 0.0, 0.0), (0.9494949494949496, 0.0, 0.0), (0.9595959595959597, 0.0, 0.0),
          (0.9696969696969697, 0.0, 0.0), (0.9797979797979799, 0.0, 0.0), (0.98989898989899, 0.0, 0.0), (1.0, 0.0, 0.0)]
blues = [(0.0, 0.983379062301401, 0.983379062301401), (0.010101010101010102, 0.9820144555827063, 0.9820144555827063),
         (0.020202020202020204, 0.9804542127882728, 0.9804542127882728),
         (0.030303030303030304, 0.9786968659767635, 0.9786968659767635),
         (0.04040404040404041, 0.9767410464755345, 0.9767410464755345),
         (0.05050505050505051, 0.9745854866108455, 0.9745854866108455),
         (0.06060606060606061, 0.972229021384094, 0.972229021384094),
         (0.07070707070707072, 0.96967059009232, 0.96967059009232),
         (0.08080808080808081, 0.9669092378912777, 0.9669092378912777),
         (0.09090909090909091, 0.963944117299404, 0.963944117299404),
         (0.10101010101010102, 0.9607744896410885, 0.9607744896410885),
         (0.11111111111111112, 0.957399726427666, 0.957399726427666),
         (0.12121212121212122, 0.953819310674635, 0.953819310674635),
         (0.13131313131313133, 0.9500328381536324, 0.9500328381536324),
         (0.14141414141414144, 0.9460400185777597, 0.9460400185777597),
         (0.15151515151515152, 0.9418406767189034, 0.9418406767189034),
         (0.16161616161616163, 0.9374347534557455, 0.9374347534557455),
         (0.17171717171717174, 0.9328223067512144, 0.9328223067512144),
         (0.18181818181818182, 0.9280035125581774, 0.9280035125581774),
         (0.19191919191919193, 0.9229786656522336, 0.9229786656522336),
         (0.20202020202020204, 0.9177481803905188, 0.9177481803905188),
         (0.21212121212121213, 0.9123125913954874, 0.9123125913954874),
         (0.22222222222222224, 0.906672554162692, 0.906672554162692),
         (0.23232323232323235, 0.9008288455916403, 0.9008288455916403),
         (0.24242424242424243, 0.8947823644388534, 0.8947823644388534),
         (0.25252525252525254, 0.8885341316923154, 0.8885341316923154),
         (0.26262626262626265, 0.8820852908665542, 0.8820852908665542),
         (0.27272727272727276, 0.8754371082176414, 0.8754371082176414),
         (0.2828282828282829, 0.8685909728774643, 0.8685909728774643),
         (0.29292929292929293, 0.8615483969066646, 0.8615483969066646),
         (0.30303030303030304, 0.8543110152656943, 0.8543110152656943),
         (0.31313131313131315, 0.8468805857034903, 0.8468805857034903),
         (0.32323232323232326, 0.8392589885633143, 0.8392589885633143),
         (0.33333333333333337, 0.8314482265053532, 0.8314482265053532),
         (0.3434343434343435, 0.8234504241457206, 0.8234504241457206),
         (0.3535353535353536, 0.815267827611534, 0.815267827611534),
         (0.36363636363636365, 0.806902804011793, 0.806902804011793),
         (0.37373737373737376, 0.7983578408238029, 0.7983578408238029),
         (0.38383838383838387, 0.7896355451949306, 0.7896355451949306),
         (0.393939393939394, 0.7807386431594955, 0.7807386431594955),
         (0.4040404040404041, 0.7716699787706196, 0.7716699787706196),
         (0.4141414141414142, 0.7624325131468689, 0.7624325131468689),
         (0.42424242424242425, 0.7530293234335256, 0.7530293234335256),
         (0.43434343434343436, 0.7434636016783122, 0.7434636016783122),
         (0.4444444444444445, 0.7337386536213804, 0.7337386536213804),
         (0.4545454545454546, 0.7238578973993351, 0.7238578973993351),
         (0.4646464646464647, 0.7138248621630163, 0.7138248621630163),
         (0.4747474747474748, 0.7036431866086941, 0.7036431866086941),
         (0.48484848484848486, 0.6933166174222382, 0.6933166174222382),
         (0.494949494949495, 0.6828490076357064, 0.6828490076357064),
         (0.5050505050505051, 0.6753101952065809, 0.6753101952065809),
         (0.5151515151515152, 0.6706815740893871, 0.6706815740893871),
         (0.5252525252525253, 0.6658926984561501, 0.6658926984561501),
         (0.5353535353535354, 0.6609464019459689, 0.6609464019459689),
         (0.5454545454545455, 0.6558455900211337, 0.6558455900211337),
         (0.5555555555555556, 0.6505932365921623, 0.6505932365921623),
         (0.5656565656565657, 0.6451923804855834, 0.6451923804855834),
         (0.5757575757575758, 0.639646121749524, 0.639646121749524),
         (0.5858585858585859, 0.6339576177917069, 0.6339576177917069),
         (0.595959595959596, 0.6281300793439307, 0.6281300793439307),
         (0.6060606060606061, 0.6221667662465293, 0.6221667662465293),
         (0.6161616161616162, 0.6160709830456553, 0.6160709830456553),
         (0.6262626262626263, 0.6098460743954964, 0.6098460743954964),
         (0.6363636363636365, 0.6034954202567154, 0.6034954202567154),
         (0.6464646464646465, 0.5970224308814825, 0.5970224308814825),
         (0.6565656565656566, 0.5904305415744134, 0.5904305415744134),
         (0.6666666666666667, 0.5837232072175765, 0.5837232072175765),
         (0.6767676767676768, 0.5769038965463702, 0.5769038965463702),
         (0.686868686868687, 0.5699760861615892, 0.5699760861615892),
         (0.696969696969697, 0.562943254261266, 0.562943254261266),
         (0.7070707070707072, 0.5558088740739261, 0.5558088740739261),
         (0.7171717171717172, 0.5485764069726619, 0.5485764069726619),
         (0.7272727272727273, 0.5412492952468737, 0.5412492952468737),
         (0.7373737373737375, 0.5338309545055789, 0.5338309545055789),
         (0.7474747474747475, 0.5263247656828219, 0.5263247656828219),
         (0.7575757575757577, 0.5187340666117845, 0.5187340666117845),
         (0.7676767676767677, 0.5110621431296802, 0.5110621431296802),
         (0.7777777777777778, 0.5033122196702324, 0.5033122196702324),
         (0.787878787878788, 0.49548744929438354, 0.49548744929438354),
         (0.797979797979798, 0.4875909031026881, 0.4875909031026881),
         (0.8080808080808082, 0.4796255589643726, 0.4796255589643726),
         (0.8181818181818182, 0.47159428948807475, 0.47159428948807475),
         (0.8282828282828284, 0.4634998491474714, 0.4634998491474714),
         (0.8383838383838385, 0.4553448604609777, 0.4553448604609777),
         (0.8484848484848485, 0.4471317991079881, 0.4471317991079881),
         (0.8585858585858587, 0.43886297784410105, 0.43886297784410105),
         (0.8686868686868687, 0.43054052905369605, 0.43054052905369605),
         (0.8787878787878789, 0.4221663857491592, 0.4221663857491592),
         (0.888888888888889, 0.41374226079076587, 0.41374226079076587),
         (0.8989898989898991, 0.40526962405822997, 0.40526962405822997),
         (0.9090909090909092, 0.3967496772522188, 0.3967496772522188),
         (0.9191919191919192, 0.38818332593922716, 0.38818332593922716),
         (0.9292929292929294, 0.37957114837279843, 0.37957114837279843),
         (0.9393939393939394, 0.37091336052389584, 0.37091336052389584),
         (0.9494949494949496, 0.3622097766276356, 0.3622097766276356),
         (0.9595959595959597, 0.35345976439506793, 0.35345976439506793),
         (0.9696969696969697, 0.34466219383721586, 0.34466219383721586),
         (0.9797979797979799, 0.3358153783905527, 0.3358153783905527),
         (0.98989898989899, 0.3269170066999887, 0.3269170066999887), (1.0, 0.31796406298163893, 0.31796406298163893)]
alphas = [(0.0, 1.0, 1.0), (0.010101010101010102, 1.0, 1.0), (0.020202020202020204, 1.0, 1.0),
          (0.030303030303030304, 1.0, 1.0), (0.04040404040404041, 1.0, 1.0), (0.05050505050505051, 1.0, 1.0),
          (0.06060606060606061, 1.0, 1.0), (0.07070707070707072, 1.0, 1.0), (0.08080808080808081, 1.0, 1.0),
          (0.09090909090909091, 1.0, 1.0), (0.10101010101010102, 1.0, 1.0), (0.11111111111111112, 1.0, 1.0),
          (0.12121212121212122, 1.0, 1.0), (0.13131313131313133, 1.0, 1.0), (0.14141414141414144, 1.0, 1.0),
          (0.15151515151515152, 1.0, 1.0), (0.16161616161616163, 1.0, 1.0), (0.17171717171717174, 1.0, 1.0),
          (0.18181818181818182, 1.0, 1.0), (0.19191919191919193, 1.0, 1.0), (0.20202020202020204, 1.0, 1.0),
          (0.21212121212121213, 1.0, 1.0), (0.22222222222222224, 1.0, 1.0), (0.23232323232323235, 1.0, 1.0),
          (0.24242424242424243, 1.0, 1.0), (0.25252525252525254, 1.0, 1.0), (0.26262626262626265, 1.0, 1.0),
          (0.27272727272727276, 1.0, 1.0), (0.2828282828282829, 1.0, 1.0), (0.29292929292929293, 1.0, 1.0),
          (0.30303030303030304, 1.0, 1.0), (0.31313131313131315, 1.0, 1.0), (0.32323232323232326, 1.0, 1.0),
          (0.33333333333333337, 1.0, 1.0), (0.3434343434343435, 1.0, 1.0), (0.3535353535353536, 1.0, 1.0),
          (0.36363636363636365, 1.0, 1.0), (0.37373737373737376, 1.0, 1.0), (0.38383838383838387, 1.0, 1.0),
          (0.393939393939394, 1.0, 1.0), (0.4040404040404041, 1.0, 1.0), (0.4141414141414142, 1.0, 1.0),
          (0.42424242424242425, 1.0, 1.0), (0.43434343434343436, 1.0, 1.0), (0.4444444444444445, 1.0, 1.0),
          (0.4545454545454546, 1.0, 1.0), (0.4646464646464647, 1.0, 1.0), (0.4747474747474748, 1.0, 1.0),
          (0.48484848484848486, 1.0, 1.0), (0.494949494949495, 1.0, 1.0), (0.5050505050505051, 1.0, 1.0),
          (0.5151515151515152, 1.0, 1.0), (0.5252525252525253, 1.0, 1.0), (0.5353535353535354, 1.0, 1.0),
          (0.5454545454545455, 1.0, 1.0), (0.5555555555555556, 1.0, 1.0), (0.5656565656565657, 1.0, 1.0),
          (0.5757575757575758, 1.0, 1.0), (0.5858585858585859, 1.0, 1.0), (0.595959595959596, 1.0, 1.0),
          (0.6060606060606061, 1.0, 1.0), (0.6161616161616162, 1.0, 1.0), (0.6262626262626263, 1.0, 1.0),
          (0.6363636363636365, 1.0, 1.0), (0.6464646464646465, 1.0, 1.0), (0.6565656565656566, 1.0, 1.0),
          (0.6666666666666667, 1.0, 1.0), (0.6767676767676768, 1.0, 1.0), (0.686868686868687, 1.0, 1.0),
          (0.696969696969697, 1.0, 1.0), (0.7070707070707072, 1.0, 1.0), (0.7171717171717172, 1.0, 1.0),
          (0.7272727272727273, 1.0, 1.0), (0.7373737373737375, 1.0, 1.0), (0.7474747474747475, 1.0, 1.0),
          (0.7575757575757577, 1.0, 1.0), (0.7676767676767677, 1.0, 1.0), (0.7777777777777778, 1.0, 1.0),
          (0.787878787878788, 1.0, 1.0), (0.797979797979798, 1.0, 1.0), (0.8080808080808082, 1.0, 1.0),
          (0.8181818181818182, 1.0, 1.0), (0.8282828282828284, 1.0, 1.0), (0.8383838383838385, 1.0, 1.0),
          (0.8484848484848485, 1.0, 1.0), (0.8585858585858587, 1.0, 1.0), (0.8686868686868687, 1.0, 1.0),
          (0.8787878787878789, 1.0, 1.0), (0.888888888888889, 1.0, 1.0), (0.8989898989898991, 1.0, 1.0),
          (0.9090909090909092, 1.0, 1.0), (0.9191919191919192, 1.0, 1.0), (0.9292929292929294, 1.0, 1.0),
          (0.9393939393939394, 1.0, 1.0), (0.9494949494949496, 1.0, 1.0), (0.9595959595959597, 1.0, 1.0),
          (0.9696969696969697, 1.0, 1.0), (0.9797979797979799, 1.0, 1.0), (0.98989898989899, 1.0, 1.0), (1.0, 1.0, 1.0)]
gray_rgb = np.array([0.51615537, 0.51615111, 0.5161729])

red_blue = LinearSegmentedColormap('red_blue', {
    "red": reds,
    "green": greens,
    "blue": blues,
    "alpha": alphas
})
red_blue.set_bad(gray_rgb, 1.0)
red_blue.set_over(gray_rgb, 1.0)
red_blue.set_under(gray_rgb, 1.0)

red_blue_no_bounds = LinearSegmentedColormap('red_blue_no_bounds', {
    "red": reds,
    "green": greens,
    "blue": blues,
    "alpha": alphas
})

red_blue_transparent = LinearSegmentedColormap('red_blue_no_bounds', {
    "red": reds,
    "green": greens,
    "blue": blues,
    "alpha": [(a[0], 0.5, 0.5) for a in alphas]
})

reds = [(0.0, 0.0, 0.0), (0.005050505050505051, 0.0, 0.0), (0.010101010101010102, 0.0, 0.0),
        (0.015151515151515152, 0.0, 0.0), (0.020202020202020204, 0.0, 0.0), (0.025252525252525256, 0.0, 0.0),
        (0.030303030303030304, 0.0, 0.0), (0.03535353535353536, 0.0, 0.0), (0.04040404040404041, 0.0, 0.0),
        (0.045454545454545456, 0.0, 0.0), (0.05050505050505051, 0.0, 0.0), (0.05555555555555556, 0.0, 0.0),
        (0.06060606060606061, 0.0, 0.0), (0.06565656565656566, 0.0, 0.0), (0.07070707070707072, 0.0, 0.0),
        (0.07575757575757576, 0.0, 0.0), (0.08080808080808081, 0.023686184220235277, 0.023686184220235277),
        (0.08585858585858587, 0.12617645570144387, 0.12617645570144387),
        (0.09090909090909091, 0.1815317555413393, 0.1815317555413393),
        (0.09595959595959597, 0.223819973972261, 0.223819973972261),
        (0.10101010101010102, 0.2593611904404478, 0.2593611904404478),
        (0.10606060606060606, 0.29064711567157486, 0.29064711567157486),
        (0.11111111111111112, 0.3189520976962483, 0.3189520976962483),
        (0.11616161616161617, 0.3450262688992264, 0.3450262688992264),
        (0.12121212121212122, 0.3693525403573886, 0.3693525403573886),
        (0.12626262626262627, 0.392261776568027, 0.392261776568027),
        (0.13131313131313133, 0.41399130992896405, 0.41399130992896405),
        (0.13636363636363638, 0.43471747155423623, 0.43471747155423623),
        (0.14141414141414144, 0.4545749533078108, 0.4545749533078108),
        (0.14646464646464646, 0.47366896656468155, 0.47366896656468155),
        (0.15151515151515152, 0.49208321563475493, 0.49208321563475493),
        (0.15656565656565657, 0.5098853170928199, 0.5098853170928199),
        (0.16161616161616163, 0.5271305957053432, 0.5271305957053432),
        (0.16666666666666669, 0.5438648124259186, 0.5438648124259186),
        (0.17171717171717174, 0.5601261688898664, 0.5601261688898664),
        (0.1767676767676768, 0.575946809098898, 0.575946809098898),
        (0.18181818181818182, 0.5913539637886231, 0.5913539637886231),
        (0.18686868686868688, 0.6063708358242348, 0.6063708358242348),
        (0.19191919191919193, 0.6210172945868472, 0.6210172945868472),
        (0.196969696969697, 0.635310427251387, 0.635310427251387),
        (0.20202020202020204, 0.6492649813192909, 0.6492649813192909),
        (0.2070707070707071, 0.6628937234539486, 0.6628937234539486),
        (0.21212121212121213, 0.6762077331426851, 0.6762077331426851),
        (0.21717171717171718, 0.689216645065956, 0.689216645065956),
        (0.22222222222222224, 0.7019288507012968, 0.7019288507012968),
        (0.2272727272727273, 0.714351667235339, 0.714351667235339),
        (0.23232323232323235, 0.7264914800386191, 0.7264914800386191),
        (0.2373737373737374, 0.7383538635948901, 0.7383538635948901),
        (0.24242424242424243, 0.749943684744307, 0.749943684744307),
        (0.2474747474747475, 0.7612651913102028, 0.7612651913102028),
        (0.25252525252525254, 0.7723220885697191, 0.7723220885697191),
        (0.2575757575757576, 0.7831176055540734, 0.7831176055540734),
        (0.26262626262626265, 0.7936545527919724, 0.7936545527919724),
        (0.2676767676767677, 0.8039353728153527, 0.8039353728153527),
        (0.27272727272727276, 0.8139621845123441, 0.8139621845123441),
        (0.2777777777777778, 0.8237368222245711, 0.8237368222245711),
        (0.2828282828282829, 0.8332608703345125, 0.8332608703345125),
        (0.2878787878787879, 0.8425356939658404, 0.8425356939658404),
        (0.29292929292929293, 0.8515624663194886, 0.8515624663194886),
        (0.297979797979798, 0.8603421930860793, 0.8603421930860793),
        (0.30303030303030304, 0.8688757343076613, 0.8688757343076613),
        (0.3080808080808081, 0.8771638240057011, 0.8771638240057011),
        (0.31313131313131315, 0.8852070878456517, 0.8852070878456517),
        (0.31818181818181823, 0.8930060590695224, 0.8930060590695224),
        (0.32323232323232326, 0.900561192895236, 0.900561192895236),
        (0.3282828282828283, 0.907872879554077, 0.907872879554077),
        (0.33333333333333337, 0.9149414561143177, 0.9149414561143177),
        (0.3383838383838384, 0.921767217219427, 0.921767217219427),
        (0.3434343434343435, 0.9283504248525148, 0.9283504248525148),
        (0.3484848484848485, 0.9346913172243536, 0.9346913172243536),
        (0.3535353535353536, 0.9407901168700907, 0.9407901168700907),
        (0.3585858585858586, 0.9466470380292445, 0.9466470380292445),
        (0.36363636363636365, 0.9522622933745201, 0.9522622933745201),
        (0.36868686868686873, 0.9576361001471679, 0.9576361001471679),
        (0.37373737373737376, 0.9627686857498413, 0.9627686857498413),
        (0.37878787878787884, 0.9676602928420285, 0.9676602928420285),
        (0.38383838383838387, 0.9723111839780386, 0.9723111839780386),
        (0.3888888888888889, 0.9767216458230567, 0.9767216458230567),
        (0.393939393939394, 0.980891992978897, 0.980891992978897),
        (0.398989898989899, 0.9848225714476818, 0.9848225714476818),
        (0.4040404040404041, 0.9885137617586822, 0.9885137617586822),
        (0.4090909090909091, 0.9919659817809275, 0.9919659817809275),
        (0.4141414141414142, 0.995179689241899, 0.995179689241899),
        (0.4191919191919192, 0.9981553839705591, 0.9981553839705591), (0.42424242424242425, 1.0, 1.0),
        (0.42929292929292934, 1.0, 1.0), (0.43434343434343436, 1.0, 1.0), (0.43939393939393945, 1.0, 1.0),
        (0.4444444444444445, 1.0, 1.0), (0.44949494949494956, 1.0, 1.0), (0.4545454545454546, 1.0, 1.0),
        (0.4595959595959596, 1.0, 1.0), (0.4646464646464647, 1.0, 1.0), (0.4696969696969697, 1.0, 1.0),
        (0.4747474747474748, 1.0, 1.0), (0.47979797979797983, 1.0, 1.0), (0.48484848484848486, 1.0, 1.0),
        (0.48989898989898994, 1.0, 1.0), (0.494949494949495, 1.0, 1.0), (0.5, 1.0, 1.0), (0.5, 1.0, 1.0),
        (0.5050505050505051, 1.0, 1.0), (0.51010101010101, 1.0, 1.0),
        (0.5151515151515151, 0.995320936656816, 0.995320936656816),
        (0.5202020202020202, 0.9873354008158831, 0.9873354008158831),
        (0.5252525252525253, 0.9785229482889878, 0.9785229482889878),
        (0.5303030303030303, 0.9689158701375621, 0.9689158701375621),
        (0.5353535353535354, 0.9585461628830726, 0.9585461628830726),
        (0.5404040404040404, 0.947445461297331, 0.947445461297331),
        (0.5454545454545454, 0.9356449679200771, 0.9356449679200771),
        (0.5505050505050505, 0.9231753797779157, 0.9231753797779157),
        (0.5555555555555556, 0.9100668125676975, 0.9100668125676975),
        (0.5606060606060606, 0.8963487223463541, 0.8963487223463541),
        (0.5656565656565656, 0.8820498245313699, 0.8820498245313699),
        (0.5707070707070707, 0.867198009754314, 0.867198009754314),
        (0.5757575757575758, 0.8518202558158069, 0.8518202558158069),
        (0.5808080808080808, 0.8359425346539721, 0.8359425346539721),
        (0.5858585858585859, 0.8195897128471669, 0.8195897128471669),
        (0.5909090909090909, 0.8027854437095175, 0.8027854437095175),
        (0.595959595959596, 0.7855527661785828, 0.7855527661785828),
        (0.601010101010101, 0.7679226217650095, 0.7679226217650095),
        (0.6060606060606061, 0.7499137999772727, 0.7499137999772727),
        (0.6111111111111112, 0.7315394050642761, 0.7315394050642761),
        (0.6161616161616161, 0.7128109976668225, 0.7128109976668225),
        (0.6212121212121212, 0.6937383548906602, 0.6937383548906602),
        (0.6262626262626263, 0.6743291965192579, 0.6743291965192579),
        (0.6313131313131313, 0.6545888680016425, 0.6545888680016425),
        (0.6363636363636364, 0.634519967706374, 0.634519967706374),
        (0.6414141414141414, 0.6141219015623992, 0.6141219015623992),
        (0.6464646464646464, 0.5933903420427542, 0.5933903420427542),
        (0.6515151515151515, 0.5723165596085961, 0.5723165596085961),
        (0.6565656565656566, 0.5508865818300855, 0.5508865818300855),
        (0.6616161616161617, 0.5290801161920923, 0.5290801161920923),
        (0.6666666666666667, 0.5068691433527037, 0.5068691433527037),
        (0.6717171717171717, 0.48421604199456364, 0.48421604199456364),
        (0.6767676767676768, 0.46107056163453947, 0.46107056163453947),
        (0.6818181818181819, 0.43734173860039055, 0.43734173860039055),
        (0.6868686868686869, 0.4129115201433493, 0.4129115201433493),
        (0.6919191919191919, 0.38763291154785373, 0.38763291154785373),
        (0.696969696969697, 0.3613045391768489, 0.3613045391768489),
        (0.702020202020202, 0.33364373004092746, 0.33364373004092746),
        (0.7070707070707071, 0.30423940686307266, 0.30423940686307266),
        (0.7121212121212122, 0.27246259986295945, 0.27246259986295945),
        (0.7171717171717171, 0.2372763252234666, 0.2372763252234666),
        (0.7222222222222222, 0.19676008737891804, 0.19676008737891804),
        (0.7272727272727273, 0.14655416773492366, 0.14655416773492366),
        (0.7323232323232324, 0.07065761630768155, 0.07065761630768155), (0.7373737373737375, 0.0, 0.0),
        (0.7424242424242424, 0.0, 0.0), (0.7474747474747475, 0.0, 0.0), (0.7525252525252526, 0.0, 0.0),
        (0.7575757575757576, 0.0, 0.0), (0.7626262626262627, 0.0, 0.0), (0.7676767676767677, 0.0, 0.0),
        (0.7727272727272727, 0.0, 0.0), (0.7777777777777778, 0.0, 0.0), (0.7828282828282829, 0.0, 0.0),
        (0.7878787878787878, 0.0, 0.0), (0.7929292929292929, 0.0, 0.0), (0.797979797979798, 0.0, 0.0),
        (0.803030303030303, 0.0, 0.0), (0.8080808080808082, 0.0, 0.0), (0.8131313131313131, 0.0, 0.0),
        (0.8181818181818182, 0.0, 0.0), (0.8232323232323233, 0.0, 0.0), (0.8282828282828283, 0.0, 0.0),
        (0.8333333333333334, 0.0, 0.0), (0.8383838383838385, 0.0, 0.0), (0.8434343434343434, 0.0, 0.0),
        (0.8484848484848485, 0.0, 0.0), (0.8535353535353536, 0.0, 0.0), (0.8585858585858586, 0.0, 0.0),
        (0.8636363636363636, 0.0, 0.0), (0.8686868686868687, 0.0, 0.0), (0.8737373737373737, 0.0, 0.0),
        (0.8787878787878789, 0.0, 0.0), (0.8838383838383839, 0.0, 0.0), (0.8888888888888888, 0.0, 0.0),
        (0.893939393939394, 0.0, 0.0), (0.898989898989899, 0.0, 0.0), (0.9040404040404041, 0.0, 0.0),
        (0.9090909090909092, 0.0, 0.0), (0.9141414141414141, 0.0, 0.0), (0.9191919191919192, 0.0, 0.0),
        (0.9242424242424243, 0.0, 0.0), (0.9292929292929293, 0.0, 0.0), (0.9343434343434344, 0.0, 0.0),
        (0.9393939393939394, 0.0, 0.0), (0.9444444444444444, 0.0, 0.0), (0.9494949494949496, 0.0, 0.0),
        (0.9545454545454546, 0.0, 0.0), (0.9595959595959596, 0.0, 0.0), (0.9646464646464648, 0.0, 0.0),
        (0.9696969696969697, 0.0, 0.0), (0.9747474747474748, 0.0, 0.0), (0.9797979797979799, 0.0, 0.0),
        (0.9848484848484849, 0.0, 0.0), (0.98989898989899, 0.0, 0.0), (0.994949494949495, 0.0, 0.0), (1.0, 0.0, 0.0)]
greens = [(0.0, 0.5433775692459109, 0.5433775692459109), (0.005050505050505051, 0.5408598575520787, 0.5408598575520787),
          (0.010101010101010102, 0.5382677185510467, 0.5382677185510467),
          (0.015151515151515152, 0.5356000155032058, 0.5356000155032058),
          (0.020202020202020204, 0.532855615233107, 0.532855615233107),
          (0.025252525252525256, 0.5300333886128553, 0.5300333886128553),
          (0.030303030303030304, 0.5271322110028148, 0.5271322110028148),
          (0.03535353535353536, 0.5241509626454972, 0.5241509626454972),
          (0.04040404040404041, 0.5210885290082191, 0.5210885290082191),
          (0.045454545454545456, 0.517943801069804, 0.517943801069804),
          (0.05050505050505051, 0.5147156755462422, 0.5147156755462422),
          (0.05555555555555556, 0.5114030550498307, 0.5114030550498307),
          (0.06060606060606061, 0.5080048481758537, 0.5080048481758537),
          (0.06565656565656566, 0.5045199695103582, 0.5045199695103582),
          (0.07070707070707072, 0.5009473395519999, 0.5009473395519999),
          (0.07575757575757576, 0.49728588454027517, 0.49728588454027517),
          (0.08080808080808081, 0.4935345361817068, 0.4935345361817068),
          (0.08585858585858587, 0.4896922312647069, 0.4896922312647069),
          (0.09090909090909091, 0.4857579111528652, 0.4857579111528652),
          (0.09595959595959597, 0.4817305211453072, 0.4817305211453072),
          (0.10101010101010102, 0.47760900969150183, 0.47760900969150183),
          (0.10606060606060606, 0.4733923274464433, 0.4733923274464433),
          (0.11111111111111112, 0.46907942615046877, 0.46907942615046877),
          (0.11616161616161617, 0.4646692573160564, 0.4646692573160564),
          (0.12121212121212122, 0.46016077070172673, 0.46016077070172673),
          (0.12626262626262627, 0.4555529125506274, 0.4555529125506274),
          (0.13131313131313133, 0.45084462356840355, 0.45084462356840355),
          (0.13636363636363638, 0.44603483661151916, 0.44603483661151916),
          (0.14141414141414144, 0.44112247405318306, 0.44112247405318306),
          (0.14646464646464646, 0.43610644478934557, 0.43610644478934557),
          (0.15151515151515152, 0.4309856408417409, 0.4309856408417409),
          (0.15656565656565657, 0.42575893350851013, 0.42575893350851013),
          (0.16161616161616163, 0.42042516900531823, 0.42042516900531823),
          (0.16666666666666669, 0.4149831635309077, 0.4149831635309077),
          (0.17171717171717174, 0.40943169768033866, 0.40943169768033866),
          (0.1767676767676768, 0.4037695101164641, 0.4037695101164641),
          (0.18181818181818182, 0.3979952903949786, 0.3979952903949786),
          (0.18686868686868688, 0.3921076708201231, 0.3921076708201231),
          (0.19191919191919193, 0.3861052171861238, 0.3861052171861238),
          (0.196969696969697, 0.37998641823277113, 0.37998641823277113),
          (0.20202020202020204, 0.37374967361111716, 0.37374967361111716),
          (0.2070707070707071, 0.3673932801155885, 0.3673932801155885),
          (0.21212121212121213, 0.36091541589004633, 0.36091541589004633),
          (0.21717171717171718, 0.35431412225504955, 0.35431412225504955),
          (0.22222222222222224, 0.3475872827286324, 0.3475872827286324),
          (0.2272727272727273, 0.34073259871915673, 0.34073259871915673),
          (0.23232323232323235, 0.3337475612507601, 0.3337475612507601),
          (0.2373737373737374, 0.3266294179322609, 0.3266294179322609),
          (0.24242424242424243, 0.31937513418921293, 0.31937513418921293),
          (0.2474747474747475, 0.3119813475327165, 0.3119813475327165),
          (0.25252525252525254, 0.30444431331909744, 0.30444431331909744),
          (0.2575757575757576, 0.29675984003605543, 0.29675984003605543),
          (0.26262626262626265, 0.28892321159730766, 0.28892321159730766),
          (0.2676767676767677, 0.28092909338788613, 0.28092909338788613),
          (0.27272727272727276, 0.2727714178022179, 0.2727714178022179),
          (0.2777777777777778, 0.2644432436488971, 0.2644432436488971),
          (0.2828282828282829, 0.25593658189914503, 0.25593658189914503),
          (0.2878787878787879, 0.24724217758783923, 0.24724217758783923),
          (0.29292929292929293, 0.23834923386335483, 0.23834923386335483),
          (0.297979797979798, 0.22924505863872235, 0.22924505863872235),
          (0.30303030303030304, 0.2199146060792127, 0.2199146060792127),
          (0.3080808080808081, 0.21033987271750176, 0.21033987271750176),
          (0.31313131313131315, 0.20049908868661953, 0.20049908868661953),
          (0.31818181818181823, 0.19036561380555156, 0.19036561380555156),
          (0.32323232323232326, 0.1799063977192015, 0.1799063977192015),
          (0.3282828282828283, 0.1690797772935881, 0.1690797772935881),
          (0.33333333333333337, 0.15783223201526475, 0.15783223201526475),
          (0.3383838383838384, 0.14609343464317473, 0.14609343464317473),
          (0.3434343434343435, 0.1337683761763593, 0.1337683761763593),
          (0.3484848484848485, 0.12072416614471257, 0.12072416614471257),
          (0.3535353535353536, 0.10676639805726051, 0.10676639805726051),
          (0.3585858585858586, 0.09159299404615498, 0.09159299404615498),
          (0.36363636363636365, 0.07469257757881825, 0.07469257757881825),
          (0.36868686868686873, 0.05507677159249073, 0.05507677159249073),
          (0.37373737373737376, 0.030901930068996147, 0.030901930068996147),
          (0.37878787878787884, 0.006293202677687871, 0.006293202677687871), (0.38383838383838387, 0.0, 0.0),
          (0.3888888888888889, 0.0, 0.0), (0.393939393939394, 0.0, 0.0), (0.398989898989899, 0.0, 0.0),
          (0.4040404040404041, 0.0, 0.0), (0.4090909090909091, 0.0, 0.0), (0.4141414141414142, 0.0, 0.0),
          (0.4191919191919192, 0.0, 0.0), (0.42424242424242425, 0.0, 0.0), (0.42929292929292934, 0.0, 0.0),
          (0.43434343434343436, 0.0, 0.0), (0.43939393939393945, 0.0, 0.0), (0.4444444444444445, 0.0, 0.0),
          (0.44949494949494956, 0.0, 0.0), (0.4545454545454546, 0.0, 0.0), (0.4595959595959596, 0.0, 0.0),
          (0.4646464646464647, 0.0, 0.0), (0.4696969696969697, 0.0, 0.0), (0.4747474747474748, 0.0, 0.0),
          (0.47979797979797983, 0.0, 0.0), (0.48484848484848486, 0.0, 0.0), (0.48989898989898994, 0.0, 0.0),
          (0.494949494949495, 0.0, 0.0), (0.5, 0.0, 0.0), (0.5, 0.0, 0.0), (0.5050505050505051, 0.0, 0.0),
          (0.51010101010101, 0.02897534843634349, 0.02897534843634349),
          (0.5151515151515151, 0.08650052847740516, 0.08650052847740516),
          (0.5202020202020202, 0.12469446224331754, 0.12469446224331754),
          (0.5252525252525253, 0.15562751218861065, 0.15562751218861065),
          (0.5303030303030303, 0.1825186295271315, 0.1825186295271315),
          (0.5353535353535354, 0.20672659880813038, 0.20672659880813038),
          (0.5404040404040404, 0.22896348283942553, 0.22896348283942553),
          (0.5454545454545454, 0.24965177047440723, 0.24965177047440723),
          (0.5505050505050505, 0.2690636274465379, 0.2690636274465379),
          (0.5555555555555556, 0.2873851181205245, 0.2873851181205245),
          (0.5606060606060606, 0.3047493957306648, 0.3047493957306648),
          (0.5656565656565656, 0.32125533856919825, 0.32125533856919825),
          (0.5707070707070707, 0.33697869822637844, 0.33697869822637844),
          (0.5757575757575758, 0.35197911028856005, 0.35197911028856005),
          (0.5808080808080808, 0.3663046848722951, 0.3663046848722951),
          (0.5858585858585859, 0.3799951140493114, 0.3799951140493114),
          (0.5909090909090909, 0.3930838343731667, 0.3930838343731667),
          (0.595959595959596, 0.4055994283458281, 0.4055994283458281),
          (0.601010101010101, 0.4175652199119891, 0.4175652199119891),
          (0.6060606060606061, 0.4290040053088904, 0.4290040053088904),
          (0.6111111111111112, 0.4399369770950754, 0.4399369770950754),
          (0.6161616161616161, 0.45038336711263377, 0.45038336711263377),
          (0.6212121212121212, 0.4603608611820112, 0.4603608611820112),
          (0.6262626262626263, 0.4698859173107102, 0.4698859173107102),
          (0.6313131313131313, 0.4789740108641239, 0.4789740108641239),
          (0.6363636363636364, 0.4876398237469793, 0.4876398237469793),
          (0.6414141414141414, 0.49589739018537676, 0.49589739018537676),
          (0.6464646464646464, 0.5037602085430132, 0.5037602085430132),
          (0.6515151515151515, 0.5112413263374619, 0.5112413263374619),
          (0.6565656565656566, 0.5183534039706995, 0.5183534039706995),
          (0.6616161616161617, 0.5251087614696124, 0.5251087614696124),
          (0.6666666666666667, 0.5315194116223491, 0.5315194116223491),
          (0.6717171717171717, 0.5375970822090004, 0.5375970822090004),
          (0.6767676767676768, 0.5433532614532962, 0.5433532614532962),
          (0.6818181818181819, 0.5488007281602242, 0.5488007281602242),
          (0.6868686868686869, 0.5539518489582824, 0.5539518489582824),
          (0.6919191919191919, 0.5588181452358113, 0.5588181452358113),
          (0.696969696969697, 0.5634109488750015, 0.5634109488750015),
          (0.702020202020202, 0.5677413942273848, 0.5677413942273848),
          (0.7070707070707071, 0.5718204074394913, 0.5718204074394913),
          (0.7121212121212122, 0.5756586935060458, 0.5756586935060458),
          (0.7171717171717171, 0.57926672136155, 0.57926672136155),
          (0.7222222222222222, 0.5826547072704227, 0.5826547072704227),
          (0.7272727272727273, 0.5858325967385001, 0.5858325967385001),
          (0.7323232323232324, 0.5888100451426221, 0.5888100451426221),
          (0.7373737373737375, 0.5915963972585669, 0.5915963972585669),
          (0.7424242424242424, 0.5942006658593342, 0.5942006658593342),
          (0.7474747474747475, 0.5966315095544463, 0.5966315095544463),
          (0.7525252525252526, 0.5988972100453732, 0.5988972100453732),
          (0.7575757575757576, 0.6010056489812892, 0.6010056489812892),
          (0.7626262626262627, 0.602964284612052, 0.602964284612052),
          (0.7676767676767677, 0.6047801284504852, 0.6047801284504852),
          (0.7727272727272727, 0.6064597221726898, 0.6064597221726898),
          (0.7777777777777778, 0.6080091150021449, 0.6080091150021449),
          (0.7828282828282829, 0.609433841839738, 0.609433841839738),
          (0.7878787878787878, 0.610738902416611, 0.610738902416611),
          (0.7929292929292929, 0.6119287417588389, 0.6119287417588389),
          (0.797979797979798, 0.6130072322616364, 0.6130072322616364),
          (0.803030303030303, 0.6139776576752337, 0.6139776576752337),
          (0.8080808080808082, 0.6148426993041448, 0.6148426993041448),
          (0.8131313131313131, 0.6156044247158068, 0.6156044247158068),
          (0.8181818181818182, 0.6162642792431643, 0.6162642792431643),
          (0.8232323232323233, 0.6168230805486297, 0.6168230805486297),
          (0.8282828282828283, 0.6172810164940062, 0.6172810164940062),
          (0.8333333333333334, 0.617637646532724, 0.617637646532724),
          (0.8383838383838385, 0.6178919068075603, 0.6178919068075603),
          (0.8434343434343434, 0.6180421190995363, 0.6180421190995363),
          (0.8484848484848485, 0.6180860037326971, 0.6180860037326971),
          (0.8535353535353536, 0.618020696495915, 0.618020696495915),
          (0.8585858585858586, 0.6178427695977039, 0.6178427695977039),
          (0.8636363636363636, 0.6175482566243666, 0.6175482566243666),
          (0.8686868686868687, 0.6171326814267064, 0.6171326814267064),
          (0.8737373737373737, 0.6165910908170397, 0.6165910908170397),
          (0.8787878787878789, 0.6159180909174014, 0.6159180909174014),
          (0.8838383838383839, 0.6151078869624843, 0.6151078869624843),
          (0.8888888888888888, 0.6141543263278548, 0.6141543263278548),
          (0.893939393939394, 0.6130509445259363, 0.6130509445259363),
          (0.898989898989899, 0.6117910138897139, 0.6117910138897139),
          (0.9040404040404041, 0.6103675946473974, 0.6103675946473974),
          (0.9090909090909092, 0.6087735880806294, 0.6087735880806294),
          (0.9141414141414141, 0.607001791454269, 0.607001791454269),
          (0.9191919191919192, 0.6050449544072874, 0.6050449544072874),
          (0.9242424242424243, 0.6028958365016645, 0.6028958365016645),
          (0.9292929292929293, 0.6005472656391454, 0.6005472656391454),
          (0.9343434343434344, 0.5979921970739374, 0.5979921970739374),
          (0.9393939393939394, 0.5952237727725495, 0.5952237727725495),
          (0.9444444444444444, 0.5922353808995884, 0.5922353808995884),
          (0.9494949494949496, 0.58902071524004, 0.58902071524004),
          (0.9545454545454546, 0.5855738344040183, 0.5855738344040183),
          (0.9595959595959596, 0.5818892206988044, 0.5818892206988044),
          (0.9646464646464648, 0.5779618385949655, 0.5779618385949655),
          (0.9696969696969697, 0.5737871927582024, 0.5737871927582024),
          (0.9747474747474748, 0.5693613856661449, 0.5693613856661449),
          (0.9797979797979799, 0.5646811748795344, 0.5646811748795344),
          (0.9848484848484849, 0.5597440300900007, 0.5597440300900007),
          (0.98989898989899, 0.5545481901219638, 0.5545481901219638),
          (0.994949494949495, 0.5490927201240678, 0.5490927201240678), (1.0, 0.5433775692459109, 0.5433775692459109)]
blues = [(0.0, 0.983379062301401, 0.983379062301401), (0.005050505050505051, 0.9853028591449756, 0.9853028591449756),
         (0.010101010101010102, 0.9870321281499984, 0.9870321281499984),
         (0.015151515151515152, 0.9885649694570334, 0.9885649694570334),
         (0.020202020202020204, 0.9898995773256202, 0.9898995773256202),
         (0.025252525252525256, 0.9910342418799568, 0.9910342418799568),
         (0.030303030303030304, 0.9919673507929182, 0.9919673507929182),
         (0.03535353535353536, 0.9926973909066342, 0.9926973909066342),
         (0.04040404040404041, 0.9932229497878754, 0.9932229497878754),
         (0.045454545454545456, 0.9935427172165375, 0.9935427172165375),
         (0.05050505050505051, 0.993655486605535, 0.993655486605535),
         (0.05555555555555556, 0.9935601563504503, 0.9935601563504503),
         (0.06060606060606061, 0.9932557311073132, 0.9932557311073132),
         (0.06565656565656566, 0.9927413229969199, 0.9927413229969199),
         (0.07070707070707072, 0.9920161527341195, 0.9920161527341195),
         (0.07575757575757576, 0.9910795506805467, 0.9910795506805467),
         (0.08080808080808081, 0.9899309578192822, 0.9899309578192822),
         (0.08585858585858587, 0.9885699266499769, 0.9885699266499769),
         (0.09090909090909091, 0.9869961220029849, 0.9869961220029849),
         (0.09595959595959597, 0.9852093217710886, 0.9852093217710886),
         (0.10101010101010102, 0.9832094175574232, 0.9832094175574232),
         (0.10606060606060606, 0.9809964152382297, 0.9809964152382297),
         (0.11111111111111112, 0.9785704354390944, 0.9785704354390944),
         (0.11616161616161617, 0.9759317139233538, 0.9759317139233538),
         (0.12121212121212122, 0.9730806018913604, 0.9730806018913604),
         (0.12626262626262627, 0.9700175661893319, 0.9700175661893319),
         (0.13131313131313133, 0.9667431894265134, 0.9667431894265134),
         (0.13636363636363638, 0.9632581699994044, 0.9632581699994044),
         (0.14141414141414144, 0.9595633220218055, 0.9595633220218055),
         (0.14646464646464646, 0.9556595751594553, 0.9556595751594553),
         (0.15151515151515152, 0.951547974368025, 0.951547974368025),
         (0.15656565656565657, 0.9472296795332423, 0.9472296795332423),
         (0.16161616161616163, 0.9427059650119138, 0.9427059650119138),
         (0.16666666666666669, 0.937978219072596, 0.937978219072596),
         (0.17171717171717174, 0.9330479432346659, 0.9330479432346659),
         (0.1767676767676768, 0.9279167515045029, 0.9279167515045029),
         (0.18181818181818182, 0.9225863695074843, 0.9225863695074843),
         (0.18686868686868688, 0.9170586335144413, 0.9170586335144413),
         (0.19191919191919193, 0.9113354893611979, 0.9113354893611979),
         (0.196969696969697, 0.9054189912597503, 0.9054189912597503),
         (0.20202020202020204, 0.8993113004995806, 0.8993113004995806),
         (0.2070707070707071, 0.893014684037531, 0.893014684037531),
         (0.21212121212121213, 0.8865315129745696, 0.8865315129745696),
         (0.21717171717171718, 0.8798642609176798, 0.8798642609176798),
         (0.22222222222222224, 0.8730155022249929, 0.8730155022249929),
         (0.2272727272727273, 0.8659879101321365, 0.8659879101321365),
         (0.23232323232323235, 0.8587842547576295, 0.8587842547576295),
         (0.2373737373737374, 0.8514074009849735, 0.8514074009849735),
         (0.24242424242424243, 0.8438603062188837, 0.8438603062188837),
         (0.2474747474747475, 0.8361460180128932, 0.8361460180128932),
         (0.25252525252525254, 0.8282676715652847, 0.8282676715652847),
         (0.2575757575757576, 0.8202284870800327, 0.8202284870800327),
         (0.26262626262626265, 0.8120317669890984, 0.8120317669890984),
         (0.2676767676767677, 0.803680893032057, 0.803680893032057),
         (0.27272727272727276, 0.7951793231886081, 0.7951793231886081),
         (0.2777777777777778, 0.7865305884590619, 0.7865305884590619),
         (0.2828282828282829, 0.7777382894873479, 0.7777382894873479),
         (0.2878787878787879, 0.7688060930204996, 0.7688060930204996),
         (0.29292929292929293, 0.759737728197884, 0.759737728197884),
         (0.297979797979798, 0.7505369826626828, 0.7505369826626828),
         (0.30303030303030304, 0.7412076984872626, 0.7412076984872626),
         (0.3080808080808081, 0.731753767903084, 0.731753767903084),
         (0.31313131313131315, 0.7221791288246954, 0.7221791288246954),
         (0.31818181818181823, 0.7124877601560896, 0.7124877601560896),
         (0.32323232323232326, 0.7026836768662664, 0.7026836768662664),
         (0.3282828282828283, 0.6927709248192078, 0.6927709248192078),
         (0.33333333333333337, 0.6827535753416213, 0.6827535753416213),
         (0.3383838383838384, 0.6726357195096687, 0.6726357195096687),
         (0.3434343434343435, 0.6624214621334632, 0.6624214621334632),
         (0.3484848484848485, 0.6521149154153341, 0.6521149154153341),
         (0.3535353535353536, 0.6417201922546328, 0.6417201922546328),
         (0.3585858585858586, 0.6312413991681648, 0.6312413991681648),
         (0.36363636363636365, 0.620682628791039, 0.620682628791039),
         (0.36868686868686873, 0.6100479519177788, 0.6100479519177788),
         (0.37373737373737376, 0.5993414090377637, 0.5993414090377637),
         (0.37878787878787884, 0.5885670013123551, 0.5885670013123551),
         (0.38383838383838387, 0.5777286809331919, 0.5777286809331919),
         (0.3888888888888889, 0.5668303407919124, 0.5668303407919124),
         (0.393939393939394, 0.5558758033806912, 0.5558758033806912),
         (0.398989898989899, 0.544868808830119, 0.544868808830119),
         (0.4040404040404041, 0.5338130019757024, 0.5338130019757024),
         (0.4090909090909091, 0.5227119183260712, 0.5227119183260712),
         (0.4141414141414142, 0.5115689687842223, 0.5115689687842223),
         (0.4191919191919192, 0.5003874229469498, 0.5003874229469498),
         (0.42424242424242425, 0.48917039077601693, 0.48917039077601693),
         (0.42929292929292934, 0.47792080239623086, 0.47792080239623086),
         (0.43434343434343436, 0.4666413857287683, 0.4666413857287683),
         (0.43939393939393945, 0.45533464161063847, 0.45533464161063847),
         (0.4444444444444445, 0.44400281598027025, 0.44400281598027025),
         (0.44949494949494956, 0.4326478686212007, 0.4326478686212007),
         (0.4545454545454546, 0.4212714378458623, 0.4212714378458623),
         (0.4595959595959596, 0.4098748003631531, 0.4098748003631531),
         (0.4646464646464647, 0.3984588253982261, 0.3984588253982261),
         (0.4696969696969697, 0.3870239219092383, 0.3870239219092383),
         (0.4747474747474748, 0.3755699774579377, 0.3755699774579377),
         (0.47979797979797983, 0.36409628691729423, 0.36409628691729423),
         (0.48484848484848486, 0.3526014687098822, 0.3526014687098822),
         (0.48989898989898994, 0.3410833656230604, 0.3410833656230604),
         (0.494949494949495, 0.32953892638094323, 0.32953892638094323), (0.5, 0.31796406298163893, 0.31796406298163893),
         (0.5, 0.31796406298163876, 0.31796406298163876), (0.5050505050505051, 0.2940652591514529, 0.2940652591514529),
         (0.51010101010101, 0.2702735399731411, 0.2702735399731411),
         (0.5151515151515151, 0.24650023246188468, 0.24650023246188468),
         (0.5202020202020202, 0.22261629129021188, 0.22261629129021188),
         (0.5252525252525253, 0.19843196120865558, 0.19843196120865558),
         (0.5303030303030303, 0.1736595786363784, 0.1736595786363784),
         (0.5353535353535354, 0.14783867190313987, 0.14783867190313987),
         (0.5404040404040404, 0.1201635278447434, 0.1201635278447434),
         (0.5454545454545454, 0.08899574761407139, 0.08899574761407139),
         (0.5505050505050505, 0.04985812665194426, 0.04985812665194426), (0.5555555555555556, 0.0, 0.0),
         (0.5606060606060606, 0.0, 0.0), (0.5656565656565656, 0.0, 0.0), (0.5707070707070707, 0.0, 0.0),
         (0.5757575757575758, 0.0, 0.0), (0.5808080808080808, 0.0, 0.0), (0.5858585858585859, 0.0, 0.0),
         (0.5909090909090909, 0.0, 0.0), (0.595959595959596, 0.0, 0.0), (0.601010101010101, 0.0, 0.0),
         (0.6060606060606061, 0.0, 0.0), (0.6111111111111112, 0.0, 0.0), (0.6161616161616161, 0.0, 0.0),
         (0.6212121212121212, 0.0, 0.0), (0.6262626262626263, 0.0, 0.0), (0.6313131313131313, 0.0, 0.0),
         (0.6363636363636364, 0.0, 0.0), (0.6414141414141414, 0.0, 0.0), (0.6464646464646464, 0.0, 0.0),
         (0.6515151515151515, 0.0, 0.0), (0.6565656565656566, 0.0, 0.0), (0.6616161616161617, 0.0, 0.0),
         (0.6666666666666667, 0.0, 0.0), (0.6717171717171717, 0.0, 0.0), (0.6767676767676768, 0.0, 0.0),
         (0.6818181818181819, 0.0, 0.0), (0.6868686868686869, 0.0, 0.0), (0.6919191919191919, 0.0, 0.0),
         (0.696969696969697, 0.0, 0.0), (0.702020202020202, 0.0, 0.0), (0.7070707070707071, 0.0, 0.0),
         (0.7121212121212122, 0.0, 0.0), (0.7171717171717171, 0.0, 0.0), (0.7222222222222222, 0.0, 0.0),
         (0.7272727272727273, 0.0, 0.0), (0.7323232323232324, 0.0, 0.0),
         (0.7373737373737375, 0.03794430983620626, 0.03794430983620626),
         (0.7424242424242424, 0.08766019618717635, 0.08766019618717635),
         (0.7474747474747475, 0.12390848349505013, 0.12390848349505013),
         (0.7525252525252526, 0.15499027603564366, 0.15499027603564366),
         (0.7575757575757576, 0.18334937754199068, 0.18334937754199068),
         (0.7626262626262627, 0.21007495587189834, 0.21007495587189834),
         (0.7676767676767677, 0.23575036846518044, 0.23575036846518044),
         (0.7727272727272727, 0.26072191788547217, 0.26072191788547217),
         (0.7777777777777778, 0.2852081418804007, 0.2852081418804007),
         (0.7828282828282829, 0.30935172131608574, 0.30935172131608574),
         (0.7878787878787878, 0.3332469456417674, 0.3332469456417674),
         (0.7929292929292929, 0.35695546545335954, 0.35695546545335954),
         (0.797979797979798, 0.3805159179050007, 0.3805159179050007),
         (0.803030303030303, 0.4039501208712851, 0.4039501208712851),
         (0.8080808080808082, 0.4272672375111961, 0.4272672375111961),
         (0.8131313131313131, 0.4504666849702366, 0.4504666849702366),
         (0.8181818181818182, 0.47354023594469136, 0.47354023594469136),
         (0.8232323232323233, 0.4964735843414371, 0.4964735843414371),
         (0.8282828282828283, 0.5192475448609376, 0.5192475448609376),
         (0.8333333333333334, 0.5418389961140988, 0.5418389961140988),
         (0.8383838383838385, 0.5642216399103669, 0.5642216399103669),
         (0.8434343434343434, 0.5863666259794027, 0.5863666259794027),
         (0.8484848484848485, 0.6082430762243084, 0.6082430762243084),
         (0.8535353535353536, 0.6298185325381159, 0.6298185325381159),
         (0.8585858585858586, 0.651059345394186, 0.651059345394186),
         (0.8636363636363636, 0.6719310157125757, 0.6719310157125757),
         (0.8686868686868687, 0.6923984991990069, 0.6923984991990069),
         (0.8737373737373737, 0.712426479997001, 0.712426479997001),
         (0.8787878787878789, 0.7319796187909198, 0.7319796187909198),
         (0.8838383838383839, 0.7510227792513378, 0.7510227792513378),
         (0.8888888888888888, 0.7695212357915846, 0.7695212357915846),
         (0.893939393939394, 0.7874408649143195, 0.7874408649143195),
         (0.898989898989899, 0.8047483219063316, 0.8047483219063316),
         (0.9040404040404041, 0.821411204243808, 0.821411204243808),
         (0.9090909090909092, 0.8373982027672302, 0.8373982027672302),
         (0.9141414141414141, 0.8526792414519058, 0.8526792414519058),
         (0.9191919191919192, 0.8672256064201849, 0.8672256064201849),
         (0.9242424242424243, 0.881010064702258, 0.881010064702258),
         (0.9292929292929293, 0.8940069731449398, 0.8940069731449398),
         (0.9343434343434344, 0.9061923777850446, 0.9061923777850446),
         (0.9393939393939394, 0.9175441039406428, 0.9175441039406428),
         (0.9444444444444444, 0.9280418372255925, 0.9280418372255925),
         (0.9494949494949496, 0.9376671956571798, 0.9376671956571798),
         (0.9545454545454546, 0.9464037930010262, 0.9464037930010262),
         (0.9595959595959596, 0.9542372934797309, 0.9542372934797309),
         (0.9646464646464648, 0.9611554579604747, 0.9611554579604747),
         (0.9696969696969697, 0.9671481817308224, 0.9671481817308224),
         (0.9747474747474748, 0.9722075239701963, 0.9722075239701963),
         (0.9797979797979799, 0.9763277290262228, 0.9763277290262228),
         (0.9848484848484849, 0.9795052396096146, 0.9795052396096146),
         (0.98989898989899, 0.9817387020279934, 0.9817387020279934),
         (0.994949494949495, 0.9830289635875601, 0.9830289635875601), (1.0, 0.983379062301401, 0.983379062301401)]
alphas = [(0.0, 1.0, 1.0), (0.005050505050505051, 1.0, 1.0), (0.010101010101010102, 1.0, 1.0),
          (0.015151515151515152, 1.0, 1.0), (0.020202020202020204, 1.0, 1.0), (0.025252525252525256, 1.0, 1.0),
          (0.030303030303030304, 1.0, 1.0), (0.03535353535353536, 1.0, 1.0), (0.04040404040404041, 1.0, 1.0),
          (0.045454545454545456, 1.0, 1.0), (0.05050505050505051, 1.0, 1.0), (0.05555555555555556, 1.0, 1.0),
          (0.06060606060606061, 1.0, 1.0), (0.06565656565656566, 1.0, 1.0), (0.07070707070707072, 1.0, 1.0),
          (0.07575757575757576, 1.0, 1.0), (0.08080808080808081, 1.0, 1.0), (0.08585858585858587, 1.0, 1.0),
          (0.09090909090909091, 1.0, 1.0), (0.09595959595959597, 1.0, 1.0), (0.10101010101010102, 1.0, 1.0),
          (0.10606060606060606, 1.0, 1.0), (0.11111111111111112, 1.0, 1.0), (0.11616161616161617, 1.0, 1.0),
          (0.12121212121212122, 1.0, 1.0), (0.12626262626262627, 1.0, 1.0), (0.13131313131313133, 1.0, 1.0),
          (0.13636363636363638, 1.0, 1.0), (0.14141414141414144, 1.0, 1.0), (0.14646464646464646, 1.0, 1.0),
          (0.15151515151515152, 1.0, 1.0), (0.15656565656565657, 1.0, 1.0), (0.16161616161616163, 1.0, 1.0),
          (0.16666666666666669, 1.0, 1.0), (0.17171717171717174, 1.0, 1.0), (0.1767676767676768, 1.0, 1.0),
          (0.18181818181818182, 1.0, 1.0), (0.18686868686868688, 1.0, 1.0), (0.19191919191919193, 1.0, 1.0),
          (0.196969696969697, 1.0, 1.0), (0.20202020202020204, 1.0, 1.0), (0.2070707070707071, 1.0, 1.0),
          (0.21212121212121213, 1.0, 1.0), (0.21717171717171718, 1.0, 1.0), (0.22222222222222224, 1.0, 1.0),
          (0.2272727272727273, 1.0, 1.0), (0.23232323232323235, 1.0, 1.0), (0.2373737373737374, 1.0, 1.0),
          (0.24242424242424243, 1.0, 1.0), (0.2474747474747475, 1.0, 1.0), (0.25252525252525254, 1.0, 1.0),
          (0.2575757575757576, 1.0, 1.0), (0.26262626262626265, 1.0, 1.0), (0.2676767676767677, 1.0, 1.0),
          (0.27272727272727276, 1.0, 1.0), (0.2777777777777778, 1.0, 1.0), (0.2828282828282829, 1.0, 1.0),
          (0.2878787878787879, 1.0, 1.0), (0.29292929292929293, 1.0, 1.0), (0.297979797979798, 1.0, 1.0),
          (0.30303030303030304, 1.0, 1.0), (0.3080808080808081, 1.0, 1.0), (0.31313131313131315, 1.0, 1.0),
          (0.31818181818181823, 1.0, 1.0), (0.32323232323232326, 1.0, 1.0), (0.3282828282828283, 1.0, 1.0),
          (0.33333333333333337, 1.0, 1.0), (0.3383838383838384, 1.0, 1.0), (0.3434343434343435, 1.0, 1.0),
          (0.3484848484848485, 1.0, 1.0), (0.3535353535353536, 1.0, 1.0), (0.3585858585858586, 1.0, 1.0),
          (0.36363636363636365, 1.0, 1.0), (0.36868686868686873, 1.0, 1.0), (0.37373737373737376, 1.0, 1.0),
          (0.37878787878787884, 1.0, 1.0), (0.38383838383838387, 1.0, 1.0), (0.3888888888888889, 1.0, 1.0),
          (0.393939393939394, 1.0, 1.0), (0.398989898989899, 1.0, 1.0), (0.4040404040404041, 1.0, 1.0),
          (0.4090909090909091, 1.0, 1.0), (0.4141414141414142, 1.0, 1.0), (0.4191919191919192, 1.0, 1.0),
          (0.42424242424242425, 1.0, 1.0), (0.42929292929292934, 1.0, 1.0), (0.43434343434343436, 1.0, 1.0),
          (0.43939393939393945, 1.0, 1.0), (0.4444444444444445, 1.0, 1.0), (0.44949494949494956, 1.0, 1.0),
          (0.4545454545454546, 1.0, 1.0), (0.4595959595959596, 1.0, 1.0), (0.4646464646464647, 1.0, 1.0),
          (0.4696969696969697, 1.0, 1.0), (0.4747474747474748, 1.0, 1.0), (0.47979797979797983, 1.0, 1.0),
          (0.48484848484848486, 1.0, 1.0), (0.48989898989898994, 1.0, 1.0), (0.494949494949495, 1.0, 1.0),
          (0.5, 1.0, 1.0), (0.5, 1.0, 1.0), (0.5050505050505051, 1.0, 1.0), (0.51010101010101, 1.0, 1.0),
          (0.5151515151515151, 1.0, 1.0), (0.5202020202020202, 1.0, 1.0), (0.5252525252525253, 1.0, 1.0),
          (0.5303030303030303, 1.0, 1.0), (0.5353535353535354, 1.0, 1.0), (0.5404040404040404, 1.0, 1.0),
          (0.5454545454545454, 1.0, 1.0), (0.5505050505050505, 1.0, 1.0), (0.5555555555555556, 1.0, 1.0),
          (0.5606060606060606, 1.0, 1.0), (0.5656565656565656, 1.0, 1.0), (0.5707070707070707, 1.0, 1.0),
          (0.5757575757575758, 1.0, 1.0), (0.5808080808080808, 1.0, 1.0), (0.5858585858585859, 1.0, 1.0),
          (0.5909090909090909, 1.0, 1.0), (0.595959595959596, 1.0, 1.0), (0.601010101010101, 1.0, 1.0),
          (0.6060606060606061, 1.0, 1.0), (0.6111111111111112, 1.0, 1.0), (0.6161616161616161, 1.0, 1.0),
          (0.6212121212121212, 1.0, 1.0), (0.6262626262626263, 1.0, 1.0), (0.6313131313131313, 1.0, 1.0),
          (0.6363636363636364, 1.0, 1.0), (0.6414141414141414, 1.0, 1.0), (0.6464646464646464, 1.0, 1.0),
          (0.6515151515151515, 1.0, 1.0), (0.6565656565656566, 1.0, 1.0), (0.6616161616161617, 1.0, 1.0),
          (0.6666666666666667, 1.0, 1.0), (0.6717171717171717, 1.0, 1.0), (0.6767676767676768, 1.0, 1.0),
          (0.6818181818181819, 1.0, 1.0), (0.6868686868686869, 1.0, 1.0), (0.6919191919191919, 1.0, 1.0),
          (0.696969696969697, 1.0, 1.0), (0.702020202020202, 1.0, 1.0), (0.7070707070707071, 1.0, 1.0),
          (0.7121212121212122, 1.0, 1.0), (0.7171717171717171, 1.0, 1.0), (0.7222222222222222, 1.0, 1.0),
          (0.7272727272727273, 1.0, 1.0), (0.7323232323232324, 1.0, 1.0), (0.7373737373737375, 1.0, 1.0),
          (0.7424242424242424, 1.0, 1.0), (0.7474747474747475, 1.0, 1.0), (0.7525252525252526, 1.0, 1.0),
          (0.7575757575757576, 1.0, 1.0), (0.7626262626262627, 1.0, 1.0), (0.7676767676767677, 1.0, 1.0),
          (0.7727272727272727, 1.0, 1.0), (0.7777777777777778, 1.0, 1.0), (0.7828282828282829, 1.0, 1.0),
          (0.7878787878787878, 1.0, 1.0), (0.7929292929292929, 1.0, 1.0), (0.797979797979798, 1.0, 1.0),
          (0.803030303030303, 1.0, 1.0), (0.8080808080808082, 1.0, 1.0), (0.8131313131313131, 1.0, 1.0),
          (0.8181818181818182, 1.0, 1.0), (0.8232323232323233, 1.0, 1.0), (0.8282828282828283, 1.0, 1.0),
          (0.8333333333333334, 1.0, 1.0), (0.8383838383838385, 1.0, 1.0), (0.8434343434343434, 1.0, 1.0),
          (0.8484848484848485, 1.0, 1.0), (0.8535353535353536, 1.0, 1.0), (0.8585858585858586, 1.0, 1.0),
          (0.8636363636363636, 1.0, 1.0), (0.8686868686868687, 1.0, 1.0), (0.8737373737373737, 1.0, 1.0),
          (0.8787878787878789, 1.0, 1.0), (0.8838383838383839, 1.0, 1.0), (0.8888888888888888, 1.0, 1.0),
          (0.893939393939394, 1.0, 1.0), (0.898989898989899, 1.0, 1.0), (0.9040404040404041, 1.0, 1.0),
          (0.9090909090909092, 1.0, 1.0), (0.9141414141414141, 1.0, 1.0), (0.9191919191919192, 1.0, 1.0),
          (0.9242424242424243, 1.0, 1.0), (0.9292929292929293, 1.0, 1.0), (0.9343434343434344, 1.0, 1.0),
          (0.9393939393939394, 1.0, 1.0), (0.9444444444444444, 1.0, 1.0), (0.9494949494949496, 1.0, 1.0),
          (0.9545454545454546, 1.0, 1.0), (0.9595959595959596, 1.0, 1.0), (0.9646464646464648, 1.0, 1.0),
          (0.9696969696969697, 1.0, 1.0), (0.9747474747474748, 1.0, 1.0), (0.9797979797979799, 1.0, 1.0),
          (0.9848484848484849, 1.0, 1.0), (0.98989898989899, 1.0, 1.0), (0.994949494949495, 1.0, 1.0), (1.0, 1.0, 1.0)]

red_blue_circle = LinearSegmentedColormap('red_blue_circle', {
    "red": reds,
    "green": greens,
    "blue": blues,
    "alpha": alphas
})

colors = [(0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 1.0),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.98989898989899),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9797979797979798),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9696969696969697),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9595959595959596),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9494949494949495),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9393939393939394),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9292929292929293),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9191919191919192),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9090909090909091),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.898989898989899),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8888888888888888),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8787878787878788),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8686868686868687),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8585858585858586),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8484848484848485),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8383838383838383),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8282828282828283),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8181818181818181),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8080808080808081),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.797979797979798),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7878787878787878),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7777777777777778),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7676767676767676),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7575757575757576),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7474747474747474),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7373737373737373),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7272727272727273),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7171717171717171),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7070707070707071),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.696969696969697),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6868686868686869),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6767676767676767),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6666666666666666),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6565656565656566),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6464646464646464),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6363636363636364),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6262626262626263),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6161616161616161),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.606060606060606),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5959595959595959),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5858585858585859),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5757575757575757),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5656565656565656),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5555555555555556),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5454545454545454),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5353535353535352),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5252525252525252),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5151515151515151),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.505050505050505),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4949494949494949),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.48484848484848475),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4747474747474747),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.46464646464646464),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4545454545454545),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4444444444444444),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.43434343434343425),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4242424242424242),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.41414141414141414),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.404040404040404),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.3939393939393939),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.38383838383838376),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.3737373737373737),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.36363636363636354),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.3535353535353535),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.3434343434343434),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.33333333333333326),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.3232323232323232),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.31313131313131304),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.303030303030303),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.2929292929292928),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.28282828282828276),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.2727272727272727),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.26262626262626254),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.2525252525252525),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.24242424242424232),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.23232323232323226),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.2222222222222222),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.21212121212121204),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.202020202020202),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.19191919191919182),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.18181818181818177),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.1717171717171716),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.16161616161616155),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.1515151515151515),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.14141414141414133),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.13131313131313127),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.1212121212121211),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.11111111111111105),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.10101010101010088),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.09090909090909083),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.08080808080808077),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.07070707070707061),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.06060606060606055),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.050505050505050386),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.04040404040404033),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.030303030303030276),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.02020202020202011),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.010101010101010055),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.0),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.0),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.010101010101010102),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.020202020202020204),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.030303030303030304),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.04040404040404041),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.05050505050505051),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.06060606060606061),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.07070707070707072),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.08080808080808081),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.09090909090909091),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.10101010101010102),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.11111111111111112),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.12121212121212122),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.13131313131313133),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.14141414141414144),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.15151515151515152),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.16161616161616163),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.17171717171717174),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.18181818181818182),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.19191919191919193),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.20202020202020204),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.21212121212121213),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.22222222222222224),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.23232323232323235),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.24242424242424243),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.25252525252525254),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.26262626262626265),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.27272727272727276),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.2828282828282829),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.29292929292929293),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.30303030303030304),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.31313131313131315),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.32323232323232326),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.33333333333333337),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.3434343434343435),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.3535353535353536),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.36363636363636365),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.37373737373737376),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.38383838383838387),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.393939393939394),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4040404040404041),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4141414141414142),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.42424242424242425),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.43434343434343436),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4444444444444445),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4545454545454546),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4646464646464647),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4747474747474748),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.48484848484848486),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.494949494949495),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5050505050505051),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5151515151515152),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5252525252525253),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5353535353535354),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5454545454545455),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5555555555555556),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5656565656565657),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5757575757575758),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5858585858585859),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.595959595959596),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6060606060606061),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6161616161616162),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6262626262626263),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6363636363636365),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6464646464646465),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6565656565656566),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6666666666666667),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6767676767676768),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.686868686868687),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.696969696969697),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7070707070707072),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7171717171717172),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7272727272727273),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7373737373737375),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7474747474747475),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7575757575757577),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7676767676767677),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7777777777777778),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.787878787878788),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.797979797979798),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8080808080808082),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8181818181818182),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8282828282828284),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8383838383838385),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8484848484848485),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8585858585858587),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8686868686868687),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8787878787878789),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.888888888888889),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8989898989898991),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9090909090909092),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9191919191919192),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9292929292929294),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9393939393939394),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9494949494949496),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9595959595959597),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9696969696969697),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9797979797979799),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.98989898989899),
          (1.0, 0.050980392156862744, 0.3411764705882353, 1.0)]
red_transparent_blue = LinearSegmentedColormap.from_list("red_transparent_blue", colors)

colors = [(0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.0),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.010101010101010102),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.020202020202020204),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.030303030303030304),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.04040404040404041),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.05050505050505051),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.06060606060606061),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.07070707070707072),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.08080808080808081),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.09090909090909091),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.10101010101010102),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.11111111111111112),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.12121212121212122),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.13131313131313133),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.14141414141414144),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.15151515151515152),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.16161616161616163),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.17171717171717174),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.18181818181818182),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.19191919191919193),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.20202020202020204),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.21212121212121213),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.22222222222222224),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.23232323232323235),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.24242424242424243),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.25252525252525254),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.26262626262626265),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.27272727272727276),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.2828282828282829),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.29292929292929293),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.30303030303030304),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.31313131313131315),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.32323232323232326),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.33333333333333337),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.3434343434343435),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.3535353535353536),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.36363636363636365),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.37373737373737376),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.38383838383838387),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.393939393939394),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4040404040404041),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4141414141414142),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.42424242424242425),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.43434343434343436),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4444444444444445),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4545454545454546),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4646464646464647),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.4747474747474748),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.48484848484848486),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.494949494949495),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5050505050505051),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5151515151515152),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5252525252525253),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5353535353535354),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5454545454545455),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5555555555555556),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5656565656565657),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5757575757575758),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.5858585858585859),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.595959595959596),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6060606060606061),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6161616161616162),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6262626262626263),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6363636363636365),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6464646464646465),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6565656565656566),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6666666666666667),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.6767676767676768),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.686868686868687),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.696969696969697),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7070707070707072),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7171717171717172),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7272727272727273),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7373737373737375),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7474747474747475),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7575757575757577),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7676767676767677),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.7777777777777778),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.787878787878788),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.797979797979798),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8080808080808082),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8181818181818182),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8282828282828284),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8383838383838385),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8484848484848485),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8585858585858587),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8686868686868687),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8787878787878789),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.888888888888889),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.8989898989898991),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9090909090909092),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9191919191919192),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9292929292929294),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9393939393939394),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9494949494949496),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9595959595959597),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9696969696969697),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.9797979797979799),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 0.98989898989899),
          (0.11764705882352941, 0.5333333333333333, 0.8980392156862745, 1.0)]
transparent_blue = LinearSegmentedColormap.from_list("transparent_blue", colors)

colors = [(1.0, 0.050980392156862744, 0.3411764705882353, 0.0),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.010101010101010102),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.020202020202020204),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.030303030303030304),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.04040404040404041),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.05050505050505051),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.06060606060606061),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.07070707070707072),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.08080808080808081),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.09090909090909091),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.10101010101010102),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.11111111111111112),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.12121212121212122),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.13131313131313133),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.14141414141414144),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.15151515151515152),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.16161616161616163),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.17171717171717174),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.18181818181818182),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.19191919191919193),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.20202020202020204),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.21212121212121213),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.22222222222222224),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.23232323232323235),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.24242424242424243),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.25252525252525254),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.26262626262626265),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.27272727272727276),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.2828282828282829),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.29292929292929293),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.30303030303030304),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.31313131313131315),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.32323232323232326),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.33333333333333337),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.3434343434343435),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.3535353535353536),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.36363636363636365),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.37373737373737376),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.38383838383838387),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.393939393939394),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4040404040404041),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4141414141414142),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.42424242424242425),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.43434343434343436),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4444444444444445),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4545454545454546),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4646464646464647),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.4747474747474748),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.48484848484848486),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.494949494949495),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5050505050505051),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5151515151515152),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5252525252525253),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5353535353535354),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5454545454545455),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5555555555555556),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5656565656565657),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5757575757575758),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.5858585858585859),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.595959595959596),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6060606060606061),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6161616161616162),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6262626262626263),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6363636363636365),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6464646464646465),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6565656565656566),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6666666666666667),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.6767676767676768),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.686868686868687),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.696969696969697),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7070707070707072),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7171717171717172),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7272727272727273),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7373737373737375),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7474747474747475),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7575757575757577),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7676767676767677),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.7777777777777778),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.787878787878788),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.797979797979798),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8080808080808082),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8181818181818182),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8282828282828284),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8383838383838385),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8484848484848485),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8585858585858587),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8686868686868687),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8787878787878789),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.888888888888889),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.8989898989898991),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9090909090909092),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9191919191919192),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9292929292929294),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9393939393939394),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9494949494949496),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9595959595959597),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9696969696969697),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.9797979797979799),
          (1.0, 0.050980392156862744, 0.3411764705882353, 0.98989898989899),
          (1.0, 0.050980392156862744, 0.3411764705882353, 1.0)]
transparent_red = LinearSegmentedColormap.from_list("transparent_red", colors)


def build_frame_html(frame_id, frame_src, frame_height):
    frame_html = """
        <iframe
            id="{iframe_id}"
            width="{width}"
            height="{height}"
            srcdoc="{src}"
            style="border:0px solid #ccc"
            allowfullscreen="true"
            webkitallowfullscreen="true"
            mozallowfullscreen="true"
            oallowfullscreen="true"
            msallowfullscreen="true"
        >
        </iframe>
    """.format(
        iframe_id=frame_id,
        width='95%',
        height=frame_height,
        src=frame_src
    )

    return frame_html


class FeatureValueAndEffect(object):
    def __init__(self, feature_value_df, reason_code_df):
        self.feature_name_list = feature_value_df.columns
        self.feature_value_df = feature_value_df
        self.feature_value_pd_df = feature_value_df.collect()
        self.reason_code_df = reason_code_df
        self.reason_code_pd_df = reason_code_df.collect()

        def get_feature_effects_dict(self):
            feature_effects_dict = {}
            for feature_name in self.feature_name_list:
                feature_effects_dict[feature_name] = []
            reason_code_list = list(self.reason_code_pd_df[self.reason_code_df.columns[0]])
            for reason_code in reason_code_list:
                feature_effect_dict = {}
                for feature_name in self.feature_name_list:
                    feature_effect_dict[feature_name] = 'undefined'
                for reason_code_dict in json.loads(reason_code):
                    feature_effect_dict[reason_code_dict['attr']] = reason_code_dict['val']
                for feature_name in self.feature_name_list:
                    feature_effects_dict[feature_name].append(feature_effect_dict[feature_name])
            return feature_effects_dict

        def get_feature_values_dict(self):
            feature_values_dict = {}
            for feature_name in self.feature_name_list:
                feature_values_dict[feature_name] = list(self.feature_value_pd_df[feature_name])
            '''
            feature_value_dict_list = []
            for row_index in range(0, self.feature_value_pd_df.shape[0]):
                feature_value_dict_list.append(dict(self.feature_value_pd_df.loc[row_index]))
            '''
            return feature_values_dict

        self.feature_values_dict = get_feature_values_dict(self)
        self.feature_effects_dict = get_feature_effects_dict(self)


class ForcePlot(object):
    __TEMPLATE = TemplateUtil.get_template('shap_force_plot.html')

    def __init__(self, feature_value_df, reason_code_df, title='Force Plot'):
        self.feature_value_and_effect = FeatureValueAndEffect(feature_value_df, reason_code_df)
        self.force_plot_json = {
            'title': title,
            'featureNames': self.feature_value_and_effect.feature_name_list,
            'featureBaseEffect': 0.0,
            'featureValues': self.feature_value_and_effect.feature_values_dict,
            'featureEffects': self.feature_value_and_effect.feature_effects_dict
        }
        self.frame_id = '{}'.format(uuid.uuid4()).replace('-', '_').upper()
        self.html_str = ForcePlot.__TEMPLATE.render(frame_id=self.frame_id, force_plot_json=self.force_plot_json)
        self.frame_src_str = HTMLFrameUtils.build_frame_src(self.html_str)

    def generate_notebook_iframe(self):
        HTMLFrameUtils.display(build_frame_html(self.frame_id, self.frame_src_str, 800))

    def generate_html(self, filename: str):
        """
        Saves the force plot as a html file.

        Parameters
        ----------
        filename : str
            Html file name.
        """
        TemplateUtil.generate_html_file("{}_shapley_force_plot.html".format(filename), self.html_str)


class ShapleyExplainer(object):
    """
    SHAP (SHapley Additive exPlanations) is a game theoretic approach to explain the output of machine learning model.  \n
    It connects optimal credit allocation with local explanations using the classic Shapley values from game theory and their related extensions. \n
    To get an overview of which features are most important for a model we can plot the Shapley values of every feature for every sample. \n
    If the output table contains the reason code column, the output table can be parsed by this class in most cases, rather than only valid for the tree model.

    Parameters
    ----------
    reason_code_data : DataFrame
        The Dataframe containing only reason code values.

    feature_data : DataFrame
        The Dataframe containing only feature values.



    Examples
    --------

    In the following example, training data is called diabetes_train and test data is diabetes_test.

    First, we create an UnifiedClassification instance:

    >>> uc_hgbdt = UnifiedClassification('HybridGradientBoostingTree')

    Then, create a GridSearchCV instance:

    >>> gscv = GridSearchCV(estimator=uc_hgbdt,
                            param_grid={'learning_rate': [0.1, 0.4, 0.7, 1],
                                        'n_estimators': [4, 6, 8, 10],
                                        'split_threshold': [0.1, 0.4, 0.7, 1]},
                            train_control=dict(fold_num=5,
                                               resampling_method='cv',
                                               random_state=1,
                                               ref_metric=['auc']),
                            scoring='error_rate')

    Call the fit() function to train the model:

    >>> gscv.fit(data=diabetes_train, key= 'ID',
                 label='CLASS',
                 partition_method='stratified',
                 partition_random_state=1,
                 stratified_column='CLASS',
                 build_report=True)
    >>> features = diabetes_train.columns
    >>> features.remove('CLASS')
    >>> features.remove('ID')

    Use diabetes_test for prediction:

    >>> pred_res = gscv.predict(diabetes_test, key='ID', features=features)

    Create a ShapleyExplainer class and then invoke summary_plot() :

    >>> shapley_explainer = ShapleyExplainer(reason_code_data=pred_res.select('REASON_CODE'), feature_data=diabetes_test.select(features))
    >>> shapley_explainer.summary_plot()

    Output:

    .. image:: image/shap.png

    """

    def __init__(self, reason_code_data: dataframe.DataFrame, feature_data: dataframe.DataFrame, reason_code_column_name=None, **kwargs):
        if feature_data.empty():
            raise ValueError('The feature table is empty!')
        if reason_code_data.empty():
            raise ValueError('The reason code table is empty!')
        if feature_data.count() != reason_code_data.count():
            raise ValueError("The number of rows in reason code table and feature table is inconsistent!")
        kwargs_ = dict(kwargs)
        if 'key' in kwargs_.keys():
            feature_data = feature_data.deselect(kwargs_['key'])
        if 'label' in kwargs_.keys():
            feature_data = feature_data.deselect(kwargs_['label'])
        if  reason_code_column_name is None:
            reason_code_column_name = reason_code_data.columns[-1]
        feature_names = feature_data.columns

        self.__is_lstm_function = False
        attr_dict = {}
        shap_values = []
        if len(reason_code_data.columns) != 1:
            reason_code_data = reason_code_data.select(reason_code_column_name)
        self.reason_code_df = reason_code_data
        self.feature_value_df = feature_data
        reason_code = list(reason_code_data.collect()[reason_code_data.columns[0]])

        for item in json.loads(reason_code[0]):
            if item['attr'].find("T=") == 0:
                self.__is_lstm_function = True
                break

        if self.__is_lstm_function:
            temp_feature_names = []
            for i in range(0, len(feature_names)):
                temp_feature_names.append("T={}".format(str(i)))
            feature_names = temp_feature_names

        for reason_code_item in reason_code:
            for item in json.loads(reason_code_item):
                attr_name = item['attr']
                attr_value = item['val']
                attr_dict[attr_name] = attr_value
            shap_values_item = []
            for feature in feature_names:
                shap_values_item.append(attr_dict.get(feature, 0))
            shap_values.append(shap_values_item)

        self.__shap_values = np.array(shap_values)
        if isinstance(self.__shap_values, list) or len(self.__shap_values.shape) == 1:
            raise TypeError("This parameter 'shap_values' is a vector, not a matrix.")

        self.__features = feature_data.collect()
        self.__feature_names = feature_names
        self.__features = self.__features.values
        feature_num = self.__shap_values.shape[1]
        if feature_num != self.__features.shape[1]:
            raise ValueError("The parameter 'shap_values' value does not match the parameter 'features'!")
        self.__feature_num = feature_num

        self.__should_sort_to_plot = True
        self.__figure_type_to_plot = "dot"
        self.__alpha_to_plot = 1
        self.__figure_size_to_plot = "auto"
        self.__max_display_to_plot = 20
        self.__row_height_to_plot = 0.4
        self.__color_to_plot = red_blue
        self.__grey_color_to_plot_scatter = "#777777"
        self.__linewidth_to_plot_scatter = 0
        self.__zorder_to_plot_scatter = 3
        self.__marker_size_to_plot_scatter = 16

        if self.__is_lstm_function:
            self.__should_sort_to_plot = False

        feature_order_indexes = None
        if self.__should_sort_to_plot:
            feature_order_indexes = np.argsort(np.sum(np.abs(self.__shap_values), axis=0))
            feature_order_indexes = feature_order_indexes[-min(self.__max_display_to_plot, len(feature_order_indexes)):]
        else:
            feature_order_indexes = np.flip(np.arange(min(self.__max_display_to_plot, self.__feature_num)), 0)
        self.__feature_order_indexes = feature_order_indexes

        self.force_plotter = None

    def shap_values(self):
        """
        Get Shapley values.

        Returns
        -------
        numpy.ndarray
            Shapley values.
        """
        return self.__shap_values

    def __width_height(self):
        width = 0
        height = 0
        if self.__figure_size_to_plot == "auto":
            width = 8
            height = len(self.__feature_order_indexes) * self.__row_height_to_plot + 1.5
        elif isinstance(self.__figure_size_to_plot, (list, tuple)):
            width = self.__figure_size_to_plot[0]
            height = self.__figure_size_to_plot[1]
        elif self.__figure_size_to_plot is not None:
            width = 8
            height = len(self.__feature_order_indexes) * self.__figure_size_to_plot + 1.5
        return width, height

    def force_plot(self):
        """
        Renders the force plot as a notebook iframe.
        """
        if self.force_plotter is None:
            if self.__is_lstm_function:
                raise TypeError('Unsupported action for time series!')
            self.force_plotter = ForcePlot(self.feature_value_df, self.reason_code_df)
        self.force_plotter.generate_notebook_iframe()

    def summary_plot(self):
        """
        Global Interpretation using Shapley values. \n
        To get an overview of which features are most important for a model we can plot the Shapley values of every feature for every sample.

        Returns
        -------
        Image Component
            This object can be rendered by browser.
        """
        width, height = self.__width_height()
        plt.gcf().set_size_inches(width, height)
        plt.axvline(x=0, color="#999999", zorder=-1)

        if self.__figure_type_to_plot == "dot":
            for array_index, f_order_index in enumerate(self.__feature_order_indexes):
                # 1.prepare data
                f_shap_values = self.__shap_values[:, f_order_index]
                f_shap_values_count = len(f_shap_values)
                rasterized = f_shap_values_count > 500
                f_values = self.__features[:, f_order_index]
                if self.__features.shape[0] != f_shap_values_count:
                    raise ValueError("The parameter 'shap_values' value does not match the parameter 'features'!")

                # 2.shuffle two array in same way
                inds = np.arange(f_shap_values_count)
                np.random.shuffle(inds)
                f_shap_values = f_shap_values[inds]
                if f_values is not None:
                    f_values = f_values[inds]

                # 3.should coloring feature?
                colored_feature = True
                try:
                    # make sure: all value of this array can be numeric
                    # gray plot issue: https://github.com/slundberg/shap/issues/406
                    f_values = np.array(f_values, dtype=np.float64)
                except BaseException:
                    colored_feature = False

                # 4.compute base_y value for random distribution
                min_f_shap = np.min(f_shap_values)
                max_f_shap = np.max(f_shap_values)
                quant = np.round(100 * (f_shap_values - min_f_shap) / (max_f_shap - min_f_shap + 1e-8))
                inds = np.argsort(quant + np.random.randn(f_shap_values_count) * 1e-6)
                layer = 0
                last_bin = -1
                base_y = np.zeros(f_shap_values_count)
                for ind in inds:
                    if quant[ind] != last_bin:
                        layer = 0
                    base_y[ind] = np.ceil(layer / 2) * ((layer % 2) * 2 - 1)
                    layer += 1
                    last_bin = quant[ind]
                base_y *= 0.9 * (self.__row_height_to_plot / np.max(base_y + 1))

                # 5.plot base line [y value: -1 ~ 1]
                # print(self.__feature_names[f_order_index])
                plt.axhline(y=array_index, color="#cccccc", lw=0.5, dashes=(1, 5), zorder=-1)

                if colored_feature:
                    vmin, vmax = self.__vmin_vmax(f_values)

                    # 6.plot the nan scatter in the interaction feature as grey
                    nan_flag_feature_values = np.isnan(f_values)
                    x = f_shap_values[nan_flag_feature_values]
                    y = array_index + base_y[nan_flag_feature_values]

                    plt.scatter(x, y,
                                color=self.__grey_color_to_plot_scatter,
                                vmin=vmin, vmax=vmax,
                                s=self.__marker_size_to_plot_scatter,
                                alpha=self.__alpha_to_plot,
                                linewidth=self.__linewidth_to_plot_scatter,
                                zorder=self.__zorder_to_plot_scatter,
                                rasterized=rasterized)

                    # 7.plot the non-nan scatter colored by the trimmed feature value
                    non_nan_flag_feature_values = np.invert(nan_flag_feature_values)
                    x = f_shap_values[non_nan_flag_feature_values]
                    y = array_index + base_y[non_nan_flag_feature_values]

                    # The calculated color value depends on the feature_values value
                    # color value: vmin ~ vmax
                    f_colors = f_values[non_nan_flag_feature_values].astype(np.float64)
                    f_colors_copy = f_colors.copy()
                    f_colors_copy[np.isnan(f_colors)] = (vmin + vmax) / 2.0
                    f_colors[f_colors_copy > vmax] = vmax
                    f_colors[f_colors_copy < vmin] = vmin

                    plt.scatter(x, y,
                                cmap=self.__color_to_plot,
                                vmin=vmin, vmax=vmax,
                                s=self.__marker_size_to_plot_scatter,
                                c=f_colors, alpha=self.__alpha_to_plot, linewidth=self.__linewidth_to_plot_scatter,
                                zorder=self.__zorder_to_plot_scatter, rasterized=rasterized)
                else:
                    plt.scatter(f_shap_values, array_index + base_y,
                                s=self.__marker_size_to_plot_scatter,
                                alpha=self.__alpha_to_plot,
                                linewidth=self.__linewidth_to_plot_scatter,
                                zorder=self.__zorder_to_plot_scatter,
                                color=self.__color_to_plot if colored_feature else self.__grey_color_to_plot_scatter,
                                rasterized=rasterized)

        labelsize = 11
        fontsize = 13
        # plot the color bar
        mappable = cm.ScalarMappable(cmap=self.__color_to_plot)
        mappable.set_array([0, 1])
        color_bar = plt.colorbar(mappable, ticks=[0, 1], aspect=1000)
        color_bar.set_ticklabels(["Low", "High"])
        color_bar.set_label("Feature value", size=12, labelpad=0)
        color_bar.ax.tick_params(labelsize=labelsize, length=0)
        color_bar.set_alpha(self.__alpha_to_plot)
        color_bar.outline.set_visible(False)
        bbox = color_bar.ax.get_window_extent().transformed(plt.gcf().dpi_scale_trans.inverted())
        color_bar.ax.set_aspect((bbox.height - 0.9) * 20)

        # print tips
        msg1 = '1.Using Shapley values to show the distribution of the impacts each feature has on the model output.'
        msg2 = '2.The color represents the feature value (red high, blue low).'
        msg3 = '3.The plot below shows the relationship between feature value and Shapley value.'
        msg4 = '-- If the dots in the left area are blue and the dots in the right area are red, then it means that the feature value and the Shapley value are typically positive correlation.'
        msg5 = '-- If the dots in the left area are red and the dots in the right area are blue, then it means that the feature value and the Shapley value are typically negative correlation.'
        msg6 = '-- If all the dots are concentrated near 0, it means that the Shapley value has nothing to do with this feature.'
        print('\033[31m{}'.format(msg1))
        print('\033[31m{}'.format(msg2))
        print('\033[31m{}'.format(msg3))
        print('\033[31m{}'.format(msg4))
        print('\033[31m{}'.format(msg5))
        print('\033[31m{}'.format(msg6))

        # set params for plotting
        plt.gca().xaxis.set_ticks_position('bottom')
        plt.gca().yaxis.set_ticks_position('none')

        plt.gca().spines['right'].set_visible(False)
        plt.gca().spines['top'].set_visible(False)
        plt.gca().spines['left'].set_visible(False)

        plt.gca().tick_params(color="#333333", labelcolor="#333333")
        plt.yticks(range(len(self.__feature_order_indexes)), [self.__feature_names[i] for i in self.__feature_order_indexes], fontsize=fontsize)
        plt.gca().tick_params('y', length=20, width=0.5, which='major')
        plt.gca().tick_params('x', labelsize=labelsize)

        plt.ylim(-1, len(self.__feature_order_indexes))
        plt.xlabel("SHAP value(impact on model output)", fontsize=fontsize)

        plt.plot()
        None

    def __vmin_vmax(self, feature_values):
        vmin = np.nanpercentile(feature_values, 5)
        vmax = np.nanpercentile(feature_values, 100 - 5)
        if vmin == vmax:
            vmin = np.nanpercentile(feature_values, 1)
            vmax = np.nanpercentile(feature_values, 100 - 1)
            if vmin == vmax:
                vmin = np.min(feature_values)
                vmax = np.max(feature_values)
        # fixes rare numerical precision issues
        if vmin > vmax:
            vmin = vmax
        return vmin, vmax


class TimeSeriesExplainer(object):
    """
    The TimeSeriesExplainer instance can visualize the training and prediction results of time series.

    The generated html can be embedded in a notebook, including:

      - Compare

          - YHAT
          - YHAT_LOWER
          - YHAT_UPPER
          - REAL_Y
      - Trend
      - Seasonal
      - Holiday
      - Exogenous variable
    """
    def __init__(self):
        pass

    @staticmethod
    def explain_arima_model(arima, iframe_height=800):
        """
        The static method can visualize the training and prediction results of ARIMA.

        The generated html can be embedded in a notebook, including:

          - Compare

              - PREDICTIVE_Y
              - REAL_Y
          - Trend
          - Seasonal
          - Holiday
          - Exogenous variable

        Parameters
        ----------
        arima :
            ARIMA related instances.
        iframe_height : int, optional
            Specifies iframe height.

            Defaults to 800.
        """
        xAxis_type = 'category'
        if arima.explainer_ is None:
            raise ValueError('The explainer attribute of ARIMA is None!')
        key_name = arima.hanaml_fit_params['key']
        label_name = arima.hanaml_fit_params['endog']
        feature_names = arima.hanaml_fit_params['exog']
        feature_count = len(feature_names)
        explainer_pd_df = arima.explainer_.collect()
        try:
            explainer_pd_df[key_name]
        except BaseException:
            key_name = '{}(INT)'.format(key_name)
        # if xAxis_type == 'time':
        #     if explainer_pd_df[key_name].dtypes != 'datetime64[ns]':
        #         raise TypeError('The data type of the {} column is not a date type!'.format(key_name))
        key_values = explainer_pd_df[key_name].astype(str)

        explainer_na_pd_df = explainer_pd_df.isna().any()
        explainer_column_names = list(explainer_pd_df.columns)
        predict_data_pd_df = arima.predict_data.collect()
        predict_result_pd_df = arima.predict_data.connection_context.sql("SELECT * FROM {}".format(arima.get_predict_output_table_names()[0])).collect()

        # 1.
        decomposed_column_names = []
        decomposed_dict = {
            key_name: key_values
        }
        picked_row = explainer_pd_df.head(1)
        shap_name = None
        feature_shap_dict = {
            key_name: key_values
        }
        feature_shap_pd_df = None
        for column_name in explainer_column_names:
            if key_name == column_name:
                continue
            elif explainer_na_pd_df[column_name]:
                pass
            else:
                try:
                    json.loads(list(picked_row[column_name])[0])
                    shap_name = column_name
                    shap_dict = {}
                    for feature_name in feature_names:
                        shap_dict[feature_name] = []
                    for json_item in list(explainer_pd_df[shap_name]):
                        existed_feature_names = []
                        for feature_dict in json.loads(json_item):
                            existed_feature_names.append(feature_dict['attr'])
                            shap_dict[feature_dict['attr']].append(feature_dict['val'])
                        for feature_name in feature_names:
                            if feature_name not in existed_feature_names:
                                shap_dict[feature_name].append(0.0)
                    for feature_name in feature_names:
                        feature_shap_dict['{}_FEATURE'.format(feature_name)] = predict_data_pd_df[feature_name]
                        feature_shap_dict['{}_SHAP'.format(feature_name)] = shap_dict[feature_name]
                    feature_shap_pd_df = pandas.DataFrame(feature_shap_dict)
                except BaseException:
                    decomposed_column_names.append(column_name)
                    decomposed_dict[column_name] = explainer_pd_df[column_name]
        decomposed_pd_df = pandas.DataFrame(decomposed_dict)

        # 2.3.
        chart_configs = []
        compare_pd_df = None
        chart_name = 'Compare'
        try:
            compare_pd_df = pandas.DataFrame({
                key_name: key_values,
                'REAL_{}'.format(label_name): predict_data_pd_df[label_name],
                'PREDICTIVE_{}'.format(label_name): predict_result_pd_df['FORECAST'],
            })
        except BaseException:
            chart_name = label_name
            compare_pd_df = pandas.DataFrame({
                key_name: key_values,
                'PREDICTIVE_{}'.format(label_name): predict_result_pd_df['FORECAST'],
            })
        chart_config = ChartConfig(compare_pd_df, chart_name, '', key_name, '')
        chart_config.config['xAxis']['type'] = xAxis_type
        chart_config.ignore_yAxis_min_max = True
        chart_configs.append(chart_config)
        chart_config.add_to_series('PREDICTIVE_{}'.format(label_name), 'line', key_name, 'PREDICTIVE_{}'.format(label_name))
        try:
            predict_data_pd_df[label_name]
            chart_config.add_to_series('REAL_{}'.format(label_name), 'line', key_name, 'REAL_{}'.format(label_name))
        except BaseException:
            pass

        # 4.
        decomposed_chart_configs = []
        for decomposed_column_name in decomposed_column_names:
            chart_config = ChartConfig(decomposed_pd_df, decomposed_column_name, '', key_name, '')
            chart_config.config['xAxis']['type'] = xAxis_type
            chart_config.add_to_series(decomposed_column_name, 'line', key_name, decomposed_column_name)
            decomposed_chart_configs.append(chart_config)
            chart_configs.append(chart_config)
        unify_min_max_value_of_yAxis(decomposed_chart_configs)

        # 5.
        x_label = key_name
        y_label = 'SHAP'
        z_label = 'FEATURE'

        chart_config = ChartConfig(feature_shap_pd_df, shap_name, '', x_label, y_label)
        chart_config.config['xAxis']['type'] = xAxis_type
        chart_config.config['xAxis']['boundaryGap'] = 'true'
        chart_config.ignore_yAxis_min_max = True
        chart_configs.append(chart_config)
        for feature_name in feature_names:
            chart_config.add_to_series(feature_name, 'bar', x_label, '{}_{}'.format(feature_name, y_label))
        for series_item in chart_config.config['series']:
            series_item['stack'] = y_label
            series_item['emphasis'] = {
                'focus': 'series'
            }
        chart_config.yAxis_min_max_value_magnification_factor = 2

        chart_config = ChartConfig(feature_shap_pd_df, shap_name, '', x_label, y_label)
        chart_config.config['xAxis']['type'] = xAxis_type
        if xAxis_type == 'category':
            chart_config.config['xAxis']['boundaryGap'] = 'true'
        chart_config.ignore_yAxis_min_max = True
        chart_configs.append(chart_config)
        for feature_name in feature_names:
            chart_config.add_to_series(feature_name, 'scatter', x_label, '{}_{}'.format(feature_name, y_label))
        chart_config.config['visualMap'] = []
        column_names = list(feature_shap_pd_df.columns)
        for feature_name in feature_names:
            column_name = '{}_{}'.format(feature_name, z_label)
            chart_config.config['visualMap'].append({
                'show': 'false',
                'dimension': column_names.index(column_name),
                'min': feature_shap_pd_df[column_name].min(),
                'max': feature_shap_pd_df[column_name].max(),
                'seriesIndex': [feature_names.index(feature_name)],
                'inRange': {
                    'symbolSize': [5, 20]
                }
            })
        chart_config.yAxis_min_max_value_magnification_factor = 2
        # 6.
        chart_bulder = ChartBuilder(len(chart_configs), 1)
        index = 0
        for chart_config in chart_configs:
            chart_bulder.add_chart(chart_config, (index, 0))
            index = index + 1
        chart_bulder.build()
        chart_bulder.generate_notebook_iframe(iframe_height)

    @staticmethod
    def explain_additive_model(amf: additive_model_forecast.AdditiveModelForecast, iframe_height=800):
        """
        The static method can visualize the training and prediction results of AdditiveModelForecast.

        The generated html can be embedded in a notebook, including:

          - Compare

              - YHAT
              - YHAT_LOWER
              - YHAT_UPPER
              - REAL_Y
          - Trend
          - Seasonal
          - Holiday
          - Exogenous variable

        Parameters
        ----------
        amf : additive_model_forecast.AdditiveModelForecast
            AdditiveModelForecast instances.
        iframe_height : int, optional
            Specifies iframe height.

            Defaults to 800.
        """
        xAxis_type = 'category'
        if amf.explainer_ is None:
            raise ValueError('The explainer attribute of AdditiveModelForecast is None!')
        key_name = amf.hanaml_fit_params['key']
        feature_names = amf.hanaml_fit_params['exog']
        feature_count = len(feature_names)
        label_name = amf.hanaml_fit_params['endog']

        explainer_pd_df = amf.explainer_.collect()
        if explainer_pd_df[key_name].dtypes != 'datetime64[ns]':
            raise TypeError('The data type of the {} column is not a date type!'.format(key_name))
        key_values = explainer_pd_df[key_name].astype(str)
        predict_data_pd_df = amf.predict_data.collect()
        predict_result_pd_df = amf.predict_data.connection_context.sql("SELECT * FROM {}".format(amf.get_predict_output_table_names()[0])).collect()
        # 1.compare
        u = list(predict_result_pd_df['YHAT_UPPER'])
        l = list(predict_result_pd_df['YHAT_LOWER'])
        confidence_base = l[0]
        for l_value in l:
            confidence_base = math.floor(min(confidence_base, l_value))
        confidence_base = -confidence_base

        compare_dict = None
        chart_name = 'Compare'
        try:
            compare_dict = {
                key_name: key_values,
                'REAL_{}'.format(label_name): list(np.array(list(predict_data_pd_df[label_name])) + confidence_base),
                'YHAT_UPPER': list(np.array(u) - np.array(l)),
                'YHAT_LOWER': list(np.array(l) + confidence_base),
                'YHAT': list(np.array(list(predict_result_pd_df['YHAT'])) + confidence_base)
            }
        except BaseException:
            chart_name = label_name
            compare_dict = {
                key_name: key_values,
                'YHAT_UPPER': list(np.array(u) - np.array(l)),
                'YHAT_LOWER': list(np.array(l) + confidence_base),
                'YHAT': list(np.array(list(predict_result_pd_df['YHAT'])) + confidence_base)
            }
        compare_pd_df = pandas.DataFrame(compare_dict)
        # 2.trend
        trend_pd_df = pandas.DataFrame({
            key_name: key_values,
            'TREND': explainer_pd_df['TREND']
        })
        # 3.seasonal
        seasonal_dict = {
            key_name: key_values
        }
        for json_item in list(explainer_pd_df['SEASONAL']):
            dict_item = json.loads(json_item)
            for key in dict_item:
                if seasonal_dict.get(key) is None:
                    seasonal_dict[key] = []
                seasonal_dict[key].append(dict_item[key])
        seasonal_pd_df = pandas.DataFrame(seasonal_dict)

        # 4.holiday
        holiday_dict = {
            key_name: key_values
        }
        for json_item in list(explainer_pd_df['HOLIDAY']):
            dict_item = json.loads(json_item)
            for key in dict_item:
                if holiday_dict.get(key) is None:
                    holiday_dict[key] = []
                holiday_dict[key].append(dict_item[key])
        holiday_pd_df = pandas.DataFrame(holiday_dict)

        # 5.shap
        shap_name = 'EXOGENOUS'
        shap_dict = {}
        for feature_name in feature_names:
            shap_dict[feature_name] = []
        for json_item in list(explainer_pd_df[shap_name]):
            dict_item = json.loads(json_item)
            for key in dict_item:
                shap_dict[key].append(dict_item[key])
        feature_shap_dict = {
            key_name: key_values
        }
        for feature_name in feature_names:
            feature_shap_dict['{}_FEATURE'.format(feature_name)] = predict_data_pd_df[feature_name]
            feature_shap_dict['{}_SHAP'.format(feature_name)] = shap_dict[feature_name]
        feature_shap_pd_df = pandas.DataFrame(feature_shap_dict)

        chart_configs = []

        # 6.
        chart_config = ChartConfig(compare_pd_df, chart_name, '', key_name, '')
        chart_config.config['xAxis']['type'] = xAxis_type
        chart_config.ignore_yAxis_min_max = True
        chart_configs.append(chart_config)

        for item_name in ['YHAT_LOWER', 'YHAT_UPPER']:
            chart_config.add_to_series('', 'line', key_name, item_name)
        for item_name in ['YHAT']:
            chart_config.add_to_series(item_name, 'line', key_name, item_name)
        try:
            predict_data_pd_df[label_name]
            for item_name in ['REAL_{}'.format(label_name)]:
                chart_config.add_to_series(item_name, 'line', key_name, item_name)
        except BaseException:
            pass

        chart_config.config['yAxis']['axisLabel'] = {
            'formatter': 'function(val){return (val-' + str(confidence_base) + ')}'
        }

        formatter_str_list = [
            "function (params) {",
            # "var x=params[2]['data'][params[2]['encode']['x'][0]];"
            "var x = params[2]['axisValueLabel'];",
            "var label0 ='YHAT_LOWER';",
            "var label1 ='YHAT_UPPER';",
            "var label2 =params[2]['seriesName'];",
            "var label3 =params[3]['seriesName'];",
            "var value0=params[0]['data'][params[0]['encode']['y'][0]]", "-", str(confidence_base), ";",
            "var value1=params[1]['data'][params[1]['encode']['y'][0]]", "+value0", ";",
            "var value2=params[2]['data'][params[2]['encode']['y'][0]]", "-", str(confidence_base), ";",
            "var value3=params[3]['data'][params[3]['encode']['y'][0]]", "-", str(confidence_base), ";",
            "return x + ",
            "'<br />'+label0+': '+value0 + ",
            "'<br />'+label1+': '+value1 + ",
            "'<br />'+label2+': '+value2 + ",
            "'<br />'+label3+': '+value3",
            "}"
            ]
        chart_config.config['tooltip'] = {
            'trigger': 'axis',
            'formatter': "".join(formatter_str_list)
            }
        chart_config.config['series'][0]['lineStyle'] = {
            'opacity': 0
        }
        chart_config.config['series'][0]['stack'] = 'confidence'
        chart_config.config['series'][0]['symbol'] = 'none'
        chart_config.config['series'][1]['lineStyle'] = {
            'opacity': 0
        }
        chart_config.config['series'][1]['stack'] = 'confidence'
        chart_config.config['series'][1]['symbol'] = 'none'
        chart_config.config['series'][1]['areaStyle'] = {
            'color': '#ccc'
        }

        common_yAxis_chart_configs = []
        # 7.
        chart_config = ChartConfig(trend_pd_df, 'TREND', '', key_name, '')
        chart_config.config['xAxis']['type'] = xAxis_type
        chart_configs.append(chart_config)
        common_yAxis_chart_configs.append(chart_config)
        chart_config.add_to_series('TREND', 'line', key_name, 'TREND')

        # 8.
        chart_config = ChartConfig(seasonal_pd_df, 'SEASONAL', '', key_name, '')
        chart_config.config['xAxis']['type'] = xAxis_type
        chart_configs.append(chart_config)
        common_yAxis_chart_configs.append(chart_config)

        series_names = list(seasonal_dict.keys())
        series_names.remove(key_name)
        for item_name in series_names:
            chart_config.add_to_series(item_name, 'line', key_name, item_name)
        # 9.
        unify_min_max_value_of_yAxis(common_yAxis_chart_configs)
        # 10.
        chart_config = ChartConfig(holiday_pd_df, 'HOLIDAY', '', key_name, '')
        chart_config.config['xAxis']['type'] = xAxis_type
        chart_config.config['xAxis']['boundaryGap'] = 'true'
        chart_config.ignore_yAxis_min_max = True
        chart_configs.append(chart_config)
        holiday_names = list(holiday_pd_df.columns)
        holiday_names.remove(key_name)
        for holiday_name in holiday_names:
            chart_config.add_to_series(holiday_name, 'bar', key_name, holiday_name)
        for series_item in chart_config.config['series']:
            series_item['stack'] = 'holiday'
            series_item['emphasis'] = {
                'focus': 'series'
            }
        chart_config.yAxis_min_max_value_magnification_factor = 2
        # 11.
        query_sql = '''
        SELECT *
        FROM JSON_TABLE({}.MODEL_CONTENT, '$'
        COLUMNS
            (
                REGRESSOR_NAME VARCHAR(5000) FORMAT JSON PATH '$.regressor_name[*][*]',
                REGRESSOR_MODE VARCHAR(5000) FORMAT JSON PATH '$.regressor_mode[*][*]'
            )
        ) AS JT;'''.replace('\n', '').format(amf.model_.__dict__['source_table']['TABLE_NAME'])
        result = amf.predict_data.connection_context.sql(query_sql).collect()
        # 0: additive,1: multiplicative
        REGRESSOR_NAME = list(result['REGRESSOR_NAME'])[0].split(',')
        REGRESSOR_MODE = list(result['REGRESSOR_MODE'])[0].split(',')
        additive_mode_names = []
        multiplicative_mode_names = []
        for i in range(0, len(REGRESSOR_NAME)):
            REGRESSOR_NAME[i] = REGRESSOR_NAME[i].replace('"', '')
            REGRESSOR_MODE[i] = REGRESSOR_MODE[i].replace('"', '')
            if REGRESSOR_MODE[i] == '0':
                additive_mode_names.append(REGRESSOR_NAME[i])
            else:
                multiplicative_mode_names.append(REGRESSOR_NAME[i])
        x_label = key_name
        y_label = 'SHAP'
        z_label = 'FEATURE'
        # additive
        if len(additive_mode_names) > 0:
            chart_config = ChartConfig(feature_shap_pd_df, shap_name, 'Additive Mode', x_label, y_label)
            chart_config.config['xAxis']['type'] = xAxis_type
            chart_config.config['xAxis']['boundaryGap'] = 'true'
            chart_config.ignore_yAxis_min_max = True
            chart_configs.append(chart_config)
            for feature_name in feature_names:
                if feature_name in additive_mode_names:
                    chart_config.add_to_series(feature_name, 'bar', x_label, '{}_{}'.format(feature_name, y_label))
            for series_item in chart_config.config['series']:
                series_item['stack'] = y_label
                series_item['emphasis'] = {
                    'focus': 'series'
                }
            chart_config.yAxis_min_max_value_magnification_factor = 2
        # multiplicative
        if len(multiplicative_mode_names) > 0:
            chart_config = ChartConfig(feature_shap_pd_df, shap_name, 'Multiplicative Mode', x_label, y_label)
            chart_config.config['xAxis']['type'] = xAxis_type
            chart_config.config['xAxis']['boundaryGap'] = 'true'
            chart_config.ignore_yAxis_min_max = True
            chart_configs.append(chart_config)
            for feature_name in feature_names:
                if feature_name in multiplicative_mode_names:
                    chart_config.add_to_series(feature_name, 'bar', x_label, '{}_{}'.format(feature_name, y_label))
            for series_item in chart_config.config['series']:
                series_item['stack'] = y_label
                series_item['emphasis'] = {
                    'focus': 'series'
                }
            chart_config.yAxis_min_max_value_magnification_factor = 2
        # additive
        if len(additive_mode_names) > 0:
            chart_config = ChartConfig(feature_shap_pd_df, shap_name, 'Additive Mode', x_label, y_label)
            chart_config.config['xAxis']['type'] = xAxis_type
            if xAxis_type == 'category':
                chart_config.config['xAxis']['boundaryGap'] = 'true'
            chart_config.ignore_yAxis_min_max = True
            chart_configs.append(chart_config)
            for feature_name in feature_names:
                if feature_name in additive_mode_names:
                    chart_config.add_to_series(feature_name, 'scatter', x_label, '{}_{}'.format(feature_name, y_label))
            chart_config.config['visualMap'] = []
            column_names = list(feature_shap_pd_df.columns)
            for feature_name in feature_names:
                column_name = '{}_{}'.format(feature_name, z_label)
                chart_config.config['visualMap'].append({
                    'show': 'false',
                    'dimension': column_names.index(column_name),
                    'min': feature_shap_pd_df[column_name].min(),
                    'max': feature_shap_pd_df[column_name].max(),
                    'seriesIndex': [feature_names.index(feature_name)],
                    'inRange': {
                        'symbolSize': [5, 20]
                    }
                })
            chart_config.yAxis_min_max_value_magnification_factor = 2

        # multiplicative
        if len(multiplicative_mode_names) > 0:
            chart_config = ChartConfig(feature_shap_pd_df, shap_name, 'Multiplicative Mode', x_label, y_label)
            chart_config.config['xAxis']['type'] = xAxis_type
            if xAxis_type == 'category':
                chart_config.config['xAxis']['boundaryGap'] = 'true'
            chart_config.ignore_yAxis_min_max = True
            chart_configs.append(chart_config)
            for feature_name in feature_names:
                if feature_name in multiplicative_mode_names:
                    chart_config.add_to_series(feature_name, 'scatter', x_label, '{}_{}'.format(feature_name, y_label))
            chart_config.config['visualMap'] = []
            column_names = list(feature_shap_pd_df.columns)
            for feature_name in feature_names:
                column_name = '{}_{}'.format(feature_name, z_label)
                chart_config.config['visualMap'].append({
                    'show': 'false',
                    'dimension': column_names.index(column_name),
                    'min': feature_shap_pd_df[column_name].min(),
                    'max': feature_shap_pd_df[column_name].max(),
                    'seriesIndex': [feature_names.index(feature_name)],
                    'inRange': {
                        'symbolSize': [5, 20]
                    }
                })
            chart_config.yAxis_min_max_value_magnification_factor = 2
        # 12.
        chart_bulder = ChartBuilder(len(chart_configs), 1)
        index = 0
        for chart_config in chart_configs:
            chart_bulder.add_chart(chart_config, (index, 0))
            index = index + 1
        chart_bulder.build()
        chart_bulder.generate_notebook_iframe(iframe_height)
