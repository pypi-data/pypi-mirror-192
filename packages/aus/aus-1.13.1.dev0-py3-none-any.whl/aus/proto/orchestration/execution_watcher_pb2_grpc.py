# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from aus.proto.orchestration import execution_watcher_pb2 as aus_dot_proto_dot_orchestration_dot_execution__watcher__pb2


class ExecutionWatcherServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UpdateExecutionInfo = channel.unary_unary(
        '/aus.orchestration.ExecutionWatcherService/UpdateExecutionInfo',
        request_serializer=aus_dot_proto_dot_orchestration_dot_execution__watcher__pb2.UpdateExecutionInfoRequest.SerializeToString,
        response_deserializer=aus_dot_proto_dot_orchestration_dot_execution__watcher__pb2.UpdateExecutionInfoResponse.FromString,
        )


class ExecutionWatcherServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def UpdateExecutionInfo(self, request, context):
    """Update job info from a remote executor operator
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExecutionWatcherServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UpdateExecutionInfo': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateExecutionInfo,
          request_deserializer=aus_dot_proto_dot_orchestration_dot_execution__watcher__pb2.UpdateExecutionInfoRequest.FromString,
          response_serializer=aus_dot_proto_dot_orchestration_dot_execution__watcher__pb2.UpdateExecutionInfoResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'aus.orchestration.ExecutionWatcherService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
