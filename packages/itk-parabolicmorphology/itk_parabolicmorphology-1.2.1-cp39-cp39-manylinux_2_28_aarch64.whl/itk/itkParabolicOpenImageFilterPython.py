# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ParabolicMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkParabolicOpenImageFilterPython
else:
    import _itkParabolicOpenImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkParabolicOpenImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkParabolicOpenImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkParabolicOpenImageFilterID2ID2_Superclass_New():
    return itkParabolicOpenImageFilterID2ID2_Superclass.New()

class itkParabolicOpenImageFilterID2ID2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkParabolicOpenImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterID2ID2_Superclass

        Create a new object of the class itkParabolicOpenImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterID2ID2_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_swigregister(itkParabolicOpenImageFilterID2ID2_Superclass)
itkParabolicOpenImageFilterID2ID2_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass___New_orig__
itkParabolicOpenImageFilterID2ID2_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Superclass_cast


def itkParabolicOpenImageFilterID3ID3_Superclass_New():
    return itkParabolicOpenImageFilterID3ID3_Superclass.New()

class itkParabolicOpenImageFilterID3ID3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkParabolicOpenImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterID3ID3_Superclass

        Create a new object of the class itkParabolicOpenImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterID3ID3_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_swigregister(itkParabolicOpenImageFilterID3ID3_Superclass)
itkParabolicOpenImageFilterID3ID3_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass___New_orig__
itkParabolicOpenImageFilterID3ID3_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Superclass_cast


def itkParabolicOpenImageFilterID4ID4_Superclass_New():
    return itkParabolicOpenImageFilterID4ID4_Superclass.New()

class itkParabolicOpenImageFilterID4ID4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkParabolicOpenImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterID4ID4_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterID4ID4_Superclass

        Create a new object of the class itkParabolicOpenImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterID4ID4_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_swigregister(itkParabolicOpenImageFilterID4ID4_Superclass)
itkParabolicOpenImageFilterID4ID4_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass___New_orig__
itkParabolicOpenImageFilterID4ID4_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Superclass_cast


def itkParabolicOpenImageFilterIF2IF2_Superclass_New():
    return itkParabolicOpenImageFilterIF2IF2_Superclass.New()

class itkParabolicOpenImageFilterIF2IF2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkParabolicOpenImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIF2IF2_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIF2IF2_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_swigregister(itkParabolicOpenImageFilterIF2IF2_Superclass)
itkParabolicOpenImageFilterIF2IF2_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass___New_orig__
itkParabolicOpenImageFilterIF2IF2_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Superclass_cast


def itkParabolicOpenImageFilterIF3IF3_Superclass_New():
    return itkParabolicOpenImageFilterIF3IF3_Superclass.New()

class itkParabolicOpenImageFilterIF3IF3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkParabolicOpenImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIF3IF3_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIF3IF3_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_swigregister(itkParabolicOpenImageFilterIF3IF3_Superclass)
itkParabolicOpenImageFilterIF3IF3_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass___New_orig__
itkParabolicOpenImageFilterIF3IF3_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Superclass_cast


def itkParabolicOpenImageFilterIF4IF4_Superclass_New():
    return itkParabolicOpenImageFilterIF4IF4_Superclass.New()

class itkParabolicOpenImageFilterIF4IF4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkParabolicOpenImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIF4IF4_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIF4IF4_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIF4IF4_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_swigregister(itkParabolicOpenImageFilterIF4IF4_Superclass)
itkParabolicOpenImageFilterIF4IF4_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass___New_orig__
itkParabolicOpenImageFilterIF4IF4_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Superclass_cast


def itkParabolicOpenImageFilterISS2ISS2_Superclass_New():
    return itkParabolicOpenImageFilterISS2ISS2_Superclass.New()

class itkParabolicOpenImageFilterISS2ISS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkParabolicOpenImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterISS2ISS2_Superclass

        Create a new object of the class itkParabolicOpenImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterISS2ISS2_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_swigregister(itkParabolicOpenImageFilterISS2ISS2_Superclass)
itkParabolicOpenImageFilterISS2ISS2_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass___New_orig__
itkParabolicOpenImageFilterISS2ISS2_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Superclass_cast


def itkParabolicOpenImageFilterISS3ISS3_Superclass_New():
    return itkParabolicOpenImageFilterISS3ISS3_Superclass.New()

class itkParabolicOpenImageFilterISS3ISS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkParabolicOpenImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterISS3ISS3_Superclass

        Create a new object of the class itkParabolicOpenImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterISS3ISS3_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_swigregister(itkParabolicOpenImageFilterISS3ISS3_Superclass)
itkParabolicOpenImageFilterISS3ISS3_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass___New_orig__
itkParabolicOpenImageFilterISS3ISS3_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Superclass_cast


def itkParabolicOpenImageFilterISS4ISS4_Superclass_New():
    return itkParabolicOpenImageFilterISS4ISS4_Superclass.New()

class itkParabolicOpenImageFilterISS4ISS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkParabolicOpenImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterISS4ISS4_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterISS4ISS4_Superclass

        Create a new object of the class itkParabolicOpenImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterISS4ISS4_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_swigregister(itkParabolicOpenImageFilterISS4ISS4_Superclass)
itkParabolicOpenImageFilterISS4ISS4_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass___New_orig__
itkParabolicOpenImageFilterISS4ISS4_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Superclass_cast


def itkParabolicOpenImageFilterIUC2IUC2_Superclass_New():
    return itkParabolicOpenImageFilterIUC2IUC2_Superclass.New()

class itkParabolicOpenImageFilterIUC2IUC2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUC2IUC2_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_swigregister(itkParabolicOpenImageFilterIUC2IUC2_Superclass)
itkParabolicOpenImageFilterIUC2IUC2_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass___New_orig__
itkParabolicOpenImageFilterIUC2IUC2_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Superclass_cast


def itkParabolicOpenImageFilterIUC3IUC3_Superclass_New():
    return itkParabolicOpenImageFilterIUC3IUC3_Superclass.New()

class itkParabolicOpenImageFilterIUC3IUC3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUC3IUC3_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_swigregister(itkParabolicOpenImageFilterIUC3IUC3_Superclass)
itkParabolicOpenImageFilterIUC3IUC3_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass___New_orig__
itkParabolicOpenImageFilterIUC3IUC3_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Superclass_cast


def itkParabolicOpenImageFilterIUC4IUC4_Superclass_New():
    return itkParabolicOpenImageFilterIUC4IUC4_Superclass.New()

class itkParabolicOpenImageFilterIUC4IUC4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUC4IUC4_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUC4IUC4_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_swigregister(itkParabolicOpenImageFilterIUC4IUC4_Superclass)
itkParabolicOpenImageFilterIUC4IUC4_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass___New_orig__
itkParabolicOpenImageFilterIUC4IUC4_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Superclass_cast


def itkParabolicOpenImageFilterIUS2IUS2_Superclass_New():
    return itkParabolicOpenImageFilterIUS2IUS2_Superclass.New()

class itkParabolicOpenImageFilterIUS2IUS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUS2IUS2_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_swigregister(itkParabolicOpenImageFilterIUS2IUS2_Superclass)
itkParabolicOpenImageFilterIUS2IUS2_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass___New_orig__
itkParabolicOpenImageFilterIUS2IUS2_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Superclass_cast


def itkParabolicOpenImageFilterIUS3IUS3_Superclass_New():
    return itkParabolicOpenImageFilterIUS3IUS3_Superclass.New()

class itkParabolicOpenImageFilterIUS3IUS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUS3IUS3_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_swigregister(itkParabolicOpenImageFilterIUS3IUS3_Superclass)
itkParabolicOpenImageFilterIUS3IUS3_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass___New_orig__
itkParabolicOpenImageFilterIUS3IUS3_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Superclass_cast


def itkParabolicOpenImageFilterIUS4IUS4_Superclass_New():
    return itkParabolicOpenImageFilterIUS4IUS4_Superclass.New()

class itkParabolicOpenImageFilterIUS4IUS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_Clone)
    SetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_SetScale)
    GetScale = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_GetScale)
    SetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_UseImageSpacingOff)
    SetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_SafeBorderOff)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_INTERSECTION
    
    SetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_SetParabolicAlgorithm)
    GetParabolicAlgorithm = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_GetParabolicAlgorithm)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUS4IUS4_Superclass
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkParabolicOpenImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUS4IUS4_Superclass in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_swigregister(itkParabolicOpenImageFilterIUS4IUS4_Superclass)
itkParabolicOpenImageFilterIUS4IUS4_Superclass___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass___New_orig__
itkParabolicOpenImageFilterIUS4IUS4_Superclass_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Superclass_cast


def itkParabolicOpenImageFilterID2ID2_New():
    return itkParabolicOpenImageFilterID2ID2.New()

class itkParabolicOpenImageFilterID2ID2(itkParabolicOpenImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterID2ID2
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterID2ID2

        Create a new object of the class itkParabolicOpenImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterID2ID2 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_swigregister(itkParabolicOpenImageFilterID2ID2)
itkParabolicOpenImageFilterID2ID2___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2___New_orig__
itkParabolicOpenImageFilterID2ID2_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID2ID2_cast


def itkParabolicOpenImageFilterID3ID3_New():
    return itkParabolicOpenImageFilterID3ID3.New()

class itkParabolicOpenImageFilterID3ID3(itkParabolicOpenImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterID3ID3
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterID3ID3

        Create a new object of the class itkParabolicOpenImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterID3ID3 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_swigregister(itkParabolicOpenImageFilterID3ID3)
itkParabolicOpenImageFilterID3ID3___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3___New_orig__
itkParabolicOpenImageFilterID3ID3_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID3ID3_cast


def itkParabolicOpenImageFilterID4ID4_New():
    return itkParabolicOpenImageFilterID4ID4.New()

class itkParabolicOpenImageFilterID4ID4(itkParabolicOpenImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterID4ID4
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterID4ID4

        Create a new object of the class itkParabolicOpenImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterID4ID4 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_swigregister(itkParabolicOpenImageFilterID4ID4)
itkParabolicOpenImageFilterID4ID4___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4___New_orig__
itkParabolicOpenImageFilterID4ID4_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterID4ID4_cast


def itkParabolicOpenImageFilterIF2IF2_New():
    return itkParabolicOpenImageFilterIF2IF2.New()

class itkParabolicOpenImageFilterIF2IF2(itkParabolicOpenImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIF2IF2
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIF2IF2

        Create a new object of the class itkParabolicOpenImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIF2IF2 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_swigregister(itkParabolicOpenImageFilterIF2IF2)
itkParabolicOpenImageFilterIF2IF2___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2___New_orig__
itkParabolicOpenImageFilterIF2IF2_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF2IF2_cast


def itkParabolicOpenImageFilterIF3IF3_New():
    return itkParabolicOpenImageFilterIF3IF3.New()

class itkParabolicOpenImageFilterIF3IF3(itkParabolicOpenImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIF3IF3
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIF3IF3

        Create a new object of the class itkParabolicOpenImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIF3IF3 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_swigregister(itkParabolicOpenImageFilterIF3IF3)
itkParabolicOpenImageFilterIF3IF3___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3___New_orig__
itkParabolicOpenImageFilterIF3IF3_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF3IF3_cast


def itkParabolicOpenImageFilterIF4IF4_New():
    return itkParabolicOpenImageFilterIF4IF4.New()

class itkParabolicOpenImageFilterIF4IF4(itkParabolicOpenImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIF4IF4
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIF4IF4

        Create a new object of the class itkParabolicOpenImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIF4IF4 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_swigregister(itkParabolicOpenImageFilterIF4IF4)
itkParabolicOpenImageFilterIF4IF4___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4___New_orig__
itkParabolicOpenImageFilterIF4IF4_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIF4IF4_cast


def itkParabolicOpenImageFilterISS2ISS2_New():
    return itkParabolicOpenImageFilterISS2ISS2.New()

class itkParabolicOpenImageFilterISS2ISS2(itkParabolicOpenImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterISS2ISS2

        Create a new object of the class itkParabolicOpenImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterISS2ISS2 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_swigregister(itkParabolicOpenImageFilterISS2ISS2)
itkParabolicOpenImageFilterISS2ISS2___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2___New_orig__
itkParabolicOpenImageFilterISS2ISS2_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS2ISS2_cast


def itkParabolicOpenImageFilterISS3ISS3_New():
    return itkParabolicOpenImageFilterISS3ISS3.New()

class itkParabolicOpenImageFilterISS3ISS3(itkParabolicOpenImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterISS3ISS3

        Create a new object of the class itkParabolicOpenImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterISS3ISS3 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_swigregister(itkParabolicOpenImageFilterISS3ISS3)
itkParabolicOpenImageFilterISS3ISS3___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3___New_orig__
itkParabolicOpenImageFilterISS3ISS3_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS3ISS3_cast


def itkParabolicOpenImageFilterISS4ISS4_New():
    return itkParabolicOpenImageFilterISS4ISS4.New()

class itkParabolicOpenImageFilterISS4ISS4(itkParabolicOpenImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterISS4ISS4

        Create a new object of the class itkParabolicOpenImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterISS4ISS4 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_swigregister(itkParabolicOpenImageFilterISS4ISS4)
itkParabolicOpenImageFilterISS4ISS4___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4___New_orig__
itkParabolicOpenImageFilterISS4ISS4_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterISS4ISS4_cast


def itkParabolicOpenImageFilterIUC2IUC2_New():
    return itkParabolicOpenImageFilterIUC2IUC2.New()

class itkParabolicOpenImageFilterIUC2IUC2(itkParabolicOpenImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUC2IUC2

        Create a new object of the class itkParabolicOpenImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUC2IUC2 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_swigregister(itkParabolicOpenImageFilterIUC2IUC2)
itkParabolicOpenImageFilterIUC2IUC2___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2___New_orig__
itkParabolicOpenImageFilterIUC2IUC2_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC2IUC2_cast


def itkParabolicOpenImageFilterIUC3IUC3_New():
    return itkParabolicOpenImageFilterIUC3IUC3.New()

class itkParabolicOpenImageFilterIUC3IUC3(itkParabolicOpenImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUC3IUC3

        Create a new object of the class itkParabolicOpenImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUC3IUC3 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_swigregister(itkParabolicOpenImageFilterIUC3IUC3)
itkParabolicOpenImageFilterIUC3IUC3___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3___New_orig__
itkParabolicOpenImageFilterIUC3IUC3_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC3IUC3_cast


def itkParabolicOpenImageFilterIUC4IUC4_New():
    return itkParabolicOpenImageFilterIUC4IUC4.New()

class itkParabolicOpenImageFilterIUC4IUC4(itkParabolicOpenImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUC4IUC4

        Create a new object of the class itkParabolicOpenImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUC4IUC4 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_swigregister(itkParabolicOpenImageFilterIUC4IUC4)
itkParabolicOpenImageFilterIUC4IUC4___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4___New_orig__
itkParabolicOpenImageFilterIUC4IUC4_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUC4IUC4_cast


def itkParabolicOpenImageFilterIUS2IUS2_New():
    return itkParabolicOpenImageFilterIUS2IUS2.New()

class itkParabolicOpenImageFilterIUS2IUS2(itkParabolicOpenImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUS2IUS2

        Create a new object of the class itkParabolicOpenImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUS2IUS2 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_swigregister(itkParabolicOpenImageFilterIUS2IUS2)
itkParabolicOpenImageFilterIUS2IUS2___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2___New_orig__
itkParabolicOpenImageFilterIUS2IUS2_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS2IUS2_cast


def itkParabolicOpenImageFilterIUS3IUS3_New():
    return itkParabolicOpenImageFilterIUS3IUS3.New()

class itkParabolicOpenImageFilterIUS3IUS3(itkParabolicOpenImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUS3IUS3

        Create a new object of the class itkParabolicOpenImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUS3IUS3 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_swigregister(itkParabolicOpenImageFilterIUS3IUS3)
itkParabolicOpenImageFilterIUS3IUS3___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3___New_orig__
itkParabolicOpenImageFilterIUS3IUS3_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS3IUS3_cast


def itkParabolicOpenImageFilterIUS4IUS4_New():
    return itkParabolicOpenImageFilterIUS4IUS4.New()

class itkParabolicOpenImageFilterIUS4IUS4(itkParabolicOpenImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkParabolicOpenImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_Clone)
    __swig_destroy__ = _itkParabolicOpenImageFilterPython.delete_itkParabolicOpenImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkParabolicOpenImageFilterIUS4IUS4

        Create a new object of the class itkParabolicOpenImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicOpenImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicOpenImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicOpenImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicOpenImageFilterIUS4IUS4 in _itkParabolicOpenImageFilterPython:
_itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_swigregister(itkParabolicOpenImageFilterIUS4IUS4)
itkParabolicOpenImageFilterIUS4IUS4___New_orig__ = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4___New_orig__
itkParabolicOpenImageFilterIUS4IUS4_cast = _itkParabolicOpenImageFilterPython.itkParabolicOpenImageFilterIUS4IUS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def parabolic_open_image_filter(*args: itkt.ImageLike,  scale: Union[Sequence[float], float]=..., use_image_spacing: bool=..., safe_border: bool=..., parabolic_algorithm: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ParabolicOpenImageFilter"""
    import itk

    kwarg_typehints = { 'scale':scale,'use_image_spacing':use_image_spacing,'safe_border':safe_border,'parabolic_algorithm':parabolic_algorithm }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ParabolicOpenImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def parabolic_open_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ParabolicMorphology.ParabolicOpenImageFilter
    parabolic_open_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    parabolic_open_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def parabolic_open_close_safe_border_image_filter(*args: itkt.ImageLike,  scale: Union[Sequence[float], float]=..., use_image_spacing: bool=..., safe_border: bool=..., parabolic_algorithm: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ParabolicOpenCloseSafeBorderImageFilter"""
    import itk

    kwarg_typehints = { 'scale':scale,'use_image_spacing':use_image_spacing,'safe_border':safe_border,'parabolic_algorithm':parabolic_algorithm }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ParabolicOpenCloseSafeBorderImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def parabolic_open_close_safe_border_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ParabolicMorphology.ParabolicOpenCloseSafeBorderImageFilter
    parabolic_open_close_safe_border_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    parabolic_open_close_safe_border_image_filter.__doc__ = filter_object.__doc__




