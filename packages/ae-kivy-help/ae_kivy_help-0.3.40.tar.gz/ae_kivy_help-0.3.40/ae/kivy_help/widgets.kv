#: import anchor_points ae.gui_help.anchor_points
#: import help_id_tour_class ae.gui_help.help_id_tour_class
#: import id_of_flow_help ae.gui_help.id_of_flow_help
#: import id_of_state_help ae.gui_help.id_of_state_help
#: import id_of_tour_help ae.gui_help.id_of_tour_help
#: import widget_page_id ae.gui_help.widget_page_id

#: set HELP_COLOR (0.0, 0.69, 0.99)

<HelpBehavior>
    help_id: ''
    # 'help_layout is not None' is needed because None is not allowed for boolean `help_lock` attribute/property
    help_lock: app.help_layout is not None and app.displayed_help_id != self.help_id
    help_vars: {}
    canvas.after:
        Color:
            rgba: HELP_COLOR + (0.24 if self.help_lock and self.width and self.height else 0, )
        Ellipse:
            pos: self.x + sp(9), self.y + sp(9)
            size: self.width - sp(18), self.height - sp(18)
        Color:
            rgba: HELP_COLOR + (0.51 if self.help_lock and self.width and self.height else 0, )
        Line:
            width: sp(3)
            rounded_rectangle: self.x + sp(3), self.y + sp(3), self.width - sp(6), self.height - sp(6), sp(12)


<Tooltip>
    always_overscroll: False        # workaround to kivy scrollview bug (viewport kept at bottom)
    ani_value: 0.999
    bar_width: 0 if root.tap_thru else sp(9)
    bar_color: app.font_color[:3] + [0.69 * root.ani_value]
    bar_inactive_color: app.font_color[:3] + [0.39 * root.ani_value]
    scroll_type: ['bars', 'content']
    size_hint: None, None
    width: min(help_label.width + root.bar_width, Window.width)
    height: min(help_label.height + root.bar_width, Window.height)
    has_tour:
        getattr(root.targeted_widget, 'help_id', False) and help_id_tour_class(root.targeted_widget.help_id) or False
    tour_start_size: (app.main_app.font_size * 1.29, ) * 2 if root.has_tour else (0, 0)
    tour_start_pos: root.x + root.width - root.tour_start_size[0] - sp(1), root.y + sp(1)
    canvas.before:
        Color:
            rgba: Window.clearcolor[:3] + [root.ani_value if root.tap_thru else 0.999]
        RoundedRectangle:
            pos: root.pos
            size: root.size
    canvas.after:
        Color:
            rgba:
                (root.ani_value, app.font_color[1], 0.54, 0.33 + root.ani_value * 0.6) if root.tap_thru else \
                (0.3, app.font_color[1], 0.96, 0.99)
        Line:
            width: sp(3)
            rounded_rectangle: root.x + sp(1), root.y + sp(1), root.width - sp(2), root.height - sp(2), sp(12)
        Triangle:
            points: anchor_points(app.main_app.font_size, root.anchor_spe)
        Rectangle:
            source: app.main_app.img_file('help_circled')
            pos: root.tour_start_pos or (0, 0)
            size: root.tour_start_size or (0, 0)
        Color:
            rgba: Window.clearcolor[:3] + [0.48 + root.ani_value / 2.01]
        Line:
            width: sp(1)
            rounded_rectangle: root.x + sp(1), root.y + sp(1), root.width - sp(2), root.height - sp(2), sp(12)
        Line:
            width: sp(1.5)
            points: anchor_points(app.main_app.font_size, root.anchor_spe)
    Label:
        id: help_label
        text: root.tip_text
        color: (app.font_color[:3] + [root.ani_value]) if root.tap_thru else app.font_color
        background_color: (Window.clearcolor[:3] + [root.ani_value]) if root.tap_thru else Window.clearcolor
        font_size: app.main_app.font_size * 0.81
        markup: True
        padding: sp(12), sp(9)
        size_hint: None, None
        size: self.texture_size[0] + self.padding[0], self.texture_size[1] + self.padding[1]


<HelpToggler>
    icon_name:
        app.help_layout and 'help_icon' or \
        not app.tour_layout and 'app_icon' in app.main_app.image_files and 'app_icon' or \
        ''
    size_hint_x: None
    width: self.height
    source: app.main_app.img_file(self.icon_name, app.app_states['font_size'], app.app_states['light_theme'])
    color: 0.999, 0.3 if app.tour_layout else 0.999, 0.0, 0.999
    relief_square_inner_colors: relief_colors(self.color[:3] + [0.999 if app.help_layout or app.tour_layout else 0.0, ])
    relief_square_inner_lines: self.height * 0.39 * (0.999 - self.ani_value * 0.3)
    relief_square_inner_offset: self.height * 0.12 * self.ani_value


<TourOverlay>
    explained_placeholder: explained_placeholder
    font_height: app.main_app.font_size * 0.9
    label_height: root.font_height * 1.5
    _hem: round(min(self.width, self.height) / 18.6) if root.title_text or root.page_text else 0.0
    title_text: ""
    title_size: app.main_app.text_size_guess(root.title_text, font_size=title_lbl.font_size, padding=2 * (root._hem, ))
    page_text: ""
    page_size: app.main_app.text_size_guess(root.page_text, font_size=page_lbl.font_size, padding=2 * (root._hem, ))
    tip_text: tooltip.tip_text
    next_text: _('next')
    prev_text: _('back')
    navigation_pos_hint_y: 0.3
    canvas.before:
        Color:
            rgba: Window.clearcolor[:3] + [root.fade_out_app]
        Rectangle:
            pos: root.pos
            size: root.width, root.explained_pos[1]
        Rectangle:
            pos: root.x, root.explained_pos[1]
            size: root.explained_pos[0], root.explained_size[1]
        Rectangle:
            pos: root.explained_pos[0] + root.explained_size[0], root.explained_pos[1]
            size: root.width - self.pos[0], root.explained_size[1]
        Rectangle:
            pos: root.x, root.explained_pos[1] + root.explained_size[1]
            size: root.width, root.height - self.pos[1]
    Widget:
        id: explained_placeholder
        size_hint: None, None
    Tooltip:
        id: tooltip
        targeted_widget: root.explained_widget
        tip_text: root.tip_text
        opacity: 1.0 if root.tip_text else 0.0
    TourPageTexts:
        id: tour_page_texts
        padding: root._hem
        relief_square_inner_lines: root._hem
        relief_square_outer_colors: relief_colors(Window.clearcolor) if root.fade_out_app else ()
        height:
            (2.01 * self.padding[0] if title_lbl.height or page_lbl.height else 0) + \
            (max(title_lbl.height, page_lbl.height) if app.landscape else title_lbl.height + page_lbl.height)
        pos_hint: dict(x=0, y=root.navigation_pos_hint_y)
        Label:
            id: title_lbl
            padding: 2 * (root._hem, )
            size_hint:
                0.003 if not self.text or root.title_size[0] == 0 else \
                (0.99 / (0.99 + root.page_size[0] / root.title_size[0])) if app.landscape else \
                0.99, None
            text_size: self.width - root._hem, None
            halign: 'center'
            height: max(self.texture_size[1], page_lbl.texture_size[1] if app.landscape else 0)
            color: app.font_color
            font_size: root.font_height * 1.5
            markup: True
            text: root.title_text
            canvas.before:
                Color:
                    rgba: 0, 0.99, 0, 0.369
                Rectangle:
                    pos: self.pos
                    size: self.size
        Label:
            id: page_lbl
            padding: 2 * (root._hem, )
            size_hint:
                0.003 if not self.text or root.page_size[0] == 0 else \
                (0.99 / (0.99 + root.title_size[0] / root.page_size[0])) if app.landscape else \
                0.99, None
            text_size: self.width - root._hem, None
            halign: 'left'
            height: max(title_lbl.texture_size[1] if app.landscape else 0, self.texture_size[1])
            color: app.font_color
            font_size: root.font_height * 0.9
            markup: True
            text: root.page_text
            canvas.before:
                Color:
                    rgba: 0, 0.69, 0.99, 0.369
                Rectangle:
                    pos: self.pos
                    size: self.size
    SwitchPageButton:
        id: prev_but
        disabled: root.navigation_disabled or not root.prev_text
        pos_hint: dict(x=0.06, top=root.navigation_pos_hint_y)
        size: self.texture_size[0] * 2.1, root.label_height
        font_size: root.font_height
        text: root.prev_text
        on_release: root.prev_page()
    StopTourButton:
        id: stop_but
        size: 2 * (root.label_height * (1.02 if root.prev_text or root.next_text else 1.29), )
        pos_hint:
            dict(center_x=0.501, y=(tour_page_texts.top + self.relief_ellipse_outer_lines) / Window.height) \
            if tour_page_texts.height and tour_page_texts.top + self.height < Window.height else \
            dict(center_x=0.501, top=root.navigation_pos_hint_y - self.relief_ellipse_outer_lines / Window.height)
        on_release: root.stop_tour()
    SwitchPageButton:
        id: next_but
        disabled: root.navigation_disabled or not root.next_text
        pos_hint: dict(right=0.939, top=root.navigation_pos_hint_y)
        size: self.texture_size[0] * 2.1, root.label_height
        font_size: root.font_height
        text: root.next_text
        on_release: root.next_page()
    Image:
        id: tap_pointer
        source: app.main_app.img_file('tap_pointer')
        allow_stretch: True
        opacity: 0.0
        pos: -999, -999
        size_hint: None, None
        size: 2 * (root.label_height * 1.89, )
    Label:
        pos_hint: dict(center_x=.5, center_y=.5)
        font_size: root.label_height
        color: app.font_color[:3] + [0.48 if app.main_app.debug else 0.0]
        text:
            "wid=" + str(root.explained_widget.__class__.__name__) + \
            " " + widget_page_id(root.explained_widget) + chr(10) + \
            "...=" + str(list(map(round, root.explained_pos))) + \
            " " + str(list(map(round, root.explained_size))) + chr(10) + \
            "tour=" + str(root.tour_instance.__class__.__name__) + chr(10) + \
            "page-id" + str(root.tour_instance.page_idx if root.tour_instance else "?") + "=" + \
            str(root.tour_instance.page_ids[root.tour_instance.page_idx] if root.tour_instance else "???") + chr(10) + \
            "title=" + root.title_text + chr(10) + \
            "page=" + root.page_text[:27] + chr(10) + \
            "tip=" + root.tip_text[:27] + chr(10) \
            or root.explained_widget or root.explained_size or root.explained_pos or root.tour_instance

<StopTourButton@ButtonBehavior+ReliefCanvas+Image>
    size_hint: None, None
    source: app.main_app.img_file(id_of_flow('close', 'popup'))
    button_ink: 0.999, 0.0, 0.0, 0.999
    relief_ellipse_inner_colors: relief_colors(app.font_color)
    relief_ellipse_inner_lines: round(self.height / 3.9)
    relief_ellipse_outer_colors: relief_colors(self.button_ink)
    relief_ellipse_outer_lines: round(self.height / 9.6)
    canvas.before:
        Color:
            rgba: self.button_ink
        Ellipse:
            pos: self.pos
            size: self.size

<SwitchPageButton@ButtonBehavior+ShadersMixin+ReliefCanvas+Label>
    opacity: 1.0 if self.text else 0.0
    color: app.font_color
    size_hint: None, None
    relief_ellipse_inner_colors: relief_colors(app.font_color)
    relief_ellipse_inner_lines: round(self.height / 9.6)
    relief_ellipse_inner_offset: -1
    canvas.before:
        Color:
            rgba: Window.clearcolor[:3] + [0.999 if self.text else 0.0]
        Ellipse:
            pos: self.pos
            size: self.size

<TourPageTexts@ReliefCanvas+ShadersMixin+BoxLayout>
    orientation: 'horizontal' if app.landscape else 'vertical'
    size_hint_y: None
    relief_square_outer_lines: int(max(self.y, Window.height - self.top) * 0.69)
    relief_square_inner_colors: relief_colors(app.font_color)
    relief_square_inner_offset: -1
    canvas.before:
        Color:
            rgba: 0.99, 0, 0, 0.369
        Rectangle:
            pos: self.pos
            size: self.size
