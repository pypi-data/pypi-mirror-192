[tox]
envlist = pep8,mypy-py{37,38,39,310},py{37,38,39,310},coverage,docs
minversion = 3.2.0
skipsdist = True

[testenv:py{38,39,310}]
setenv =
  VIRTUAL_ENV={envdir}
  PYTHONWARNINGS=default::DeprecationWarning,ignore:The distutils package is deprecated,ignore:The distutils.sysconfig module is deprecated,ignore:the imp module is deprecated,ignore:SelectableGroups dict interface is deprecated
usedevelop = False
install_command =
  pip install {opts} {packages}
deps =
  -r{toxinidir}/requirements.testenv.txt
allowlist_externals = mkdir
commands =
  mkdir -p test-results/
  # this differs from the usual setting (--numprocesses=auto) as we realised that running several processes might cause
  # some of the tests (those that read from and/or write to files) to fail in a non-deterministic fashion (Jedrzej Kaniewski)
  pytest --numprocesses=1 --junitxml=test-results/testenv-{envname}.xml {posargs} tests/unit


[testenv:py37]
setenv =
  VIRTUAL_ENV={envdir}
  PYTHONWARNINGS=default::DeprecationWarning,ignore:The distutils package is deprecated,ignore:The distutils.sysconfig module is deprecated,ignore:the imp module is deprecated,ignore:SelectableGroups dict interface is deprecated
usedevelop = False
install_command =
  pip install {opts} {packages}
deps =
  -r{toxinidir}/requirements.testenv37.txt
allowlist_externals = mkdir
commands =
  mkdir -p test-results/
  # this differs from the usual setting (--numprocesses=auto) as we realised that running several processes might cause
  # some of the tests (those that read from and/or write to files) to fail in a non-deterministic fashion (Jedrzej Kaniewski)
  pytest --numprocesses=1 --junitxml=test-results/testenv-{envname}.xml {posargs} tests/unit


[testenv:pep8]
deps =
  -r{toxinidir}/requirements.pep8.txt
commands = flake8

# Set flake8 configuration options which are used by the `flake8` command in [testenv:pep8]
[flake8]
# W503/W504 ignore wrap line before/after binary operator
ignore = W503, W504
per-file-ignores =
    # "exports" for nicer imports
    ./cinnaroll/__init__.py
    # tests that check if import fails or doesn't concisely
    ./tests/unit/test_cinnaroll_module_init.py:F401
show-source = True
max-line-length = 140
exclude = ./.*,build,dist,*egg,venv
import-order-style = pep8

[testenv:venv]
commands = {posargs}

[testenv:coverage]
description = "Check the test coverage of the code"
deps =
  -r{toxinidir}/requirements.coverage.txt
commands =
  coverage erase
  # Generates .coverage binary file, used as the source of truth for the subsequent reports
  coverage run --branch --include='cinnaroll/*' --omit='cinnaroll/tests/*' -m pytest tests/unit --junitxml=test-results/testenv-{envname}.xml
  # Prints a report to console
  coverage report
  # Saves a report to htmlcov/
  coverage html
  # Saves a report to coverage.xml (can be uploaded to Codecov from CI, as Codecov apparently does not accept .coverage binary files)
  coverage xml

[testenv:docs]
description = "Build documentation"
usedevelop=true
deps =
  -r{toxinidir}/requirements.docs.txt
commands =
  sphinx-build -W --keep-going -b html docs/source docs/html

[testenv:mypy]
allowlist_externals = tox
commands = tox -e "mypy-py{37,38,39,310}"
# No need to inherit deps from [testenv]
deps =

[testenv:mypy-py37]
deps =
  -r{toxinidir}/requirements.mypy37.txt
commands =
  mypy --config-file mypy.ini cinnaroll cli tests

[testenv:mypy-py{38,39,310}]
deps =
  -r{toxinidir}/requirements.mypy.txt
commands =
  mypy --config-file mypy.ini cinnaroll cli tests
