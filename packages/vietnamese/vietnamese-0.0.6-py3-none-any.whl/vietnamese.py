import re
import sys

patterns = {
    "TCVN3"        : [ r'\w­[¬íêîëì]|®[¸µ¹¶·Ê¾»Æ¼½ÌÑÎÏªÕÒÖÓÔÝ×ÞØÜãßäáâ«èåéæç¬íêîëìóïôñòøõùö]', 0],
    "VNI_WIN"      : [r'[öô][ùøïûõ]|oa[ëùøïûõ]|ñ[aoeuôö][äàáåãùøïûõ]', re.IGNORECASE],
    "VIQR"         : [r'u[\+\*]o[\+\*]|dd[aoe][\(\^~\'`]|[aoe]\^[~`\'\.\?]|[uo]\+[`\'~\.\?]|a\([\'`~\.\?]', re.IGNORECASE],
    "UNICODE"      : [r'[Ạ-ỹ]', 0],
    "VISCII"       : [r'\wß[½¾¶þ·Þ]|ð[áàÕäã¤í¢£ÆÇè©ë¨êª«®¬­íì¸ïîóò÷öõô¯°µ±²½¾¶þ·ÞúùøüûÑ×ñØ]', 0],
    "VPS_WIN"      : [r'\wÜ[Ö§©®ª«]|Ç[áàåäãÃí¢¥£¤èËÈëêÍíìÎÌïóòÕõôÓÒ¶°Ö§©®ª«úùøûÛÙØ¿º]', 0],
    "VIETWARE_F"   : [r'\w§[¥ìéíêë]|¢[ÀªÁ¶ºÊÛÂÆÃÄÌÑÍÎ£ÕÒÖÓÔÛØÜÙÚâßãàá¤çäèåæ¥ìéíêëòîóïñ÷ôøõ]', 0],
    "VIETWARE_X"   : [r'[áãä][úöûøù]|à[õòûóô]|[åæ][ïìüíî]', re.IGNORECASE]
# //		"BKHCM1"       : '/\wõ[ïðñôòó]|\s½[ÚÛÃÄÇÈÉÊÑÐíôóÒÓÔÕ]/u',
# //		"BKHCM2"       : '/\w[êöï][ëìåíî]|úû[áâåãä]|ù[æçåèé]/iu',
# //		"VNU"          : '/\wõ[çèéìêë]|\s½[?¡­¨¬µ¶·º¸¹¯°±´²³]/u',
# //		"COMB_UNICODE" : '/[̣́̀̉̃]/iu',
# //		"UTF8"         : '/(áº|á»)[¥¤§¦¬©¨«ª¯®±°·¶³²º½¼¾¿¡£¢]/ui',
# //		"ESC_UNICODE"  : '/&#\d\d\d\d;/iu',
}

class Converter:

    """Convert qua lai giua mot so bang ma cua Vietnam"""

    def __init__(self):
        """Khoi tao"""
        self.TCVN3 = ["Aµ", "A¸", "¢" , "A·", "EÌ", "EÐ", "£" , "I×", "IÝ", "Oß",
			"Oã", "¤" , "Oâ", "Uï", "Uó", "Yý", "µ" , "¸" , "©" , "·" ,
			"Ì" , "Ð" , "ª" , "×" , "Ý" , "ß" , "ã" , "«" , "â" , "ï" ,
			"ó" , "ý" , "¡" , "¨" , "§" , "®" , "IÜ", "Ü" , "Uò", "ò" ,
			"¥" , "¬" , "¦" , "­"  , "A¹", "¹" , "A¶", "¶" , "¢Ê", "Ê" ,
			"¢Ç", "Ç" , "¢È", "È" , "¢É", "É" , "¢Ë", "Ë" , "¡¾", "¾" ,
			"¡»", "»" , "¡¼", "¼" , "¡½", "½" , "¡Æ", "Æ" , "EÑ", "Ñ" ,
			"EÎ", "Î" , "EÏ", "Ï" , "£Õ", "Õ" , "£Ò", "Ò" , "£Ó", "Ó" ,
			"£Ô", "Ô" , "£Ö", "Ö" , "IØ", "Ø" , "IÞ", "Þ" , "Oä", "ä" ,
			"Oá", "á" , "¤è", "è" , "¤å", "å" , "¤æ", "æ" , "¤ç", "ç" ,
			"¤é", "é" , "¥í", "í" , "¥ê", "ê" , "¥ë", "ë" , "¥ì", "ì" ,
			"¥î", "î" , "Uô", "ô" , "Uñ", "ñ" , "¦ø", "ø" , "¦õ", "õ" ,
			"¦ö", "ö" , "¦÷", "÷" , "¦ù", "ù" , "Yú", "ú" , "Yþ", "þ" ,
			"Yû", "û" , "Yü", "ü" , "."]
            
        self.UNICODE = ["À", "Á", "Â", "Ã", "È", "É", "Ê", "Ì", "Í", "Ò",
			"Ó", "Ô", "Õ", "Ù", "Ú", "Ý", "à", "á", "â", "ã",
			"è", "é", "ê", "ì", "í", "ò", "ó", "ô", "õ", "ù",
			"ú", "ý", "Ă", "ă", "Đ", "đ", "Ĩ", "ĩ", "Ũ", "ũ",
			"Ơ", "ơ", "Ư", "ư", "Ạ", "ạ", "Ả", "ả", "Ấ", "ấ",
			"Ầ", "ầ", "Ẩ", "ẩ", "Ẫ", "ẫ", "Ậ", "ậ", "Ắ", "ắ",
			"Ằ", "ằ", "Ẳ", "ẳ", "Ẵ", "ẵ", "Ặ", "ặ", "Ẹ", "ẹ",
			"Ẻ", "ẻ", "Ẽ", "ẽ", "Ế", "ế", "Ề", "ề", "Ể", "ể",
			"Ễ", "ễ", "Ệ", "ệ", "Ỉ", "ỉ", "Ị", "ị", "Ọ", "ọ",
			"Ỏ", "ỏ", "Ố", "ố", "Ồ", "ồ", "Ổ", "ổ", "Ỗ", "ỗ",
			"Ộ", "ộ", "Ớ", "ớ", "Ờ", "ờ", "Ở", "ở", "Ỡ", "ỡ",
			"Ợ", "ợ", "Ụ", "ụ", "Ủ", "ủ", "Ứ", "ứ", "Ừ", "ừ",
			"Ử", "ử", "Ữ", "ữ", "Ự", "ự", "Ỳ", "ỳ", "Ỵ", "ỵ",
			"Ỷ", "ỷ", "Ỹ", "ỹ", "."]

        self.VIQR = ["A`" , "A'" , "A^" , "A~" , "E`" , "E'" , "E^" , "I`" , "I'" , "O`" ,
			"O'" , "O^" , "O~" , "U`" , "U'" , "Y'" , "a`" , "a'" , "a^" , "a~" ,
			"e`" , "e'" , "e^" , "i`" , "i'" , "o`" , "o'" , "o^" , "o~" , "u`" ,
			"u'" , "y'" , "A(" , "a(" , "DD" , "dd" , "I~" , "i~" , "U~" , "u~" ,
			"O+" , "o+" , "U+" , "u+" , "A." , "a." , "A?" , "a?" , "A^'", "a^'",
			"A^`", "a^`", "A^?", "a^?", "A^~", "a^~", "A^.", "a^.", "A('", "a('",
			"A(`", "a(`", "A(?", "a(?", "A(~", "a(~", "A(.", "a(.", "E." , "e." ,
			"E?" , "e?" , "E~" , "e~" , "E^'", "e^'", "E^`", "e^`", "E^?", "e^?",
			"E^~", "e^~", "E^.", "e^.", "I?" , "i?" , "I." , "i." , "O." , "o." ,
			"O?" , "o?" , "O^'", "o^'", "O^`", "o^`", "O^?", "o^?", "O^~", "o^~",
			"O^.", "o^.", "O+'", "o+'", "O+`", "o+`", "O+?", "o+?", "O+~", "o+~",
			"O+.", "o+.", "U." , "u." , "U?" , "u?" , "U+'", "u+'", "U+`", "u+`",
			"U+?", "u+?", "U+~", "u+~", "U+.", "u+.", "Y`" , "y`" , "Y." , "y." ,
			"Y?" , "y?" , "Y~" , "y~" , "\\."]

        self.VNI_WIN = ["AØ", "AÙ", "AÂ", "AÕ", "EØ", "EÙ", "EÂ", "Ì" , "Í" , "OØ",
			"OÙ", "OÂ", "OÕ", "UØ", "UÙ", "YÙ", "aø", "aù", "aâ", "aõ",
			"eø", "eù", "eâ", "ì" , "í" , "oø", "où", "oâ", "oõ", "uø",
			"uù", "yù", "AÊ", "aê", "Ñ" , "ñ" , "Ó" , "ó" , "UÕ", "uõ",
			"Ô" , "ô" , "Ö" , "ö" , "AÏ", "aï", "AÛ", "aû", "AÁ", "aá",
			"AÀ", "aà", "AÅ", "aå", "AÃ", "aã", "AÄ", "aä", "AÉ", "aé",
			"AÈ", "aè", "AÚ", "aú", "AÜ", "aü", "AË", "aë", "EÏ", "eï",
			"EÛ", "eû", "EÕ", "eõ", "EÁ", "eá", "EÀ", "eà", "EÅ", "eå",
			"EÃ", "eã", "EÄ", "eä", "Æ" , "æ" , "Ò" , "ò" , "OÏ", "oï",
			"OÛ", "oû", "OÁ", "oá", "OÀ", "oà", "OÅ", "oå", "OÃ", "oã",
			"OÄ", "oä", "ÔÙ", "ôù", "ÔØ", "ôø", "ÔÛ", "ôû", "ÔÕ", "ôõ",
			"ÔÏ", "ôï", "UÏ", "uï", "UÛ", "uû", "ÖÙ", "öù", "ÖØ", "öø",
			"ÖÛ", "öû", "ÖÕ", "öõ", "ÖÏ", "öï", "YØ", "yø", "Î" , "î" ,
			"YÛ", "yû", "YÕ", "yõ", "."]

        self.VISCII = ["À", "Á", "Â", "Ã", "È", "É", "Ê", "Ì", "Í", "Ò",
			"Ó", "Ô", "õ", "Ù", "Ú", "Ý", "à", "á", "â", "ã",
			"è", "é", "ê", "ì", "í", "ò", "ó", "ô", "õ", "ù",
			"ú", "ý", "Å", "å", "Ð", "ð", "Î", "î", "", "û",
			"´", "½", "¿", "ß", "€", "Õ", "Ä", "ä", "„", "¤",
			"…", "¥", "†", "¦", "ç", "ç", "‡", "§", "", "í",
			"‚", "¢", "Æ", "Æ", "Ç", "Ç", "ƒ", "£", "‰", "©",
			"Ë", "ë", "ˆ", "¨", "Š", "ª", "‹", "«", "Œ", "¬",
			"", "­", "Ž", "®", "›", "ï", "˜", "¸", "š", "÷",
			"™", "ö", "", "¯", "", "°", "‘", "±", "’", "²",
			"“", "µ", "•", "¾", "–", "¶", "—", "·", "³", "Þ",
			"”", "þ", "ž", "ø", "œ", "ü", "º", "Ñ", "»", "×",
			"¼", "Ø", "ÿ", "æ", "¹", "ñ", "Ÿ", "Ï", "Ü", "Ü",
			"Ö", "Ö", "Û", "Û", "."]

        self.VPS_WIN = ["à", "Á", "Â", "‚", "×", "É", "Ê", "µ", "´", "¼",
			"¹", "Ô", "õ", "¨", "Ú", "Ý", "à", "á", "â", "ã",
			"è", "é", "ê", "ì", "í", "ò", "ó", "ô", "õ", "ù",
			"ú", "š", "ˆ", "æ", "ñ", "Ç", "¸", "ï", "¬", "Û",
			"÷", "Ö", "Ð", "Ü", "å", "å", "", "ä", "ƒ", "Ã",
			"„", "À", "…", "Ä", "Å", "Å", "Æ", "Æ", "", "í",
			"¢", "¢", "£", "£", "¤", "¤", "¥", "¥", "Ë", "Ë",
			"Þ", "È", "þ", "ë", "", "‰", "“", "Š", "”", "‹",
			"•", "Í", "Œ", "Œ", "·", "Ì", "Î", "Î", "†", "†",
			"½", "Õ", "–", "Ó", "—", "Ò", "˜", "°", "™", "‡",
			"¶", "¶", "", "§", "©", "©", "Ÿ", "ª", "¦", "«",
			"®", "®", "ø", "ø", "Ñ", "û", "­", "Ù", "¯", "Ø",
			"±", "º", "»", "»", "¿", "¿", "²", "ÿ", "œ", "œ",
			"›", "›", "Ï", "Ï", "."]

        self.VIETWARE_X = ["AÌ", "AÏ", "Á", "AÎ", "EÌ", "EÏ", "Ã", "Ç", "Ê", "OÌ",
			"OÏ", "Ä", "OÎ", "UÌ", "UÏ", "YÏ", "aì", "aï", "á", "aî",
			"eì", "eï", "ã", "ç", "ê", "oì", "oï", "ä", "oî", "uì",
			"uï", "yï", "À", "à", "Â", "â", "É", "é", "UÎ", "uî",
			"Å", "å", "Æ", "æ", "AÛ", "aû", "AÍ", "aí", "ÁÚ", "áú",
			"ÁÖ", "áö", "ÁØ", "áø", "ÁÙ", "áù", "ÁÛ", "áû", "ÀÕ", "àõ",
			"ÀÒ", "àò", "ÀÓ", "àó", "ÀÔ", "àô", "ÀÛ", "àû", "EÛ", "eû",
			"EÍ", "eí", "EÎ", "eî", "ÃÚ", "ãú", "ÃÖ", "ãö", "ÃØ", "ãø",
			"ÃÙ", "ãù", "ÃÛ", "ãû", "È", "è", "Ë", "ë", "OÜ", "oü",
			"OÍ", "oí", "ÄÚ", "äú", "ÄÖ", "äö", "ÄØ", "äø", "ÄÙ", "äù",
			"ÄÜ", "äü", "ÅÏ", "åï", "ÅÌ", "åì", "ÅÍ", "åí", "ÅÎ", "åî",
			"ÅÜ", "åü", "UÛ", "uû", "UÍ", "uí", "ÆÏ", "æï", "ÆÌ", "æì",
			"ÆÍ", "æí", "ÆÎ", "æî", "ÆÛ", "æû", "YÌ", "yì", "YÑ", "yñ",
			"YÍ", "yí", "YÎ", "yî", "."]

        self.VIETWARE_F = ["", " ", "", "", "¬", "¯", "", "¸", "»", "¿",
			"â", "", "á", "î", "ò", "ü", "ª", "À", "¡", "º",
			"Ì", "Ï", "£", "Ø", "Û", "ß", "â", "¤", "á", "î",
			"ò", "ü", "", "", "", "¢", "Ú", "Ú", "ñ", "ñ",
			"", "¥", "", "§", "Á", "Á", "", "¶", "Ê", "Ê",
			"Ç", "Ç", "¨", "È", "©", "É", "«", "Ë", "Å", "Å",
			"Â", "Â", "Ã", "Ã", "Ä", "Ä", "¦", "Æ", "±", "Ñ",
			"­", "Í", "®", "Î", "µ", "Õ", "²", "Ò", "³", "Ó",
			"´", "Ô", "Ö", "Ö", "¹", "Ù", "¼", "Ü", "ã", "ã",
			"à", "à", "ç", "ç", "ä", "ä", "å", "å", "æ", "æ",
			"è", "è", "ì", "ì", "é", "é", "ê", "ê", "ë", "ë",
			"í", "í", "ó", "ó", "ï", "ï", "×", "÷", "ô", "ô",
			"õ", "õ", "ö", "ö", "ø", "ø", "ù", "ù", "ÿ", "ÿ",
			"ú", "ú", "û", "û", "."]
            
        pass

    def convert(self, str_original, target_charset = "UNICODE", source_charset = None):
        
        if(source_charset == None):
            source_charset = self.detectCharset(str_original)

        if(source_charset == None):
            raise TypeError("Can not get charset of str_original")

        source_charset = getattr(self,source_charset)
        target_charset = getattr(self,target_charset)

        map_length = len(source_charset)
        for number in range(map_length):
            str_original = str_original.replace(source_charset[number], "::" + str(number) + "::")

        for number in range(map_length):
            str_original = str_original.replace("::" + str(number) + "::", target_charset[number])

        return str_original

    def detectCharset(self, str_input):
        for pattern in patterns:
            match = re.search(patterns[pattern][0], str_input, patterns[pattern][1])
            if(match != None):
                return pattern
        return None

def normalize(input_str):
  converter = Converter()
  target_charset = "UNICODE"
  source_charset = None
  str_original = input_str
  return converter.convert(str_original, target_charset, source_charset)

def get_consonants():
  return ['b', 'c', 'd', 'đ', 'g', 'h', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'x', 'ch', 'gh', 'kh', 'ng', 'ngh', 'nh', 'ph', 'th', 'tr', 'gi', 'qu']
def get_vowels():
  return ['a', 'ă', 'â', 'e', 'ê', 'i', 'o', 'ô', 'ơ', 'u', 'ư', 'y']
def get_rhymes():
  return ['iễm', 'ẵn', 'at', 'át', 'óm', 'uẩng', 'oăc', 'uỗi', 'íp', 'ên', 'ã', 'iệp', 'õi', 'ỉn', 'yền', 'ố', 'ởn', 'oăng', 'ằm', 'àm', 'ất', 'òe', 'ừ', 'ăm', 'oat', 'ảu', 'yếm', 'ện', 'ậy', 'ến', 'ườm', 'ut', 'ẫu', 'iếp', 'ắp', 'ẹ', 'ím', 'ẹn', 'uốc', 'ẳng', 'ê', 'oàm', 'ấn', 'ểnh', 'oăt', 'úa', 'ưởu', 'ụm', 'òong', 'ết', 'ặp', 'uỵnh', 'uyu', 'ôi', 'uốn', 'uổng', 'âm', 'oặm', 'ử', 'ầng', 'oắn', 'ướn', 'ượng', 'ươt', 'ác', 'ập', 'ọt', 'uần', 'uât', 'ừa', 'yểu', 'ẫy', 'ặng', 'ướt', 'oẵng', 'uýa', 'oèn', 'ín', 'ãi', 'ấu', 'uých', 'ich', 'úc', 'ỡn', 'oào', 'oẽo', 'uyền', 'ảng', 'ằn', 'ũa', 'uề', 'ấng', 'ật', 'ướu', 'ọa', 'iển', 'oắm', 'õm', 'ai', 'y', 'ìu', 'ởm', 'oằng', 'èng', 'oảnh', 'ũm', 'ỏa', 'oắng', 'ưm', 'uỵp', 'àng', 'ư', 'oeo', 'ều', 'en', 'ấm', 'ấy', 'ệnh', 'ỗm', 'yềng', 'oặt', 'ỡm', 'oéo', 'ỏn', 'uệ', 'ỳ', 'yếu', 'ôc', 'ỗng', 'ún', 'ĩn', 'ia', 'óp', 'oãy', 'ắt', 'oc', 'óa', 'ời', 'iến', 'uầy', 'ĩa', 'iền', 'ùi', 'ốn', 'up', 'um', 'ụt', 'iệt', 'ao', 'ủ', 'oẳng', 'oảo', 'ặn', 'ụng', 'uấn', 'iêng', 'uệch', 'ẳm', 'úi', 'ợp', 'op', 'ịt', 'iệc', 'í', 'inh', 'ọi', 'âc', 'áp', 'òi', 'ì', 'oãi', 'ươi', 'ẩm', 'ịch', 'áu', 'uồm', 'ịn', 'oày', 'uồng', 'ứa', 'óong', 'ánh', 'ịp', 'ém', 'uổi', 'òm', 'ột', 'uâng', 'ưởi', 'ối', 'ếch', 'ẳn', 'ỏm', 'ạo', 'oặng', 'ọm', 'ẻ', 'yển', 'ựng', 'yễng', 'ệ', 'ỏng', 'uậy', 'ển', 'em', 'ải', 'ec', 'òn', 'an', 'ốt', 'oái', 'oát', 'ích', 'iểm', 'ủng', 'ât', 'oặc', 'yêng', 'ỹ', 'ừu', 'eo', 'ồ', 'ũ', 'ụy', 'ẩy', 'uêch', 'uỷnh', 'oánh', 'yểng', 'uấng', 'ệu', 'oãm', 'ẩng', 'oen', 'ớt', 'uỗn', 'uênh', 'oèo', 'uýu', 'u', 'uẩy', 'ếp', 'ễnh', 'ứ', 'iếu', 'uỵt', 'ây', 'ẹm', 'ườn', 'uồi', 'uẫy', 'uểnh', 'oẽn', 'uận', 'uầng', 'úm', 'ía', 'in', 'ũy', 'i', 'õa', 'ảnh', 'ẫn', 'ạc', 'uỹa', 'ội', 'ược', 'uỗng', 'ửa', 'uễ', 'oạn', 'ạm', 'ám', 'è', 'ảo', 'ệt', 'ơm', 'ài', 'oáng', 'ac', 'ũi', 'ờn', 'ừm', 'oạt', 'ọoc', 'uệnh', 'yềm', 'uộc', 'ịm', 'ôp', 'yện', 'uốm', 'ỏi', 'ềm', 'ỉ', 'oạc', 'ản', 'uỷa', 'ộp', 'ề', 'ới', 'úng', 'ước', 'yêm', 'ùn', 'ân', 'ấp', 'ảm', 'iếng', 'uỵn', 'im', 'ẻng', 'ại', 'oảm', 'ốp', 'ăp', 'yểm', 'ĩu', 'ùy', 'ưu', 'oàng', 'ênh', 'uyển', 'uôt', 'am', 'ỗ', 'ủn', 'ụi', 'oan', 'ach', 'ươn', 'oẻo', 'iềm', 'oãnh', 'ụp', 'yến', 'èm', 'ững', 'ần', 'ắc', 'ắn', 'õ', 'iêu', 'ua', 'ướm', 'oạch', 'ưới', 'oản', 'ôt', 'oán', 'ốm', 'ổi', 'uội', 'iết', 'ượm', 'uôn', 'óc', 'ửi', 'ụa', 'êt', 'ịu', 'ý', 'ẻm', 'ành', 'un', 'ãnh', 'iều', 'uyêt', 'ứu', 'áng', 'au', 'ẵm', 'uỳu', 'oáp', 'ớp', 'ộn', 'ỗi', 'ưỡu', 'iệm', 'ọ', 'ữu', 'ười', 'ìa', 'ep', 'uyn', 'ốc', 'yêu', 'ó', 'ường', 'ổn', 'uỵa', 'ồng', 'oẻn', 'oạng', 'yễn', 'ỵ', 'ả', 'et', 'ỉa', 'uyệt', 'õong', 'uộn', 'ẽn', 'ếnh', 'iểu', 'uôm', 'uỳa', 'ào', 'ỉm', 'ưởng', 'ang', 'óng', 'ịa', 'uyp', 'ợm', 'yếng', 'ầm', 'ỷ', 'á', 'ưỡn', 'ưt', 'ướng', 'uyễn', 'uỳnh', 'ữ', 'èo', 'ệp', 'úy', 'áy', 'ưn', 'êch', 'uyến', 'ạp', 'uyên', 'ìm', 'oão', 'êm', 'oăm', 'yều', 'anh', 'ẽm', 'oạnh', 'ái', 'oét', 'ị', 'iệu', 'uộm', 'ửu', 'oáy', 'oac', 'ỏ', 'ạu', 'iểng', 'ủm', 'ình', 'oẹo', 'ượi', 'ét', 'iếm', 'uế', 'iện', 'ằng', 'uynh', 'ẹp', 'ôm', 'óe', 'uyện', 'uễnh', 'uốt', 'ay', 'âng', 'uýnh', 'oang', 'yết', 'àn', 'uộng', 'âu', 'ộ', 'oet', 'ượt', 'uỷu', 'ơi', 'yêt', 'ảy', 'ày', 'iu', 'oao', 'ương', 'uẫn', 'én', 'oanh', 'ưi', 'ươm', 'ặm', 'yệt', 'uồn', 'ồn', 'ẹc', 'ạy', 'èn', 'ứng', 'ưỡi', 'oạm', 'oẵm', 'ưỡng', 'uôi', 'ỡ', 'ườ', 'yễu', 'ờm', 'oáo', 'ờ', 'ú', 'oài', 'ù', 'ượ', 'uếch', 'oai', 'a', 'yệm', 'ách', 'oạp', 'oay', 'ẹt', 'ép', 'òa', 'ươp', 'oẵn', 'ịnh', 'ạ', 'éng', 'oãng', 'yên', 'ượu', 'ệch', 'ặc', 'ính', 'oe', 'oap', 'ạch', 'ận', 'uýn', 'ậc', 'ông', 'ế', 'uột', 'uôc', 'ĩ', 'iệng', 'ắm', 'ựa', 'ẫng', 'ỉu', 'ui', 'ụn', 'é', 'ởi', 'uếnh', 'ạng', 'ểu', 'oãn', 'án', 'om', 'éo', 'iềng', 'oám', 'íu', 'oặn', 'oẳm', 'ền', 'oạo', 'ẽ', 'ọng', 'it', 'ọn', 'ựt', 'ừng', 'ăng', 'oam', 'ũn', 'ửng', 'uê', 'uýp', 'uy', 'ớn', 'iêm', 'on', 'uất', 'ooc', 'ẵng', 'ít', 'ổ', 'yệu', 'uối', 'iễn', 'ĩnh', 'ậu', 'uỹn', 'ọc', 'ùm', 'ạn', 'ẻo', 'ìn', 'ớ', 'ục', 'yệng', 'oach', 'uỳn', 'oành', 'uật', 'ươu', 'uậng', 'óoc', 'ầu', 'iêc', 'o', 'õn', 'ơ', 'uyt', 'ễu', 'uỵch', 'iễng', 'à', 'ủy', 'uỷn', 'ẩu', 'ớm', 'uỹnh', 'oăn', 'uân', 'oẹn', 'ậng', 'ão', 'ếm', 'ệm', 'ot', 'ườu', 'ẹo', 'ụ', 'oàn', 'oằm', 'ổm', 'uể', 'ôn', 'ỏong', 'ể', 'ủa', 'iễu', 'ơt', 'ướp', 'oẳn', 'ong', 'oách', 'ạnh', 'uỗm', 'êp', 'ễ', 'âp', 'ực', 'ộm', 'ỏe', 'ãn', 'õe', 'ẻn', 'ắng', 'ip', 'ổng', 'yễm', 'áo', 'oắc', 'uềnh', 'uych', 'oi', 'ỗn', 'uẩn', 'iếc', 'ượn', 'oa', 'ưa', 'ươ', 'uỹu', 'ọe', 'uya', 'uẫng', 'oằn', 'oải', 'ếu', 'ậm', 'ap', 'ợi', 'ộng', 'ẩn', 'ộc', 'ẽo', 'oác', 'ãm', 'ăn', 'e', 'oong', 'ở', 'uống', 'ãng', 'oẹt', 'ạt', 'ợt', 'uông', 'iêt', 'út', 'ấc', 'ướ', 'uýt', 'ỉnh', 'ầy', 'ồi', 'oại', 'ựu', 'uyết', 'ăt', 'òng', 'ợ', 'ơn', 'ẫm', 'õng', 'iêp', 'ưc', 'ô', 'ưng', 'ơp', 'ùa', 'ứt', 'oảy', 'eng', 'ồm', 'ăc', 'êu', 'ỡi', 'oén', 'ùng', 'ưỡ', 'ĩm', 'ón', 'ống', 'oạy', 'oóc', 'ói', 'ũng', 'uỵu', 'ự', 'ươc', 'ức', 'ợn', 'ọong', 'uây', 'oảng', 'ềnh', 'ò', 'ọp', 'uc', 'ữa', 'ung', 'úp', 'uấy', 'àu', 'oắt', 'ủi', 'ót', 'iên', 'ượp', 'éc', 'ặt', 'ãy']
