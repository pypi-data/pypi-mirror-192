"""
    MetaFab API

    Complete MetaFab API references and guides can be found at: https://trymetafab.com  # noqa: E501

    The version of the OpenAPI document: 1.5.1
    Contact: metafabproject@gmail.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from metafab_python.api_client import ApiClient, Endpoint as _Endpoint
from metafab_python.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from metafab_python.model.batch_mint_collection_items_request import BatchMintCollectionItemsRequest
from metafab_python.model.batch_transfer_collection_items_request import BatchTransferCollectionItemsRequest
from metafab_python.model.burn_collection_item_request import BurnCollectionItemRequest
from metafab_python.model.collection_item import CollectionItem
from metafab_python.model.create_collection200_response import CreateCollection200Response
from metafab_python.model.create_collection_item_request import CreateCollectionItemRequest
from metafab_python.model.create_collection_request import CreateCollectionRequest
from metafab_python.model.get_collections200_response_inner import GetCollections200ResponseInner
from metafab_python.model.grant_collection_role_request import GrantCollectionRoleRequest
from metafab_python.model.mint_collection_item_request import MintCollectionItemRequest
from metafab_python.model.revoke_collection_role_request import RevokeCollectionRoleRequest
from metafab_python.model.set_collection_approval_request import SetCollectionApprovalRequest
from metafab_python.model.set_collection_item_timelock_request import SetCollectionItemTimelockRequest
from metafab_python.model.transaction_model import TransactionModel
from metafab_python.model.transfer_collection_item_request import TransferCollectionItemRequest


class ItemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.batch_mint_collection_items_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/batchMints',
                'operation_id': 'batch_mint_collection_items',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'batch_mint_collection_items_request',
                ],
                'required': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'batch_mint_collection_items_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'batch_mint_collection_items_request':
                        (BatchMintCollectionItemsRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'batch_mint_collection_items_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.batch_transfer_collection_items_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/batchTransfers',
                'operation_id': 'batch_transfer_collection_items',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'batch_transfer_collection_items_request',
                ],
                'required': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'batch_transfer_collection_items_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'batch_transfer_collection_items_request':
                        (BatchTransferCollectionItemsRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'batch_transfer_collection_items_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.burn_collection_item_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}/burns',
                'operation_id': 'burn_collection_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'burn_collection_item_request',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'burn_collection_item_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'burn_collection_item_request':
                        (BurnCollectionItemRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'burn_collection_item_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_collection_endpoint = _Endpoint(
            settings={
                'response_type': (CreateCollection200Response,),
                'auth': [],
                'endpoint_path': '/v1/collections',
                'operation_id': 'create_collection',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'create_collection_request',
                ],
                'required': [
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'create_collection_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'create_collection_request':
                        (CreateCollectionRequest,),
                },
                'attribute_map': {
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'create_collection_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_collection_item_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items',
                'operation_id': 'create_collection_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'create_collection_item_request',
                ],
                'required': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'create_collection_item_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'create_collection_item_request':
                        (CreateCollectionItemRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'create_collection_item_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_collection_approval_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/approvals',
                'operation_id': 'get_collection_approval',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'operator_address',
                    'address',
                    'wallet_id',
                ],
                'required': [
                    'collection_id',
                    'operator_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'operator_address':
                        (str,),
                    'address':
                        (str,),
                    'wallet_id':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'operator_address': 'operatorAddress',
                    'address': 'address',
                    'wallet_id': 'walletId',
                },
                'location_map': {
                    'collection_id': 'path',
                    'operator_address': 'query',
                    'address': 'query',
                    'wallet_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_item_endpoint = _Endpoint(
            settings={
                'response_type': (CollectionItem,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}',
                'operation_id': 'get_collection_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_item_balance_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}/balances',
                'operation_id': 'get_collection_item_balance',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                    'address',
                    'wallet_id',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                    'address':
                        (str,),
                    'wallet_id':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                    'address': 'address',
                    'wallet_id': 'walletId',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                    'address': 'query',
                    'wallet_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_item_balances_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (int,)},),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/balances',
                'operation_id': 'get_collection_item_balances',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'address',
                    'wallet_id',
                ],
                'required': [
                    'collection_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'address':
                        (str,),
                    'wallet_id':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'address': 'address',
                    'wallet_id': 'walletId',
                },
                'location_map': {
                    'collection_id': 'path',
                    'address': 'query',
                    'wallet_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_item_supplies_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (int,)},),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/supplies',
                'operation_id': 'get_collection_item_supplies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                ],
                'required': [
                    'collection_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                },
                'location_map': {
                    'collection_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_item_supply_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}/supplies',
                'operation_id': 'get_collection_item_supply',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                    'address',
                    'wallet_id',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                    'address':
                        (str,),
                    'wallet_id':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                    'address': 'address',
                    'wallet_id': 'walletId',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                    'address': 'query',
                    'wallet_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_item_timelock_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}/timelocks',
                'operation_id': 'get_collection_item_timelock',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_items_endpoint = _Endpoint(
            settings={
                'response_type': ([CollectionItem],),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items',
                'operation_id': 'get_collection_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                ],
                'required': [
                    'collection_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                },
                'location_map': {
                    'collection_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collection_role_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/roles',
                'operation_id': 'get_collection_role',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'role',
                    'address',
                    'wallet_id',
                ],
                'required': [
                    'collection_id',
                    'role',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'role':
                        (str,),
                    'address':
                        (str,),
                    'wallet_id':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'role': 'role',
                    'address': 'address',
                    'wallet_id': 'walletId',
                },
                'location_map': {
                    'collection_id': 'path',
                    'role': 'query',
                    'address': 'query',
                    'wallet_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_collections_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCollections200ResponseInner],),
                'auth': [],
                'endpoint_path': '/v1/collections',
                'operation_id': 'get_collections',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_game_key',
                ],
                'required': [
                    'x_game_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_game_key':
                        (str,),
                },
                'attribute_map': {
                    'x_game_key': 'X-Game-Key',
                },
                'location_map': {
                    'x_game_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.grant_collection_role_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/roles',
                'operation_id': 'grant_collection_role',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'grant_collection_role_request',
                ],
                'required': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'grant_collection_role_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'grant_collection_role_request':
                        (GrantCollectionRoleRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'grant_collection_role_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.mint_collection_item_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}/mints',
                'operation_id': 'mint_collection_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'mint_collection_item_request',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'mint_collection_item_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'mint_collection_item_request':
                        (MintCollectionItemRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'mint_collection_item_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.revoke_collection_role_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/roles',
                'operation_id': 'revoke_collection_role',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'revoke_collection_role_request',
                ],
                'required': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'revoke_collection_role_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'revoke_collection_role_request':
                        (RevokeCollectionRoleRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'revoke_collection_role_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_collection_approval_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/approvals',
                'operation_id': 'set_collection_approval',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'set_collection_approval_request',
                ],
                'required': [
                    'collection_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'set_collection_approval_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'set_collection_approval_request':
                        (SetCollectionApprovalRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'set_collection_approval_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_collection_item_timelock_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}/timelocks',
                'operation_id': 'set_collection_item_timelock',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'set_collection_item_timelock_request',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'set_collection_item_timelock_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'set_collection_item_timelock_request':
                        (SetCollectionItemTimelockRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'set_collection_item_timelock_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_collection_item_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [],
                'endpoint_path': '/v1/collections/{collectionId}/items/{collectionItemId}/transfers',
                'operation_id': 'transfer_collection_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'transfer_collection_item_request',
                ],
                'required': [
                    'collection_id',
                    'collection_item_id',
                    'x_authorization',
                    'x_wallet_decrypt_key',
                    'transfer_collection_item_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'collection_item_id':
                        (float,),
                    'x_authorization':
                        (str,),
                    'x_wallet_decrypt_key':
                        (str,),
                    'transfer_collection_item_request':
                        (TransferCollectionItemRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collectionId',
                    'collection_item_id': 'collectionItemId',
                    'x_authorization': 'X-Authorization',
                    'x_wallet_decrypt_key': 'X-Wallet-Decrypt-Key',
                },
                'location_map': {
                    'collection_id': 'path',
                    'collection_item_id': 'path',
                    'x_authorization': 'header',
                    'x_wallet_decrypt_key': 'header',
                    'transfer_collection_item_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def batch_mint_collection_items(
        self,
        collection_id,
        x_authorization,
        x_wallet_decrypt_key,
        batch_mint_collection_items_request,
        **kwargs
    ):
        """Batch mint collection items  # noqa: E501

        Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_mint_collection_items(collection_id, x_authorization, x_wallet_decrypt_key, batch_mint_collection_items_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            x_authorization (str): The `secretKey` of the authenticating game.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
            batch_mint_collection_items_request (BatchMintCollectionItemsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['batch_mint_collection_items_request'] = \
            batch_mint_collection_items_request
        return self.batch_mint_collection_items_endpoint.call_with_http_info(**kwargs)

    def batch_transfer_collection_items(
        self,
        collection_id,
        x_authorization,
        x_wallet_decrypt_key,
        batch_transfer_collection_items_request,
        **kwargs
    ):
        """Batch transfer collection items  # noqa: E501

        Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_transfer_collection_items(collection_id, x_authorization, x_wallet_decrypt_key, batch_transfer_collection_items_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            x_authorization (str): The `secretKey` of a specific game or the `accessToken` of a specific player.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
            batch_transfer_collection_items_request (BatchTransferCollectionItemsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['batch_transfer_collection_items_request'] = \
            batch_transfer_collection_items_request
        return self.batch_transfer_collection_items_endpoint.call_with_http_info(**kwargs)

    def burn_collection_item(
        self,
        collection_id,
        collection_item_id,
        x_authorization,
        x_wallet_decrypt_key,
        burn_collection_item_request,
        **kwargs
    ):
        """Burn collection item  # noqa: E501

        Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.burn_collection_item(collection_id, collection_item_id, x_authorization, x_wallet_decrypt_key, burn_collection_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.
            x_authorization (str): The `secretKey` of a specific game or the `accessToken` of a specific player.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
            burn_collection_item_request (BurnCollectionItemRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['burn_collection_item_request'] = \
            burn_collection_item_request
        return self.burn_collection_item_endpoint.call_with_http_info(**kwargs)

    def create_collection(
        self,
        x_authorization,
        x_wallet_decrypt_key,
        create_collection_request,
        **kwargs
    ):
        """Create collection  # noqa: E501

        Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection(x_authorization, x_wallet_decrypt_key, create_collection_request, async_req=True)
        >>> result = thread.get()

        Args:
            x_authorization (str): The `secretKey` of the authenticating game.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
            create_collection_request (CreateCollectionRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateCollection200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['create_collection_request'] = \
            create_collection_request
        return self.create_collection_endpoint.call_with_http_info(**kwargs)

    def create_collection_item(
        self,
        collection_id,
        x_authorization,
        x_wallet_decrypt_key,
        create_collection_item_request,
        **kwargs
    ):
        """Create collection item  # noqa: E501

        Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection_item(collection_id, x_authorization, x_wallet_decrypt_key, create_collection_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            x_authorization (str): The `secretKey` of the authenticating game.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
            create_collection_item_request (CreateCollectionItemRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['create_collection_item_request'] = \
            create_collection_item_request
        return self.create_collection_item_endpoint.call_with_http_info(**kwargs)

    def get_collection_approval(
        self,
        collection_id,
        operator_address,
        **kwargs
    ):
        """Get collection approval  # noqa: E501

        Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_approval(collection_id, operator_address, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            operator_address (str): A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.

        Keyword Args:
            address (str): A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.. [optional]
            wallet_id (str): Any wallet id within the MetaFab platform.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['operator_address'] = \
            operator_address
        return self.get_collection_approval_endpoint.call_with_http_info(**kwargs)

    def get_collection_item(
        self,
        collection_id,
        collection_item_id,
        **kwargs
    ):
        """Get collection item  # noqa: E501

        Returns a metadata object for the provided collectionItemId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_item(collection_id, collection_item_id, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CollectionItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        return self.get_collection_item_endpoint.call_with_http_info(**kwargs)

    def get_collection_item_balance(
        self,
        collection_id,
        collection_item_id,
        **kwargs
    ):
        """Get collection item balance  # noqa: E501

        Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_item_balance(collection_id, collection_item_id, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.

        Keyword Args:
            address (str): A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.. [optional]
            wallet_id (str): Any wallet id within the MetaFab platform.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        return self.get_collection_item_balance_endpoint.call_with_http_info(**kwargs)

    def get_collection_item_balances(
        self,
        collection_id,
        **kwargs
    ):
        """Get collection item balances  # noqa: E501

        Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_item_balances(collection_id, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.

        Keyword Args:
            address (str): A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.. [optional]
            wallet_id (str): Any wallet id within the MetaFab platform.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (int,)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        return self.get_collection_item_balances_endpoint.call_with_http_info(**kwargs)

    def get_collection_item_supplies(
        self,
        collection_id,
        **kwargs
    ):
        """Get collection item supplies  # noqa: E501

        Returns the currency circulating supply of all collection items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_item_supplies(collection_id, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (int,)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        return self.get_collection_item_supplies_endpoint.call_with_http_info(**kwargs)

    def get_collection_item_supply(
        self,
        collection_id,
        collection_item_id,
        **kwargs
    ):
        """Get collection item supply  # noqa: E501

        Returns the current circulating supply of the provided collectionItemId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_item_supply(collection_id, collection_item_id, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.

        Keyword Args:
            address (str): A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.. [optional]
            wallet_id (str): Any wallet id within the MetaFab platform.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        return self.get_collection_item_supply_endpoint.call_with_http_info(**kwargs)

    def get_collection_item_timelock(
        self,
        collection_id,
        collection_item_id,
        **kwargs
    ):
        """Get collection item timelock  # noqa: E501

        Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_item_timelock(collection_id, collection_item_id, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        return self.get_collection_item_timelock_endpoint.call_with_http_info(**kwargs)

    def get_collection_items(
        self,
        collection_id,
        **kwargs
    ):
        """Get collection items  # noqa: E501

        Returns all collection items as an array of metadata objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_items(collection_id, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [CollectionItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        return self.get_collection_items_endpoint.call_with_http_info(**kwargs)

    def get_collection_role(
        self,
        collection_id,
        role,
        **kwargs
    ):
        """Get collection role  # noqa: E501

        Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_role(collection_id, role, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            role (str): A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`

        Keyword Args:
            address (str): A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.. [optional]
            wallet_id (str): Any wallet id within the MetaFab platform.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['role'] = \
            role
        return self.get_collection_role_endpoint.call_with_http_info(**kwargs)

    def get_collections(
        self,
        x_game_key,
        **kwargs
    ):
        """Get collections  # noqa: E501

        Returns an array of active item collections for the game associated with the provided `X-Game-Key`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collections(x_game_key, async_req=True)
        >>> result = thread.get()

        Args:
            x_game_key (str): The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCollections200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['x_game_key'] = \
            x_game_key
        return self.get_collections_endpoint.call_with_http_info(**kwargs)

    def grant_collection_role(
        self,
        collection_id,
        x_authorization,
        x_wallet_decrypt_key,
        grant_collection_role_request,
        **kwargs
    ):
        """Grant collection role  # noqa: E501

        Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.grant_collection_role(collection_id, x_authorization, x_wallet_decrypt_key, grant_collection_role_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            x_authorization (str): The `secretKey` of a specific game or the `accessToken` of a specific player.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
            grant_collection_role_request (GrantCollectionRoleRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['grant_collection_role_request'] = \
            grant_collection_role_request
        return self.grant_collection_role_endpoint.call_with_http_info(**kwargs)

    def mint_collection_item(
        self,
        collection_id,
        collection_item_id,
        x_authorization,
        x_wallet_decrypt_key,
        mint_collection_item_request,
        **kwargs
    ):
        """Mint collection item  # noqa: E501

        Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mint_collection_item(collection_id, collection_item_id, x_authorization, x_wallet_decrypt_key, mint_collection_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.
            x_authorization (str): The `secretKey` of the authenticating game.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
            mint_collection_item_request (MintCollectionItemRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['mint_collection_item_request'] = \
            mint_collection_item_request
        return self.mint_collection_item_endpoint.call_with_http_info(**kwargs)

    def revoke_collection_role(
        self,
        collection_id,
        x_authorization,
        x_wallet_decrypt_key,
        revoke_collection_role_request,
        **kwargs
    ):
        """Revoke collection role  # noqa: E501

        Revokes the provided role for the collection to the provided address or address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_collection_role(collection_id, x_authorization, x_wallet_decrypt_key, revoke_collection_role_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            x_authorization (str): The `secretKey` of a specific game or the `accessToken` of a specific player.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
            revoke_collection_role_request (RevokeCollectionRoleRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['revoke_collection_role_request'] = \
            revoke_collection_role_request
        return self.revoke_collection_role_endpoint.call_with_http_info(**kwargs)

    def set_collection_approval(
        self,
        collection_id,
        x_authorization,
        x_wallet_decrypt_key,
        set_collection_approval_request,
        **kwargs
    ):
        """Set collection approval  # noqa: E501

        Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_collection_approval(collection_id, x_authorization, x_wallet_decrypt_key, set_collection_approval_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            x_authorization (str): The `secretKey` of a specific game or the `accessToken` of a specific player.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
            set_collection_approval_request (SetCollectionApprovalRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['set_collection_approval_request'] = \
            set_collection_approval_request
        return self.set_collection_approval_endpoint.call_with_http_info(**kwargs)

    def set_collection_item_timelock(
        self,
        collection_id,
        collection_item_id,
        x_authorization,
        x_wallet_decrypt_key,
        set_collection_item_timelock_request,
        **kwargs
    ):
        """Set collection item timelock  # noqa: E501

        Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_collection_item_timelock(collection_id, collection_item_id, x_authorization, x_wallet_decrypt_key, set_collection_item_timelock_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.
            x_authorization (str): The `secretKey` of the authenticating game.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
            set_collection_item_timelock_request (SetCollectionItemTimelockRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['set_collection_item_timelock_request'] = \
            set_collection_item_timelock_request
        return self.set_collection_item_timelock_endpoint.call_with_http_info(**kwargs)

    def transfer_collection_item(
        self,
        collection_id,
        collection_item_id,
        x_authorization,
        x_wallet_decrypt_key,
        transfer_collection_item_request,
        **kwargs
    ):
        """Transfer collection item  # noqa: E501

        Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_collection_item(collection_id, collection_item_id, x_authorization, x_wallet_decrypt_key, transfer_collection_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            collection_id (str): Any collection id within the MetaFab platform.
            collection_item_id (float): Any item id for the collection. Zero, or a positive integer.
            x_authorization (str): The `secretKey` of a specific game or the `accessToken` of a specific player.
            x_wallet_decrypt_key (str): The `walletDecryptKey` of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
            transfer_collection_item_request (TransferCollectionItemRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['collection_id'] = \
            collection_id
        kwargs['collection_item_id'] = \
            collection_item_id
        kwargs['x_authorization'] = \
            x_authorization
        kwargs['x_wallet_decrypt_key'] = \
            x_wallet_decrypt_key
        kwargs['transfer_collection_item_request'] = \
            transfer_collection_item_request
        return self.transfer_collection_item_endpoint.call_with_http_info(**kwargs)

