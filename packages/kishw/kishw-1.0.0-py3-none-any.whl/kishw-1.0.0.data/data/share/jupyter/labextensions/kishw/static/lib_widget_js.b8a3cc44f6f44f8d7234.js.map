{"version":3,"file":"lib_widget_js.b8a3cc44f6f44f8d7234.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;;;;;;ACdP;AACA;AAC0D;AACb;AAC2B;AAC3B;AAC6C;;;;;;;;;;;;;;;;;;ACN1F;AACA;AACqE;AACZ;AACzD;AACA;AACA;AACO,mCAAmC,8DAAW;AACrD;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,kKAAkK;AACtO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB,IAAI;AAC5C;AACA;AACA;AACA;AACA,mDAAmD,EAAE,6EAA0B;AAC/E;AACA,oCAAoC,iDAAW;AAC/C,4CAA4C,oDAAc;AAC1D,2CAA2C,oDAAc;;;;;;;;;;;;;;;;;;AChCzD;AACA;AACsD;AACG;AACzD;AACA;AACA;AACO,yBAAyB,gEAAS;AACzC;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,oIAAoI;AACxM;AACA;AACA;AACA,0BAA0B,iDAAW;AACrC,kCAAkC,oDAAc;;;;;;;;;;;;;;;;;;;;;;;;ACjBK;AACR;AACtB;AACc;AACoB;AACzD;AACA;AACA;AACA,4CAA4C,uDAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,8CAAU;AAC/C;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,mSAAmS;AACvW;AACA;AACA;AACA,+BAA+B,iDAAW;AAC1C,uCAAuC,oDAAc;AACrD;AACA,8BAA8B,iDAAW;AACzC,mCAAmC,oDAAc;AACjD;AACA;AACA;AACO,6BAA6B,+DAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACoD;AACK;AACzD;AACA;AACA;AACO,yBAAyB,8DAAW;AAC3C;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,oIAAoI;AACxM;AACA;AACA;AACA,0BAA0B,iDAAW;AACrC,kCAAkC,oDAAc;AAChD,iCAAiC,oDAAc","sources":["webpack://kishw/./lib/version.js","webpack://kishw/./lib/widget.js","webpack://kishw/./lib/widgets/frontend.js","webpack://kishw/./lib/widgets/panel.js","webpack://kishw/./lib/widgets/split_panel.js","webpack://kishw/./lib/widgets/title.js"],"sourcesContent":["// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;\n","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterFrontEndModel } from './widgets/frontend';\nimport { PanelModel } from './widgets/panel';\nimport { SplitPanelModel, SplitPanelView } from './widgets/split_panel';\nimport { TitleModel } from './widgets/title';\nexport { JupyterFrontEndModel, PanelModel, SplitPanelModel, SplitPanelView, TitleModel, };\n","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { DOMWidgetModel, WidgetModel, } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a JupyterFrontEnd.\n */\nexport class JupyterFrontEndModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: JupyterFrontEndModel.model_name, _model_module: JupyterFrontEndModel.model_module, _model_module_version: JupyterFrontEndModel.model_module_version });\n    }\n    /**\n     * Initialize a JupyterFrontEndModel instance.\n     *\n     * @param attributes The base attributes.\n     * @param options The initialization options.\n     */\n    initialize(attributes, options) {\n        this._app = JupyterFrontEndModel.app;\n        super.initialize(attributes, options);\n        this.send({ event: 'lab_ready' }, {});\n        this.set('version', this._app.version);\n        this.save_changes();\n    }\n}\nJupyterFrontEndModel.serializers = Object.assign({}, DOMWidgetModel.serializers);\nJupyterFrontEndModel.model_name = 'JupyterFrontEndModel';\nJupyterFrontEndModel.model_module = MODULE_NAME;\nJupyterFrontEndModel.model_module_version = MODULE_VERSION;\nJupyterFrontEndModel.view_module_version = MODULE_VERSION;\n","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { VBoxModel } from '@jupyter-widgets/controls';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a panel.\n */\nexport class PanelModel extends VBoxModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: PanelModel.model_name, _model_module: PanelModel.model_module, _model_module_version: PanelModel.model_module_version });\n    }\n}\nPanelModel.model_name = 'PanelModel';\nPanelModel.model_module = MODULE_NAME;\nPanelModel.model_module_version = MODULE_VERSION;\n","import { VBoxView } from '@jupyter-widgets/controls';\nimport { SplitPanel } from '@lumino/widgets';\nimport $ from 'jquery';\nimport { PanelModel } from './panel';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * A Lumino widget for split panels.\n */\nclass JupyterLuminoSplitPanelWidget extends SplitPanel {\n    /**\n     * Construct a new JupyterLuminoSplitPanelWidget.\n     *\n     * @param options The instantiation options for a JupyterLuminoSplitPanelWidget.\n     */\n    constructor(options) {\n        const view = options.view;\n        // delete options.view;\n        super(options);\n        this.addClass('jp-JupyterLuminoSplitPanelWidget');\n        this._view = view;\n    }\n    /**\n     * Handle a lumino message.\n     *\n     * @param msg The message to handle.\n     */\n    processMessage(msg) {\n        super.processMessage(msg);\n        this._view.processLuminoMessage(msg);\n    }\n    /**\n     * Dispose the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        if (this._view) {\n            this._view.remove();\n        }\n        this._view = null;\n    }\n}\n/**\n * The model for a split panel.\n */\nexport class SplitPanelModel extends PanelModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: SplitPanelModel.model_name, _model_module: SplitPanelModel.model_module, _model_module_version: SplitPanelModel.model_module_version, _view_name: SplitPanelModel.model_name, _view_module: SplitPanelModel.model_module, _view_module_version: SplitPanelModel.model_module_version });\n    }\n}\nSplitPanelModel.model_name = 'SplitPanelModel';\nSplitPanelModel.model_module = MODULE_NAME;\nSplitPanelModel.model_module_version = MODULE_VERSION;\nSplitPanelModel.view_name = 'SplitPanelView';\nSplitPanelModel.view_module = MODULE_NAME;\nSplitPanelModel.view_module_name = MODULE_VERSION;\n/**\n * The view for a split panel.\n */\nexport class SplitPanelView extends VBoxView {\n    /**\n     * Create the widget and return the DOM element.\n     *\n     * @param tagName the tag name\n     */\n    _createElement(tagName) {\n        this.luminoWidget = new JupyterLuminoSplitPanelWidget({\n            view: this,\n            orientation: this.model.get('orientation')\n        });\n        return this.luminoWidget.node;\n    }\n    /**\n     * Set the DOM element.\n     *\n     * @param el The element.\n     */\n    _setElement(el) {\n        if (this.el || el !== this.luminoWidget.node) {\n            throw new Error('Cannot reset the DOM element.');\n        }\n        this.el = this.luminoWidget.node;\n        this.$el = $(this.luminoWidget.node);\n    }\n    /**\n     * Initialize a SplitPanelView instance.\n     *\n     * @param parameters The view parameters.\n     */\n    initialize(parameters) {\n        super.initialize(parameters);\n        const luminoWidget = this\n            .luminoWidget;\n        this.model.on('change:orientation', () => {\n            const orientation = this.model.get('orientation');\n            luminoWidget.orientation = orientation;\n        });\n    }\n    /**\n     * Render the view.\n     */\n    async render() {\n        super.render();\n        const views = await Promise.all(this.children_views.views);\n        views.forEach(async (view) => {\n            this.luminoWidget.addWidget(view.luminoWidget);\n        });\n    }\n}\n","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetModel } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a title widget.\n */\nexport class TitleModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: TitleModel.model_name, _model_module: TitleModel.model_module, _model_module_version: TitleModel.model_module_version });\n    }\n}\nTitleModel.model_name = 'TitleModel';\nTitleModel.model_module = MODULE_NAME;\nTitleModel.model_module_version = MODULE_VERSION;\nTitleModel.view_module_version = MODULE_VERSION;\n"],"names":[],"sourceRoot":""}