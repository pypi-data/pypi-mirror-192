#!/usr/bin/env python
from arrrgs import command, no_command, arg, run, global_args

from libhapm.packages import Manifest, repo_name
from libhapm.packages.controller import PackagesController

STORAGE_DIR = ".hapm"
MANIFEST_PATH = "hapm.yaml"

global_args(
    arg('--manifest', '-m', default=MANIFEST_PATH, help="Manifest path"),
    arg('--storage', '-s', default=STORAGE_DIR, help="Storage location")
)


@no_command()
def sync(args, store: PackagesController):
    """Synchronizes local versions of components with the manifest."""
    store.apply(Manifest(args.manifest))

@command(
    arg('--type', '-t', required=True, default=None, help="Package type"),
    arg('path', default=None, help="Output path")
)
def put(args, store: PackagesController):
    """Synchronizes local versions of components with the manifest."""
    store.export(args.type, args.path)

@command(name="list")
def list_packages(_, store: PackagesController):
    """Print current version of components."""
    values = store.values()
    for package_type, packages in values.items():
        print(f"┌ {package_type.capitalize()} ")
        i = 0
        for package in packages:
            if i == len(packages) - 1:
                prefix = '└─'
            else:
                prefix = '├─'
            name = repo_name(package["url"])
            version = package["version"]
            print(f"{prefix} {name}@{version}")
            i += 1


def prepare(args):
    """Creates HAPM context"""
    return args, PackagesController(args.storage)


if __name__ == "__main__":
    run(prepare=prepare)
