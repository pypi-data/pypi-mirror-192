{"version":3,"sources":["STCards.tsx","index.tsx"],"names":["Meta","Card","truncate","input","maxlen","length","substring","STCards","render","items","props","args","rows","that","forEach","item","index","actions","show_delete_action","push","DeleteOutlined","key","onClick","show_setting_action","SettingOutlined","show_edit_action","EditOutlined","show_open_action","DoubleRightOutlined","id","hoverable","style","width","margin","cover","alt","src","height","avatar","title","description","desc_max_len","display","flexWrap","event","Streamlit","setComponentValue","action","payload","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"kTAaQA,EAASC,IAATD,KAEFE,EAAW,SAACC,EAAeC,GAAhB,OACfD,EAAME,OAASD,EAAf,UAA2BD,EAAMG,UAAU,EAAGF,GAA9C,OAA6DD,GAWzDI,E,4MASGC,OAAS,WACd,IAAMC,EAAgB,EAAKC,MAAMC,KAAKF,MAChCG,EAAoB,GACtBC,EAAI,eAsCR,OArCAJ,EAAMK,SAAQ,SAACC,EAAYC,GACzB,IAAMC,EAAuB,GACzB,EAAKP,MAAMC,KAAKO,oBAClBD,EAAQE,KAAK,kBAACC,EAAA,EAAD,CAAgBC,IAAI,SAASC,QAAS,kBAAIT,EAAKS,QAAQP,EAAM,cAExE,EAAKL,MAAMC,KAAKY,qBAClBN,EAAQE,KAAK,kBAACK,EAAA,EAAD,CAAiBH,IAAI,UAAUC,QAAS,kBAAIT,EAAKS,QAAQP,EAAM,eAE1E,EAAKL,MAAMC,KAAKc,kBAClBR,EAAQE,KAAK,kBAACO,EAAA,EAAD,CAAcL,IAAI,OAAOC,QAAS,kBAAIT,EAAKS,QAAQP,EAAM,YAEpE,EAAKL,MAAMC,KAAKgB,kBAClBV,EAAQE,KAAK,kBAACS,EAAA,EAAD,CAAqBP,IAAI,OAAOC,QAAS,kBAAIT,EAAKS,QAAQP,EAAM,YAE/EH,EAAKO,KACH,kBAAC,IAAD,CACEE,IAAG,eAAUN,EAAKc,IAClBC,WAAS,EACTC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,QAC7BC,MACEnB,EAAKmB,MACH,yBAAKC,IAAKpB,EAAKmB,MAAOE,IAAKrB,EAAKmB,MAAOF,MAAO,IAAKK,OAAQ,MACzD,KAENpB,QAASA,GAET,kBAACjB,EAAD,CACEsC,OAAQvB,EAAKuB,OAAS,kBAAC,IAAD,CAAQF,IAAKrB,EAAKuB,SAAa,KACrDC,MAAOxB,EAAKwB,MACZC,YAAatC,EACXa,EAAKyB,YACL,EAAK9B,MAAMC,KAAK8B,qBAMnB,yBAAKV,MAAO,CAAEW,QAAS,OAAQC,SAAU,SAAW/B,I,6CAhD7D,SAAgBG,EAAY6B,GAC1BC,IAAUC,kBAAkB,CAC1BC,OAAQH,EACRI,QAASjC,Q,GALOkC,KAsDPC,cAAwB3C,G,OC5EvC4C,IAAS3C,OACP,kBAAC,IAAM4C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.39d21fe9.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport {\n  EditOutlined,\n  DoubleRightOutlined,\n  SettingOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\"\nimport { Avatar, Card } from \"antd\"\nconst { Meta } = Card\n\nconst truncate = (input: string, maxlen: number) =>\n  input.length > maxlen ? `${input.substring(0, maxlen)}...` : input\n\ninterface Item {\n  id: string\n  title: string\n  description: string\n  cover: string\n  cover_alt: string\n  avatar: string\n}\n\nclass STCards extends StreamlitComponentBase {\n\n  private onClick(item: Item, event: string) {\n    Streamlit.setComponentValue({\n      action: event,\n      payload: item,\n    })\n  }\n\n  public render = (): ReactNode => {\n    const items: Item[] = this.props.args.items\n    const rows: ReactNode[] = []\n    let that = this\n    items.forEach((item: Item, index: number) => {\n      const actions: ReactNode[] = []\n      if (this.props.args.show_delete_action) {\n        actions.push(<DeleteOutlined key=\"delete\" onClick={()=>that.onClick(item, \"delete\")}/>)\n      }\n      if (this.props.args.show_setting_action) {\n        actions.push(<SettingOutlined key=\"setting\" onClick={()=>that.onClick(item, \"setting\")}/>)\n      }\n      if (this.props.args.show_edit_action) {\n        actions.push(<EditOutlined key=\"edit\" onClick={()=>that.onClick(item, \"edit\")}/>)\n      }\n      if (this.props.args.show_open_action) {\n        actions.push(<DoubleRightOutlined key=\"open\" onClick={()=>that.onClick(item, \"open\")}/>)\n      }\n      rows.push(\n        <Card\n          key={`card-${item.id}`}\n          hoverable\n          style={{ width: 240, margin: \"15px\" }}\n          cover={\n            item.cover ? (\n              <img alt={item.cover} src={item.cover} width={240} height={160} />\n            ) : null\n          }\n          actions={actions}\n        >\n          <Meta\n            avatar={item.avatar ? <Avatar src={item.avatar} /> : null}\n            title={item.title}\n            description={truncate(\n              item.description,\n              this.props.args.desc_max_len\n            )}\n          />\n        </Card>\n      )\n    })\n    return <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>{rows}</div>\n  }\n}\n\nexport default withStreamlitConnection(STCards)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport STCards from \"./STCards\"\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <STCards />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}